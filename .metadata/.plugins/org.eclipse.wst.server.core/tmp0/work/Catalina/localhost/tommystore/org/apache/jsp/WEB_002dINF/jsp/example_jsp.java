/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.21
 * Generated at: 2019-10-31 06:38:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class example_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("  <meta charset=\"UTF-8\">\n");
      out.write("  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n");
      out.write("  <title>To-do App in Backbone.js</title>\n");
      out.write("  \n");
      out.write("  <!-- ========= -->\n");
      out.write("  <!--    CSS    -->\n");
      out.write("  <!-- ========= -->\n");
      out.write("  <style type=\"text/css\">\n");
      out.write("    /* Hides bullet points from todo list */\n");
      out.write("    #todoapp ul {\n");
      out.write("      list-style-type: none;\n");
      out.write("    }\n");
      out.write("  </style>  \n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("  <!-- ========= -->\n");
      out.write("  <!-- Your HTML -->\n");
      out.write("  <!-- ========= -->\n");
      out.write("\n");
      out.write("  <section id=\"todoapp\">\n");
      out.write("    <header id=\"header\">\n");
      out.write("      <h1>Todos</h1>\n");
      out.write("      <input id=\"new-todo\" placeholder=\"What needs to be done?\" autofocus>\n");
      out.write("    </header>\n");
      out.write("    <section id=\"main\">\n");
      out.write("      <ul id=\"todo-list\"></ul>\n");
      out.write("    </section>\n");
      out.write("  </section>\n");
      out.write("  <div>\n");
      out.write("    <p>Find the tutorial and code in <a href=\"http://adrianmejia.com/blog/2012/09/11/backbone-dot-js-for-absolute-beginners-getting-started/\">here</a></p>\n");
      out.write("  </div>  \n");
      out.write("\n");
      out.write("  <!-- Templates -->\n");
      out.write("  <script type=\"text/template\" id=\"item-template\">\n");
      out.write("    <div class=\"view\">\n");
      out.write("      <input class=\"toggle\" type=\"checkbox\">\n");
      out.write("      <label></label>\n");
      out.write("    </div>\n");
      out.write("  </script>  \n");
      out.write("\n");
      out.write("  <!-- ========= -->\n");
      out.write("  <!-- Libraries -->\n");
      out.write("  <!-- ========= -->\n");
      out.write("  <script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js\" type=\"text/javascript\"></script>\n");
      out.write("  <script src=\"http://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.3.3/underscore-min.js\" type=\"text/javascript\"></script>\n");
      out.write("  <script src=\"http://cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js\" type=\"text/javascript\"></script>\n");
      out.write("  <script src=\"http://cdnjs.cloudflare.com/ajax/libs/backbone-localstorage.js/1.0/backbone.localStorage-min.js\" type=\"text/javascript\"></script> \n");
      out.write("\n");
      out.write("  <!-- =============== -->\n");
      out.write("  <!-- Javascript code -->\n");
      out.write("  <!-- =============== -->\n");
      out.write("  <script type=\"text/javascript\">\n");
      out.write("    'use strict';\n");
      out.write("\n");
      out.write("    var app = {}; // create namespace for our app\n");
      out.write("    \n");
      out.write("    //--------------\n");
      out.write("    // Models\n");
      out.write("    //--------------\n");
      out.write("    app.Todo = Backbone.Model.extend({\n");
      out.write("      defaults: {\n");
      out.write("        title: '',\n");
      out.write("        completed: false\n");
      out.write("      }\n");
      out.write("    });\n");
      out.write("\n");
      out.write("    //--------------\n");
      out.write("    // Collections\n");
      out.write("    //--------------\n");
      out.write("    app.TodoList = Backbone.Collection.extend({\n");
      out.write("      model: app.Todo,\n");
      out.write("      localStorage: new Store(\"backbone-todo\")\n");
      out.write("    });\n");
      out.write("\n");
      out.write("    // instance of the Collection\n");
      out.write("    app.todoList = new app.TodoList();\n");
      out.write("\n");
      out.write("    //--------------\n");
      out.write("    // Views\n");
      out.write("    //--------------\n");
      out.write("    \n");
      out.write("    // renders individual todo items list (li)\n");
      out.write("    app.TodoView = Backbone.View.extend({\n");
      out.write("      tagName: 'li',\n");
      out.write("      template: _.template($('#item-template').html()),\n");
      out.write("      render: function(){\n");
      out.write("        this.$el.html(this.template(this.model.toJSON()));\n");
      out.write("        return this; // enable chained calls\n");
      out.write("      }\n");
      out.write("    });\n");
      out.write("\n");
      out.write("    // renders the full list of todo items calling TodoView for each one.\n");
      out.write("    app.AppView = Backbone.View.extend({\n");
      out.write("      el: '#todoapp',\n");
      out.write("      initialize: function () {\n");
      out.write("        this.input = this.$('#new-todo');\n");
      out.write("        app.todoList.on('add', this.addAll, this);\n");
      out.write("        app.todoList.on('reset', this.addAll, this);\n");
      out.write("        app.todoList.fetch(); // Loads list from local storage\n");
      out.write("      },\n");
      out.write("      events: {\n");
      out.write("        'keypress #new-todo': 'createTodoOnEnter'\n");
      out.write("      },\n");
      out.write("      createTodoOnEnter: function(e){\n");
      out.write("        if ( e.which !== 13 || !this.input.val().trim() ) { // ENTER_KEY = 13\n");
      out.write("          return;\n");
      out.write("        }\n");
      out.write("        app.todoList.create(this.newAttributes());\n");
      out.write("        this.input.val(''); // clean input box\n");
      out.write("      },\n");
      out.write("      addOne: function(todo){\n");
      out.write("        var view = new app.TodoView({model: todo});\n");
      out.write("        $('#todo-list').append(view.render().el);\n");
      out.write("      },\n");
      out.write("      addAll: function(){\n");
      out.write("        this.$('#todo-list').html(''); // clean the todo list\n");
      out.write("        app.todoList.each(this.addOne, this);\n");
      out.write("      },\n");
      out.write("      newAttributes: function(){\n");
      out.write("        return {\n");
      out.write("          title: this.input.val().trim(),\n");
      out.write("          completed: false\n");
      out.write("        }\n");
      out.write("      }\n");
      out.write("    });\n");
      out.write("\n");
      out.write("    //--------------\n");
      out.write("    // Initializers\n");
      out.write("    //--------------   \n");
      out.write("\n");
      out.write("    app.appView = new app.AppView(); \n");
      out.write("\n");
      out.write("  </script>\n");
      out.write("  \n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
