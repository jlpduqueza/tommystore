<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Enhanced Audit Logging in WildFly Elytron - RFC Support and Reliabiliity/Speed Customization Update</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/xElKamzZguI/enhanced-audit-logging-in-wildfly.html" /><category term="audit-logging" scheme="searchisko:content:tags" /><category term="auditing" scheme="searchisko:content:tags" /><category term="Elytron" scheme="searchisko:content:tags" /><category term="feed_group_name_wildfly" scheme="searchisko:content:tags" /><category term="feed_name_jucook" scheme="searchisko:content:tags" /><category term="logging" scheme="searchisko:content:tags" /><category term="RFC3164" scheme="searchisko:content:tags" /><category term="RFC5424" scheme="searchisko:content:tags" /><category term="wildfly" scheme="searchisko:content:tags" /><author><name>Justin Cook</name></author><id>searchisko:content:id:jbossorg_blog-enhanced_audit_logging_in_wildfly_elytron_rfc_support_and_reliabiliity_speed_customization_update</id><updated>2019-08-30T14:26:00Z</updated><published>2019-08-30T14:26:00Z</published><content type="html">&lt;!DOCTYPE html&gt;&lt;html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang=""&gt;&lt;head&gt; &lt;meta charset="utf-8" /&gt; &lt;meta name="generator" content="pandoc" /&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" /&gt; &lt;title&gt;rfc_support_reliability_customization_final&lt;/title&gt; &lt;style type="text/css"&gt; code{white-space: pre-wrap;} span.smallcaps{font-variant: small-caps;} span.underline{text-decoration: underline;} div.column{display: inline-block; vertical-align: top; width: 50%;} &lt;/style&gt; &lt;style type="text/css"&gt;a.sourceLine { display: inline-block; line-height: 1.25; } a.sourceLine { pointer-events: none; color: inherit; text-decoration: inherit; } a.sourceLine:empty { height: 1.2em; position: absolute; } .sourceCode { overflow: visible; } code.sourceCode { white-space: pre; position: relative; } div.sourceCode { margin: 1em 0; } pre.sourceCode { margin: 0; } @media screen { div.sourceCode { overflow: auto; } } @media print { code.sourceCode { white-space: pre-wrap; } a.sourceLine { text-indent: -1em; padding-left: 1em; } } pre.numberSource a.sourceLine { position: relative; } pre.numberSource a.sourceLine:empty { position: absolute; } pre.numberSource a.sourceLine::before { content: attr(data-line-number); position: absolute; left: -5em; text-align: right; vertical-align: baseline; border: none; pointer-events: all; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; padding: 0 4px; width: 4em; color: #aaaaaa; } pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa; padding-left: 4px; } div.sourceCode { } @media screen { a.sourceLine::before { text-decoration: underline; } } code span.al { color: #ff0000; font-weight: bold; } /* Alert */ code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */ code span.at { color: #7d9029; } /* Attribute */ code span.bn { color: #40a070; } /* BaseN */ code span.bu { } /* BuiltIn */ code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */ code span.ch { color: #4070a0; } /* Char */ code span.cn { color: #880000; } /* Constant */ code span.co { color: #60a0b0; font-style: italic; } /* Comment */ code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */ code span.do { color: #ba2121; font-style: italic; } /* Documentation */ code span.dt { color: #902000; } /* DataType */ code span.dv { color: #40a070; } /* DecVal */ code span.er { color: #ff0000; font-weight: bold; } /* Error */ code span.ex { } /* Extension */ code span.fl { color: #40a070; } /* Float */ code span.fu { color: #06287e; } /* Function */ code span.im { } /* Import */ code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */ code span.kw { color: #007020; font-weight: bold; } /* Keyword */ code span.op { color: #666666; } /* Operator */ code span.ot { color: #007020; } /* Other */ code span.pp { color: #bc7a00; } /* Preprocessor */ code span.sc { color: #4070a0; } /* SpecialChar */ code span.ss { color: #bb6688; } /* SpecialString */ code span.st { color: #4070a0; } /* String */ code span.va { color: #19177c; } /* Variable */ code span.vs { color: #4070a0; } /* VerbatimString */ code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */ &lt;/style&gt; &lt;style&gt;table { border-cllapse: collapse; width: 100%; } th { background-color: #077992; color: white; } td { padding: 1em; } .even { background-color: #424242; } &lt;/style&gt; &lt;!--[if lt IE 9]&gt; &lt;script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js"&gt;&lt;/script&gt; &lt;![endif]--&gt;&lt;/head&gt;&lt;body&gt;&lt;h1 id="enhancing-audit-logging-in-wildfly-elytron---rfc-support-and-configuring-reconnects-update"&gt;Enhancing Audit Logging in WildFly Elytron - RFC Support and Configuring Reconnects Update&lt;/h1&gt;&lt;h2 id="overview"&gt;Overview&lt;/h2&gt;&lt;p&gt;In WildFly 18, audit logging in WildFly Elytron has now been enhanced with additional audit logging capabilities, with additional RFC Support and the ability to configure how many times Elytron should attempt to send messages to a syslog server when an error sending is encountered. This blog post will give an overview about the enhancements that have been added and some examples on how to use these new enhancements. Some sections of this blog post have already been detailed in the original blog post detailing the enhancements that were being worked on, available at: https://justinwildfly.blogspot.com/2019/06/enhanced-audit-logging-in-wildfly.html&lt;/p&gt;&lt;h2 id="additional-rfc-support"&gt;Additional RFC Support&lt;/h2&gt;&lt;h3 id="rfc-formats"&gt;RFC Formats&lt;/h3&gt;&lt;p&gt;WildFly Elytron’s syslog audit logging currently only supports RFC 5424, but some users may wish to use the legacy RFC 3164. Elytron is now being enhanced to provide support for this additional RFC through the addition of a &lt;code&gt;syslog-format&lt;/code&gt; parameter. This new parameter will default to the current supported value of RFC 5424 and will support the value of RFC 3164, or can be explicitly set as RFC 5424. The parameter can be used on the WildFly CLI in the following ways:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;/subsystem=elytron/syslog-audit-log=syslog-test:add(server-address=&amp;quot;127.0.0.1&amp;quot;,port=10999,transport=UDP,host-name=localhost,syslog-format=RFC3164)&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;/subsystem=elytron/syslog-audit-log=syslog-test:add(server-address=&amp;quot;127.0.0.1&amp;quot;,port=10999,transport=UDP,host-name=localhost,syslog-format=RFC5424)&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;/subsystem=elytron/syslog-audit-log=syslog-test:add(server-address=&amp;quot;127.0.0.1&amp;quot;,port=10999,transport=UDP,host-name=localhost)&lt;/code&gt;&lt;/pre&gt;&lt;h3 id="additional-rfc-events"&gt;Additional RFC Events&lt;/h3&gt;&lt;h4 id="rfc3164syslogevent-and-rfc5424syslogevent"&gt;Rfc3164SyslogEvent and Rfc5424SyslogEvent&lt;/h4&gt;&lt;p&gt;Two new publicly accessible SecurityEvent classes have been added to WildFly Elytron, along with the publicly accessible abstract class SyslogAuditEvent. These new events can be used to provide more information on what is being sent to the syslog-server, showing the &lt;code&gt;syslog-format&lt;/code&gt; along with the standard &lt;code&gt;security-identity&lt;/code&gt; and &lt;code&gt;event-time&lt;/code&gt; values.&lt;/p&gt;&lt;h4 id="audit-logging-enabled-message"&gt;Audit Logging Enabled Message&lt;/h4&gt;&lt;p&gt;WildFly Elytron will now send a syslog message to the syslog server when the syslog audit logging is enabled, to allow the user to verify their connection and syslog server are both working. This new message will consist of “Elytron audit logging enabled with RFC format:” followed by the syslog-format that has been set, with a priority of &lt;code&gt;Informational&lt;/code&gt;.&lt;/p&gt;&lt;h2 id="reliability-vs-speed"&gt;Reliability vs Speed&lt;/h2&gt;&lt;p&gt;Users will now be able to limit how many times WildFly Elytron will attempt to resend a message to the syslog-server, as compared to currently trying to resend the message forever. This new parameter is called “reconnect-attempts” and is an optional parameter on the WildFly CLI with a default value of &lt;code&gt;-1&lt;/code&gt;. The following values available to the parameter and their use are:&lt;/p&gt;&lt;table&gt;&lt;colgroup&gt;&lt;col style="width: 50%" /&gt;&lt;col style="width: 50%" /&gt;&lt;/colgroup&gt;&lt;thead&gt;&lt;tr class="header"&gt;&lt;th style="text-align: center;"&gt;Value&lt;/th&gt;&lt;th style="text-align: center;"&gt;Use&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr class="odd"&gt;&lt;td style="text-align: center;"&gt;-1&lt;/td&gt;&lt;td style="text-align: center;"&gt;Always attempt to send audit messages, regardless of the amount of previous failures&lt;/td&gt;&lt;/tr&gt;&lt;tr class="even"&gt;&lt;td style="text-align: center;"&gt;0&lt;/td&gt;&lt;td style="text-align: center;"&gt;Only attempt to send a single message, which would be the initial connection message, before closing the endpoint if there was an error sending&lt;/td&gt;&lt;/tr&gt;&lt;tr class="odd"&gt;&lt;td style="text-align: center;"&gt;Positive integer&lt;/td&gt;&lt;td style="text-align: center;"&gt;Closes the endpoint if there messages failed to send n times&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;p&gt;On the WildFly CLI, these values would look like, with infinite, no resends, n resends, default of infinite:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;/subsystem=elytron/syslog-audit-log=syslog-test:add(server-address=&amp;quot;127.0.0.1&amp;quot;,port=10999,transport=UDP,host-name=localhost,reconnect-attempts=-1)&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;/subsystem=elytron/syslog-audit-log=syslog-test:add(server-address=&amp;quot;127.0.0.1&amp;quot;,port=10999,transport=UDP,host-name=localhost,reconnect-attempts=0)&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;/subsystem=elytron/syslog-audit-log=syslog-test:add(server-address=&amp;quot;127.0.0.1&amp;quot;,port=10999,transport=UDP,host-name=localhost,reconnect-attempts=50)&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;/subsystem=elytron/syslog-audit-log=syslog-test:add(server-address=&amp;quot;127.0.0.1&amp;quot;,port=10999,transport=UDP,host-name=localhost)&lt;/code&gt;&lt;/pre&gt;&lt;h2 id="summary"&gt;Summary&lt;/h2&gt;&lt;p&gt;This blog post provides some information about enhancements to WildFly Elytron’s audit logging, in particular it talks about the addition of a syslog-format parameter and a reconnect-attempts parameter for syslog audit logging, two new SecurityEvents and a new abstract SecurityEvent, and an initial connect message.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/xElKamzZguI" height="1" width="1" alt=""/&gt;</content><summary>rfc_support_reliability_customization_final Enhancing Audit Logging in WildFly Elytron - RFC Support and Configuring Reconnects Update Overview In WildFly 18, audit logging in WildFly Elytron has now been enhanced with additional audit logging capabilities, with additional RFC Support and the ability to configure how many times Elytron should attempt to send messages to a syslog server when an err...</summary><dc:creator>Justin Cook</dc:creator><dc:date>2019-08-30T14:26:00Z</dc:date><feedburner:origLink>https://justinwildfly.blogspot.com/2019/08/enhanced-audit-logging-in-wildfly.html</feedburner:origLink></entry><entry><title>The clean break of Open Virtual Network from Open vSwitch</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/EH196gny7bs/" /><category term="Cloud" /><category term="OpenShift" /><category term="networking" /><category term="open virtual network" /><category term="Open vSwitch" /><author><name>Mark Michelson</name></author><id>https://developers.redhat.com/blog/?p=619907</id><updated>2019-08-30T07:01:21Z</updated><published>2019-08-30T07:01:21Z</published><content type="html">&lt;p&gt;After loads of email and IRC discussions, the &lt;a href="https://github.com/ovn-org/ovn"&gt;Open Virtual Network (OVN) source code&lt;/a&gt; has been separated from the &lt;a href="https://github.com/openvswitch/ovs"&gt;Open vSwitch (OVS) source code&lt;/a&gt;, and the two projects now operate independently. In this article, we&amp;#8217;ll explain the reasons for separating OVN from OVS, the technical aspects of the split, and the upcoming challenges for the OVN project.&lt;span id="more-619907"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Background&lt;/h2&gt; &lt;p&gt;OVN was initially announced on the OVS developers mailing list in January of 2015. From the initial &lt;a href="https://mail.openvswitch.org/pipermail/ovs-dev/2015-January/293922.html"&gt;email announcement&lt;/a&gt;:&lt;/p&gt; &lt;blockquote&gt;&lt;p&gt;&amp;#8220;OVN will not require a special build of OVS or OVN-specific changes to ovs-vswitchd or ovsdb-server. OVN components will be part of the Open vSwitch source and binary distributions.&amp;#8221;&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;The decision to include OVN in the same source distribution of OVS was done mostly out of convenience. By including it in the same source distribution, OVN could make use of bleeding-edge features of OVS without issue. OVS wouldn&amp;#8217;t need to be modified to export libraries for external programs&amp;#8217; use. All that was needed to be done was to make an OVN subdirectory in the OVS project and put some code in there. That said, there were discussions about OVN existing in a separate repo from the beginning, and it was expected that eventually OVN would split out into its own repo. Thus, the issues became: When would it become necessary, and who would be willing to put in the work?&lt;/p&gt; &lt;h2&gt;The present&lt;/h2&gt; &lt;p&gt;Since the initial creation of OVN in 2015, the project has matured, and cloud management services (CMSes) have begun adopting it. At Red Hat, &lt;a href="https://www.openstack.org/"&gt;OpenStack&lt;/a&gt; and &lt;a href="https://developers.redhat.com/openshift/"&gt;Openshift&lt;/a&gt; both make use of OVN for defining their virtual networks. From their point of view, they interact directly with OVN, while OVS performs more &amp;#8220;under the hood&amp;#8221; work. OVN is constantly getting vital new features, while OVS gets changes they don&amp;#8217;t care nearly as much about. Also, from a CMS point of view, OVS is seen as &amp;#8220;stable.&amp;#8221; There&amp;#8217;s not as much incentive to want to upgrade the version of OVS they run on. OVS operates on a six-month release cycle, but CMSes are interested in getting the new OVN features more quickly. CMSes are satisfied with the current feature set of OVS and would prefer not to have to update OVS if they do not have to. Instead, they have to wait six months for the OVN features to be available, and then they&amp;#8217;re forced to update OVS beyond what they want to be using.&lt;/p&gt; &lt;h2&gt;Three stages of separation&lt;/h2&gt; &lt;p&gt;Based on this situation, discussion about separating OVN from OVS has been going on for a long time. Earlier in 2019, Red Hat made the resolution to put in the legwork to get OVN separated from OVS. The first step was to work through the technical aspects of the split. Here is a &lt;a href="https://mail.openvswitch.org/pipermail/ovs-dev/2018-December/354513.html"&gt;mailing list post&lt;/a&gt; I created outlining potential strategies for performing the separation. In the end, we came up with a three-stage plan for separating OVN from OVS.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Stage 1: Separate the packaging of OVN from OVS.&lt;/li&gt; &lt;li&gt;Stage 2: Create a separate OVN source repo, including OVS as a Git subtree.&lt;/li&gt; &lt;li&gt;Stage 3: Eliminate the OVS subtree, allowing compilation of OVN using a remote installation of OVS.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;We &lt;a href="https://mail.openvswitch.org/pipermail/ovs-dev/2019-January/354924.html"&gt;completed Stage 1&lt;/a&gt; in January. A new spec file was added to the OVS distribution, and OVN&amp;#8217;s RPMs were moved to this spec file. The package names also changed at this point. When OVS 2.11 released, rather than having &lt;em&gt;openvswitch-ovn-central&lt;/em&gt; and &lt;em&gt;openvswitch-ovn-host packages&lt;/em&gt;, we now created &lt;em&gt;ovn-central&lt;/em&gt; and &lt;em&gt;ovn-host&lt;/em&gt; packages. Aside from the change in the package name, this step likely was not noticeable to users. The new package was designed so that an upgrade would transparently install the new packages.&lt;/p&gt; &lt;p&gt;For Stage 2, we performed a couple of &lt;a href="https://mail.openvswitch.org/pipermail/ovs-dev/2019-February/356365.html"&gt;trial&lt;/a&gt; &lt;a href="https://mail.openvswitch.org/pipermail/ovs-dev/2019-March/357586.html"&gt;runs&lt;/a&gt; separating OVN from OVS earlier this year. However, we chose not to go live with this change until after the OVS 2.12 branch was created. This way, we had a clear separation point for OVN development to happen in its own repo. The OVS 2.12 branch was created on July 22, and we performed the split the following week. Since the split, all OVN developers have targeted their new features to the new OVN repo. When OVS 2.12.0 releases, it will be the final release of OVS that also includes a companion OVN version. With Stage 2 complete, OVN has the freedom to change its release cadence; however, it also has the responsibility to maintain compatibility with multiple versions of OVS.&lt;/p&gt; &lt;p&gt;Stage 3 is currently &lt;a href="https://mail.openvswitch.org/pipermail/ovs-dev/2019-August/361799.html"&gt;under review&lt;/a&gt; and likely will be merged very soon. Including OVS as a Git subtree was a good stopgap for convenience, but it makes building and testing OVN a bit odd. Specifically, keeping a Git subtree up to date is not as straightforward as just keeping a separate repo on your system up to date as necessary. When running unit tests, due to the way that GNU autotest works, those tests would be run from within the OVS subtree and from OVN&amp;#8217;s tests/ directory. This could lead to annoyances when attempting to run specific OVN tests. With OVS separated out, that is no longer an issue, and it makes for much quicker testing of OVN.&lt;/p&gt; &lt;p&gt;An unstated (and obvious) Stage 4 is to remove the OVN code from the OVS repo. We have a &lt;a href="https://mail.openvswitch.org/pipermail/ovs-dev/2019-August/361704.html"&gt;patch series&lt;/a&gt; on the mailing list that does this, but it is still awaiting approval.&lt;/p&gt; &lt;h2&gt;The future&lt;/h2&gt; &lt;p&gt;The &amp;#8220;physical&amp;#8221; aspect of separating OVN from OVS is complete. However, we still face many challenges going forward. The biggest problem is coming up with policies for maintaining compatibility between OVN and OVS. I have started a &lt;a href="https://mail.openvswitch.org/pipermail/ovs-dev/2019-August/361435.html"&gt;mailing list discussion&lt;/a&gt; with a document that lays out a potential solution to this.&lt;/p&gt; &lt;p&gt;The question of how we plan to version OVN from here on is also an issue. Given how CMSes are hoping to be able to use newer OVN features more rapidly, it may make sense to release new versions of OVN more quickly than every six months. Previously, OVN was included as part of each OVS release. So, it was required to have matching versions of OVN and OVS. However, if we are releasing OVN more frequently than OVS, the version numbers will end up skewing, potentially resulting in confusion. Thus, we may change the versioning scheme of OVN altogether. I have started a &lt;a href="https://mail.openvswitch.org/pipermail/ovs-dev/2019-August/361439.html"&gt;mailing list discussion&lt;/a&gt; with a document that proposes a shorter release cycle and a new version numbering scheme.&lt;/p&gt; &lt;p&gt;Many smaller cleanup tasks also need to be done. For instance, the Documentation folder still contains many references to &amp;#8220;Open vSwitch&amp;#8221; instead of &amp;#8220;OVN.&amp;#8221; OVS had some supplementary material for convenience. For example, it contained files for building quick vagrant environments. OVN could benefit from similar amenities.&lt;/p&gt; &lt;p&gt;Other administrative tasks are being worked on. For instance, work is being done to create separate mailing lists for OVN so that the multitude of OVN discussions don&amp;#8217;t &amp;#8220;pollute&amp;#8221; the OVS lists. There are also efforts to create a separate ovn.org website, which is separate from the openvswitch.org website.&lt;/p&gt; &lt;p&gt;OVN continues to grow and be a leading solution for creating virtual networks. The separation of OVN from OVS marks a milestone nearly five years in the making. With OVN separated from OVS, this is a great jumping-off point for greater new features, and a fantastic time to join in the development of the project if you are interested.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F30%2Fthe-clean-break-of-open-virtual-network-from-open-vswitch%2F&amp;#38;linkname=The%20clean%20break%20of%20Open%20Virtual%20Network%20from%20Open%20vSwitch" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F30%2Fthe-clean-break-of-open-virtual-network-from-open-vswitch%2F&amp;#38;linkname=The%20clean%20break%20of%20Open%20Virtual%20Network%20from%20Open%20vSwitch" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F30%2Fthe-clean-break-of-open-virtual-network-from-open-vswitch%2F&amp;#38;linkname=The%20clean%20break%20of%20Open%20Virtual%20Network%20from%20Open%20vSwitch" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F30%2Fthe-clean-break-of-open-virtual-network-from-open-vswitch%2F&amp;#38;linkname=The%20clean%20break%20of%20Open%20Virtual%20Network%20from%20Open%20vSwitch" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F30%2Fthe-clean-break-of-open-virtual-network-from-open-vswitch%2F&amp;#38;linkname=The%20clean%20break%20of%20Open%20Virtual%20Network%20from%20Open%20vSwitch" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F30%2Fthe-clean-break-of-open-virtual-network-from-open-vswitch%2F&amp;#38;linkname=The%20clean%20break%20of%20Open%20Virtual%20Network%20from%20Open%20vSwitch" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F30%2Fthe-clean-break-of-open-virtual-network-from-open-vswitch%2F&amp;#38;linkname=The%20clean%20break%20of%20Open%20Virtual%20Network%20from%20Open%20vSwitch" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F30%2Fthe-clean-break-of-open-virtual-network-from-open-vswitch%2F&amp;#038;title=The%20clean%20break%20of%20Open%20Virtual%20Network%20from%20Open%20vSwitch" data-a2a-url="https://developers.redhat.com/blog/2019/08/30/the-clean-break-of-open-virtual-network-from-open-vswitch/" data-a2a-title="The clean break of Open Virtual Network from Open vSwitch"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/30/the-clean-break-of-open-virtual-network-from-open-vswitch/"&gt;The clean break of Open Virtual Network from Open vSwitch&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/EH196gny7bs" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;After loads of email and IRC discussions, the Open Virtual Network (OVN) source code has been separated from the Open vSwitch (OVS) source code, and the two projects now operate independently. In this article, we&amp;#8217;ll explain the reasons for separating OVN from OVS, the technical aspects of the split, and the upcoming challenges for the [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/30/the-clean-break-of-open-virtual-network-from-open-vswitch/"&gt;The clean break of Open Virtual Network from Open vSwitch&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/08/30/the-clean-break-of-open-virtual-network-from-open-vswitch/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">619907</post-id><dc:creator>Mark Michelson</dc:creator><dc:date>2019-08-30T07:01:21Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/08/30/the-clean-break-of-open-virtual-network-from-open-vswitch/</feedburner:origLink></entry><entry><title>Easily deploy Node.js applications to Red Hat OpenShift using Nodeshift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/YixFhEqvcfk/" /><category term="JavaScript" /><category term="Node.js" /><category term="Javascript" /><category term="Red Hat OpenShift Application Runtimes" /><author><name>Lucas Holmquist</name></author><id>https://developers.redhat.com/blog/?p=491407</id><updated>2019-08-30T07:00:18Z</updated><published>2019-08-30T07:00:18Z</published><content type="html">&lt;p&gt;I recently wrote articles on &lt;a href="https://developers.redhat.com/blog/2018/04/16/zero-express-openshift-3-commands/"&gt;deploying an Express.js application to OpenShift&lt;/a&gt;, &lt;a href="https://developers.redhat.com/blog/2018/05/15/debug-your-node-js-application-on-openshift-with-chrome-devtools/" target="_blank" rel="noopener noreferrer"&gt;how to debug your Node.js application on OpenShift with Chrome Dev Tools&lt;/a&gt; and a short series on &lt;a href="https://developers.redhat.com/blog/2018/10/04/modern-web-apps-openshift-part-1/"&gt;deploying modern web applications to OpenShift&lt;/a&gt;. All of those articles used a node module called &lt;a href="https://www.npmjs.com/package/nodeshift" target="_blank" rel="noopener noreferrer"&gt;Nodeshift&lt;/a&gt;, but I did a Jedi, hand-wavy thing when talking about it. This next series of articles takes a deeper look at what Nodeshift is and how it is used to ease the deployment of Node.js apps to OpenShift during development.&lt;span id="more-491407"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Basic app deployment on Red Hat OpenShift&lt;/h2&gt; &lt;p&gt;Although there are different approaches to how one deploys an application to &lt;a href="https://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt;, we will look at the workflow I like to use. This specific workflow uses Source-to-Image (S2I) images and source code that is located on my local machine. Before we take a look at Nodeshift, though, let&amp;#8217;s first take a quick look at some of the parts that this workflow uses. This flow can logically be broken into two parts: the &lt;strong&gt;Build Phase&lt;/strong&gt; and the &lt;strong&gt;Deploy Phase&lt;/strong&gt;.&lt;/p&gt; &lt;h3&gt;Part 1: The Build Phase&lt;/h3&gt; &lt;p&gt;The first phase of this workflow is all about building an image to eventually run in the Deploy phase. For our Node.js app, this is the phase where we install our dependencies and run any build scripts. If you are familiar with the phases of S2I, this phase is where the assemble script runs.&lt;/p&gt; &lt;p&gt;Using a BuildConfig, we can specify where our code comes from and what type of strategy to use when building the code. In our case, we use the DockerImage strategy since we are using a Node.js S2I image. The BuildConfig also tells OpenShift where to put our built code when it is done: In our case, an ImageStream.&lt;/p&gt; &lt;p&gt;Initially, we create an empty ImageStream, and then we populate that with the results of a successful build. In fact, if you were to look at OpenShift&amp;#8217;s internal image registry you would see that image there, similar to how you would see a container image on your local machine when running something like &lt;code&gt;docker images&lt;/code&gt;.&lt;/p&gt; &lt;h3&gt;Part 2: The Deploy Phase&lt;/h3&gt; &lt;p&gt;The second phase of this workflow is all about running our application and setting it up to be accessed. For our Node.js app, this is the phase where we might run something like &lt;code&gt;npm run start&lt;/code&gt; to launch our application. Again, if you are familiar with the phases of S2I, this phase is where the run script runs. By default, the Node.js S2I image that we use here this same command: &lt;code&gt;npm run start&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Using a DeploymentConfig, we can then trigger the S2I run phase. DeploymentConfigs are also used to describe our application (what ImageStream to use, any environment variables, setting up health checks, and so on). Once a Deployment is successful, a running Pod is created.&lt;/p&gt; &lt;p&gt;Next, we need a Service for the new Pod&amp;#8217;s internal load balancing, as well as a Route if we want to access our application outside of the OpenShift context.&lt;/p&gt; &lt;p&gt;While this workflow is not too complicated, there are many different pieces that work together. Those pieces are also YAML files, which at times can be difficult to read and interpret.&lt;/p&gt; &lt;h2&gt;Nodeshift basics&lt;/h2&gt; &lt;p&gt;Now that we have a little background on deploying applications to OpenShift, let&amp;#8217;s talk about Nodeshift and what it is. According to the Nodeshift module readme:&lt;/p&gt; &lt;blockquote&gt;&lt;p&gt;Nodeshift is an opinionated command-line application and programmable API that you can use to deploy Node.js projects to OpenShift.&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;The opinion that Nodeshift takes is the workflow that I&amp;#8217;ve just described, which allows the user to develop their application and deploy it to OpenShift, without having to think about all those different YAML files.&lt;/p&gt; &lt;p&gt;Nodeshift is also written in Node.js, so it can fit into a Node developer&amp;#8217;s current workflow or be added to an existing project using &lt;code&gt;npm install&lt;/code&gt;. The only real prerequisite is that you are logged into your OpenShift cluster using &lt;code&gt;oc login&lt;/code&gt;, but that isn&amp;#8217;t really a requirement. You can also specify an external config file, which we will see in a later article about more advanced usage.&lt;/p&gt; &lt;h3&gt;Running Nodeshift&lt;/h3&gt; &lt;p&gt;Using Nodeshift on the command line is easy. You can install it globally:&lt;/p&gt; &lt;pre&gt;$ npm install -g nodeshift $ nodeshift --help &lt;/pre&gt; &lt;p&gt;or by using &lt;code&gt;&lt;a href="https://www.npmjs.com/package/npx"&gt;npx&lt;/a&gt;&lt;/code&gt;, which is the preferred way:&lt;/p&gt; &lt;pre&gt;$ npx nodeshift --help &lt;/pre&gt; &lt;p&gt;As is the case with every other command-line tool, running Nodeshift with that &lt;code&gt;--help&lt;/code&gt; flag shows us the commands and flags that are available to use:&lt;/p&gt; &lt;pre&gt;Commands: nodeshift deploy default command - deploy [default] nodeshift build build command nodeshift resource resource command nodeshift apply-resource apply resource command nodeshift undeploy [removeAll] undeploy resources Options: --help Show help [boolean] --version Show version number [boolean] --projectLocation change the default location of the project [string] --configLocation change the default location of the config [string] --dockerImage the s2i image to use, defaults to nodeshift/centos7-s2i-nodejs [string] --imageTag The tag of the docker image to use for the deployed application. [string] [default: "latest"] --outputImageStream The name of the ImageStream to output to. Defaults to project name from package.json [string] --outputImageStreamTag The tag of the ImageStream to output to. [string] --quiet supress INFO and TRACE lines from output logs [boolean] --expose flag to create a default Route and expose the default service [boolean] [choices: true, false] [default: false] --namespace.displayName flag to specify the project namespace display name to build/deploy into. Overwrites any namespace settings in your OpenShift or Kubernetes configuration files [string] --namespace.create flag to create the namespace if it does not exist. Only applicable for the build and deploy command. Must be used with namespace.name [boolean] --namespace.remove flag to remove the user created namespace. Only applicable for the undeploy command. Must be used with namespace.name [boolean] --namespace.name flag to specify the project namespace name to build/deploy into. Overwrites any namespace settings in your OpenShift or Kubernetes configuration files [string] --deploy.port flag to update the default ports on the resource files. Defaults to 8080 [default: 8080] --build.recreate flag to recreate a buildConfig or Imagestream [choices: "buildConfig", "imageStream", false, true] [default: false] --build.forcePull flag to make your BuildConfig always pull a new image from dockerhub or not [boolean] [choices: true, false] [default: false] --build.incremental flag to perform incremental builds, which means it reuses artifacts from previously-built images [boolean] [choices: true, false] [default: false] --metadata.out determines what should be done with the response metadata from OpenShift [string] [choices: "stdout", "ignore", ""] [default: "ignore"] --cmd [default: "deploy"] &lt;/pre&gt; &lt;p&gt;Let&amp;#8217;s take a look at the most common usage.&lt;/p&gt; &lt;h3&gt;Deploying Nodeshift&lt;/h3&gt; &lt;p&gt;Let&amp;#8217;s say we have a simple express.js application that we have been working on locally, which we&amp;#8217;ve bound to port 8080, and we want to deploy this application to OpenShift. We just run:&lt;/p&gt; &lt;pre&gt; $ npx nodeshift &lt;/pre&gt; &lt;p&gt;Once that command runs, Nodeshift goes to work. Here are the steps that the command goes through using the default deploy command:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Nodeshift packages your source code into a &lt;code&gt;tar&lt;/code&gt; file to upload to the OpenShift cluster.&lt;/li&gt; &lt;li&gt;Nodeshift looks at the &lt;code&gt;files&lt;/code&gt; property of your application&amp;#8217;s &lt;code&gt;package.json&lt;/code&gt; (by default, it ignores any &lt;code&gt;node_modules&lt;/code&gt;, &lt;code&gt;tmp&lt;/code&gt;, or &lt;code&gt;.git&lt;/code&gt; folders): &lt;ul&gt; &lt;li&gt;If a &lt;code&gt;files&lt;/code&gt; property exists, Nodeshift uses &lt;code&gt;tar&lt;/code&gt; to archive those files.&lt;/li&gt; &lt;li&gt;If there is no &lt;code&gt;files&lt;/code&gt; property, Nodeshift archives the current directory.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Once the archive is created, a new BuildConfig and ImageStream are created on the remote cluster.&lt;/li&gt; &lt;li&gt;The archive is uploaded.&lt;/li&gt; &lt;li&gt;An OpenShift Build starts running on OpenShift.&lt;/li&gt; &lt;li&gt;Nodeshift watches that build process and outputs the remote log to the console.&lt;/li&gt; &lt;li&gt;Once the build is completed, Nodeshift then creates a DeploymentConfig, which triggers an actual deployment, and also a Kubernetes Service. (A Route is not created by default, but if one is desired, you can use the &lt;code&gt;--expose&lt;/code&gt; flag.)&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;If you make code changes and run the &lt;code&gt;nodeshift&lt;/code&gt; command again, the process happens again, but this time it uses the existing config files that were created on the first run.&lt;/p&gt; &lt;h2&gt;Until next time&lt;/h2&gt; &lt;p&gt;In this article, we looked at the anatomy of a Red Hat OpenShift deployment and how Nodeshift can help abstract the complexity with a simple example. Stay tuned for future articles, in which we will look at other commands that Nodeshift provides. In those articles, we will explore several commonly used options and show how to use Nodeshift in our code instead of just using it at the command line.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F30%2Feasily-deploy-node-js-applications-to-red-hat-openshift-using-nodeshift%2F&amp;#38;linkname=Easily%20deploy%20Node.js%20applications%20to%20Red%20Hat%20OpenShift%20using%20Nodeshift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F30%2Feasily-deploy-node-js-applications-to-red-hat-openshift-using-nodeshift%2F&amp;#38;linkname=Easily%20deploy%20Node.js%20applications%20to%20Red%20Hat%20OpenShift%20using%20Nodeshift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F30%2Feasily-deploy-node-js-applications-to-red-hat-openshift-using-nodeshift%2F&amp;#38;linkname=Easily%20deploy%20Node.js%20applications%20to%20Red%20Hat%20OpenShift%20using%20Nodeshift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F30%2Feasily-deploy-node-js-applications-to-red-hat-openshift-using-nodeshift%2F&amp;#38;linkname=Easily%20deploy%20Node.js%20applications%20to%20Red%20Hat%20OpenShift%20using%20Nodeshift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F30%2Feasily-deploy-node-js-applications-to-red-hat-openshift-using-nodeshift%2F&amp;#38;linkname=Easily%20deploy%20Node.js%20applications%20to%20Red%20Hat%20OpenShift%20using%20Nodeshift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F30%2Feasily-deploy-node-js-applications-to-red-hat-openshift-using-nodeshift%2F&amp;#38;linkname=Easily%20deploy%20Node.js%20applications%20to%20Red%20Hat%20OpenShift%20using%20Nodeshift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F30%2Feasily-deploy-node-js-applications-to-red-hat-openshift-using-nodeshift%2F&amp;#38;linkname=Easily%20deploy%20Node.js%20applications%20to%20Red%20Hat%20OpenShift%20using%20Nodeshift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F30%2Feasily-deploy-node-js-applications-to-red-hat-openshift-using-nodeshift%2F&amp;#038;title=Easily%20deploy%20Node.js%20applications%20to%20Red%20Hat%20OpenShift%20using%20Nodeshift" data-a2a-url="https://developers.redhat.com/blog/2019/08/30/easily-deploy-node-js-applications-to-red-hat-openshift-using-nodeshift/" data-a2a-title="Easily deploy Node.js applications to Red Hat OpenShift using Nodeshift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/30/easily-deploy-node-js-applications-to-red-hat-openshift-using-nodeshift/"&gt;Easily deploy Node.js applications to Red Hat OpenShift using Nodeshift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/YixFhEqvcfk" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;I recently wrote articles on deploying an Express.js application to OpenShift, how to debug your Node.js application on OpenShift with Chrome Dev Tools and a short series on deploying modern web applications to OpenShift. All of those articles used a node module called Nodeshift, but I did a Jedi, hand-wavy thing when talking about it. [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/30/easily-deploy-node-js-applications-to-red-hat-openshift-using-nodeshift/"&gt;Easily deploy Node.js applications to Red Hat OpenShift using Nodeshift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/08/30/easily-deploy-node-js-applications-to-red-hat-openshift-using-nodeshift/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">491407</post-id><dc:creator>Lucas Holmquist</dc:creator><dc:date>2019-08-30T07:00:18Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/08/30/easily-deploy-node-js-applications-to-red-hat-openshift-using-nodeshift/</feedburner:origLink></entry><entry><title>Extending support for Spring Boot 2.1.6 and Spring Reactive</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/6bNrZtVxqkQ/" /><category term="Announcement" /><category term="Java" /><category term="Modern App Dev" /><category term="Red Hat OpenShift Application Runtimes" /><category term="Spring Boot" /><category term="Eclipse Vert.x" /><category term="Red Hat OpenShift" /><author><name>James Falkner</name></author><id>https://developers.redhat.com/blog/?p=619937</id><updated>2019-08-30T07:00:05Z</updated><published>2019-08-30T07:00:05Z</published><content type="html">&lt;div style="float: right;"&gt;&lt;/div&gt; &lt;p&gt;&lt;a href="https://www.redhat.com/en/products/application-runtimes" target="_blank" rel="noopener noreferrer"&gt;Red Hat Application Runtimes&lt;/a&gt; recently added extended support for the &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_openshift_application_runtimes/1/html/spring_boot_2.1.x_runtime_guide/index" target="_blank" rel="noopener noreferrer"&gt;Spring Boot 2.1.6 runtime&lt;/a&gt; for Red Hat customers building Spring apps. Red Hat Application Runtimes provides application developers with a variety of application runtimes running on the &lt;a href="https://developers.redhat.com/openshift/"&gt;Red Hat OpenShift Container Platform&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Introduction to Spring Boot&lt;/h2&gt; &lt;p&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_openshift_application_runtimes/1/html/spring_boot_tomcat_runtime_guide/" target="_blank" rel="noopener noreferrer"&gt;Spring Boot&lt;/a&gt; lets you create opinionated Spring-based standalone applications. The Spring Boot runtime also integrates with the OpenShift platform, allowing your services to externalize their configuration, implement health checks, provide resiliency and failover, and much more.&lt;/p&gt; &lt;p&gt;&lt;span id="more-619937"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;What&amp;#8217;s new?&lt;/h2&gt; &lt;p&gt;This release introduces extended support for Spring Boot 2.1.6, and two &lt;a href="https://access.redhat.com/support/offerings/techpreview/" target="_blank" rel="noopener noreferrer"&gt;technology preview&lt;/a&gt; features:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://github.com/dekorateio/dekorate"&gt;Dekorate&lt;/a&gt;, a Java annotation processor for Kubernetes, formerly developed under the name AP4K. Dekorate is a tool for automatically updating Kubernetes and OpenShift configuration files without the need to manually edit individual XML, YAML, or JSON templates. When declared as a dependency in your Maven project, Dekorate automatically picks up annotations and changes them to properties that you set in your application, automatically updating the corresponding deployment configuration and resource definition templates.&lt;/li&gt; &lt;li&gt;Vert.X Reactive Components, a set of supported starters for designing reactive applications. The productized starters are based on the community releases &lt;a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux" target="_blank" rel="noopener noreferrer"&gt;Spring WebFlux&lt;/a&gt; and &lt;a href="https://projectreactor.io/docs/netty/release/reference/index.html" target="_blank" rel="noopener noreferrer"&gt;Reactor Netty&lt;/a&gt;, with a set of additional &lt;a href="https://vertx.io" target="_blank" rel="noopener noreferrer"&gt;Eclipse Vert.x&lt;/a&gt; extensions for the Spring Boot runtimes that extend the reactive capabilities of Spring WebFlux to include an asynchronous I/O API that handles network communication between individual application components. This addition lets you create a fully Red Hat-supported reactive stack that you can use to build your Spring Boot applications.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Consult the &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_openshift_application_runtimes/1/html/red_hat_openshift_application_runtimes_release_notes/" target="_blank" rel="noopener noreferrer"&gt;release notes&lt;/a&gt; for a complete list of what&amp;#8217;s new.&lt;/p&gt; &lt;h2&gt;Get started&lt;/h2&gt; &lt;div id="attachment_619967" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="http://developers.redhat.com/launch"&gt;&lt;img aria-describedby="caption-attachment-619967" class="wp-image-619967 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/08/Screen-Shot-2019-08-14-at-3.50.38-PM-1024x495.png" alt="" width="640" height="309" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/08/Screen-Shot-2019-08-14-at-3.50.38-PM-1024x495.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/Screen-Shot-2019-08-14-at-3.50.38-PM-300x145.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/Screen-Shot-2019-08-14-at-3.50.38-PM-768x371.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/Screen-Shot-2019-08-14-at-3.50.38-PM.png 1187w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-619967" class="wp-caption-text"&gt;Launcher in action.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Using &lt;a href="https://developers.redhat.com/launch"&gt;developers.redhat.com/launch&lt;/a&gt;, you can immediately create and deploy a Spring Boot application directly to &lt;a href="http://openshift.com/" target="_blank" rel="noopener noreferrer"&gt;OpenShift Online&lt;/a&gt; or to your own local OpenShift cluster. This tool provides a hassle-free way of creating applications from scratch, starting with example applications or importing your own, as well as an easy way to build and deploy those applications to Red Hat OpenShift.&lt;/p&gt; &lt;p&gt;Examples are available to showcase how developers can use Spring Boot to build the fundamental building blocks of cloud-native applications and services, such as creating secured RESTful APIs, implementing health checks, externalizing configuration, securing resources, or integrating with the OpenShift Service Mesh based on the &lt;a href="https://developers.redhat.com/topics/service-mesh/"&gt;Istio&lt;/a&gt; project.&lt;/p&gt; &lt;h2&gt;Using Dekorate&lt;/h2&gt; &lt;p&gt;To start using &lt;a href="http://dekorate.io/" target="_blank" rel="noopener noreferrer"&gt;Dekorate&lt;/a&gt; you just need to add one dependency to your &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;io.dekorate&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;kubernetes-annotations&amp;#60;/artifactId&amp;#62; &amp;#60;version&amp;#62;${project.version}&amp;#60;/version&amp;#62; &amp;#60;/dependency&amp;#62; &lt;/pre&gt; &lt;p&gt;Then, add one of the provided annotations to your project. For example:&lt;/p&gt; &lt;pre&gt;import io.dekorate.kubernetes.annotaion.KubernetesApplication; @KubernetesApplication public class Main { public static void main(String[] args) { //Your application code goes here. } } &lt;/pre&gt; &lt;p&gt;When this project gets compiled, the annotation will trigger the generation of a &lt;em&gt;Deployment&lt;/em&gt; in both JSON and YAML that will end up under the &lt;code&gt;target/classes/META-INF/dekorate&lt;/code&gt; directory. This Deployment can then be &lt;em&gt;applied&lt;/em&gt; to your Kubernetes cluster with &lt;code&gt;kubectl apply -f target/classes/META-INF/dekorate/kubernetes.yml&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The annotation comes with a lot of optional parameters, which can be used to customize the Deployment and trigger the generation of additional resources, like &lt;em&gt;Service&lt;/em&gt; and &lt;em&gt;Ingress&lt;/em&gt;. Other features that you can add to your application for various services include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="http://developers.redhat.com/openshift/" rel="noopener noreferrer"&gt;OpenShift&lt;/a&gt; to create image streams and build configurations, plus bind to service catalog services.&lt;/li&gt; &lt;li&gt;&lt;a href="http://developers.redhat.com/topics/kubernetes/" rel="noopener noreferrer"&gt;Kubernetes&lt;/a&gt; to add labels, annotations, environment variables, volume mounts, ports/services, JVM options, init containers, and inject sidecars.&lt;/li&gt; &lt;li&gt;&lt;a href="https://prometheus.io" target="_blank" rel="noopener noreferrer"&gt;Prometheus&lt;/a&gt; to configure monitoring.&lt;/li&gt; &lt;li&gt;&lt;a href="https://www.jaegertracing.io/" target="_blank" rel="noopener noreferrer"&gt;Jaeger&lt;/a&gt; to connect your app to distributed tracing.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For an excellent overview of more Dekorate functionality, check out Gytis &amp;#8216; blog &lt;a href="https://developers.redhat.com/blog/2019/08/15/how-to-use-dekorate-to-create-kubernetes-manifests/"&gt;How to use Dekorate to create Kubernetes manifests&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Building reactive applications with Spring Boot and Eclipse Vert.x&lt;/h2&gt; &lt;p&gt;The Spring reactive stack is built on &lt;a href="https://projectreactor.io/" target="_blank" rel="noopener noreferrer"&gt;Project Reactor&lt;/a&gt;, a reactive library that implements backpressure and is compliant with the Reactive Streams specification. It provides the &lt;a href="https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html" target="_blank" rel="noopener noreferrer"&gt;Flux&lt;/a&gt; and &lt;a href="https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Mono.html" target="_blank" rel="noopener noreferrer"&gt;Mono&lt;/a&gt; functional API types that enable asynchronous event stream processing. On top of Project Reactor, Spring provides &lt;a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux" target="_blank" rel="noopener noreferrer"&gt;WebFlux&lt;/a&gt;, an asynchronous event-driven web application framework. Reactive applications built with this stack enable non-blocking, asynchronous, event-driven apps that are highly scalable and resilient. They also ease integration with other related reactive libraries like &lt;a href="https://activemq.apache.org/components/artemis/" target="_blank" rel="noopener noreferrer"&gt;Apache ActiveMQ Artemis&lt;/a&gt;, &lt;a href="https://kafka.apache.org/" target="_blank" rel="noopener noreferrer"&gt;Apache Kafka&lt;/a&gt;, or &lt;a href="https://infinispan.org/" target="_blank" rel="noopener noreferrer"&gt;Infinispan&lt;/a&gt; (all fully supported via &lt;a href="https://www.redhat.com/en/products/middleware" target="_blank" rel="noopener noreferrer"&gt;Red Hat Middleware&lt;/a&gt;).&lt;/p&gt; &lt;p&gt;This Spring reactive offering by Red Hat brings the benefits of Reactor and WebFlux to OpenShift and standalone Red Hat Enterprise Linux, and it introduces a set of &lt;a href="https://vertx.io" target="_blank" rel="noopener noreferrer"&gt;Eclipse Vert.x&lt;/a&gt; extensions for the WebFlux framework. This addition allows you to retain the level of abstraction and rapid prototyping capabilities of Spring Boot, and provides an asynchronous I/O API that handles the network communications between the services in your application in a fully reactive manner.&lt;/p&gt; &lt;p&gt;To create a basic reactive HTTP web service, add the following dependency to your &lt;code&gt;pom.xml&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&amp;#60;dependency&amp;#62; &amp;#60;groupId&amp;#62;dev.snowdrop&amp;#60;/groupId&amp;#62; &amp;#60;artifactId&amp;#62;vertx-spring-boot-starter-http&amp;#60;/artifactId&amp;#62; &amp;#60;/dependency&amp;#62; &lt;/pre&gt; &lt;p&gt;This addition brings in the required dependencies to create reactive applications. Next, create a reactive sample app:&lt;/p&gt; &lt;pre&gt;package dev.snowdrop.vertx.sample.http; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.context.annotation.Bean; import org.springframework.web.reactive.function.server.RouterFunction; import org.springframework.web.reactive.function.server.ServerRequest; import org.springframework.web.reactive.function.server.ServerResponse; import reactor.core.publisher.Mono; import static org.springframework.web.reactive.function.BodyInserters.fromObject; import static org.springframework.web.reactive.function.server.RouterFunctions.route; import static org.springframework.web.reactive.function.server.ServerResponse.ok; @SpringBootApplication public class HttpSampleApplication { public static void main(String[] args) { SpringApplication.run(HttpSampleApplication.class, args); } @Bean public RouterFunction&amp;#60;ServerResponse&amp;#62; helloRouter() { return route() .GET("/hello", this::helloHandler) .build(); } private Mono&amp;#60;ServerResponse&amp;#62; helloHandler(ServerRequest request) { String name = request .queryParam("name") .orElse("World"); String message = String.format("Hello, %s!", name); return ok() .body(fromObject(message)); } } &lt;/pre&gt; &lt;p&gt;Finally, build and test:&lt;/p&gt; &lt;pre&gt;$ mvn clean package $ java -jar target/vertx-spring-boot-sample-http.jar $ curl localhost:8080/hello Hello, World! &lt;/pre&gt; &lt;p&gt;There are several other example applications for authentication via OAuth2, reactive email clients, server-sent events, and more in the &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_openshift_application_runtimes/1/html/spring_boot_2.1.x_runtime_guide/developing-reactive-applications-using-spring-boot-vertx_spring-boot" target="_blank" rel="noopener noreferrer"&gt;Spring Boot Runtime Guide&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For more detail on creating reactive web services with Spring Boot, see the &lt;a href="https://spring.io/guides/gs/reactive-rest-service/" target="_blank" rel="noopener noreferrer"&gt;reactive REST service development guide&lt;/a&gt; in the Spring community documentation.&lt;/p&gt; &lt;h2&gt;Documentation&lt;/h2&gt; &lt;p&gt;The Runtimes team has been continuously adding and improving on the official documentation for building apps with Spring Boot. This effort includes updates in the &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_openshift_application_runtimes/1/html/rhoar_spring_boot_2.1.x_release_notes/" target="_blank" rel="noopener noreferrer"&gt;Release Notes&lt;/a&gt;, &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_openshift_application_runtimes/1/html/getting_started_with_red_hat_openshift_application_runtimes/" target="_blank" rel="noopener noreferrer"&gt;Getting Started Guide,&lt;/a&gt; and the &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_openshift_application_runtimes/1/html/spring_boot_2.1.x_runtime_guide/" target="_blank" rel="noopener noreferrer"&gt;Spring Boot Runtime Guide&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Developer interactive learning scenarios&lt;/h2&gt; &lt;p&gt;These &lt;a href="https://learn.openshift.com/middleware/rhoar-getting-started-thorntail/" target="_blank" rel="noopener noreferrer"&gt;self-paced scenarios&lt;/a&gt; provide you with a preconfigured Red Hat OpenShift instance, accessible from your browser without any downloads or configuration. Use it to experiment with Spring Boot or learn about other technologies within Red Hat Application Runtimes and see how it helps solve real-world problems:&lt;/p&gt; &lt;div id="attachment_619977" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://learn.openshift.com/middleware/courses/middleware-spring-boot/"&gt;&lt;img aria-describedby="caption-attachment-619977" class="wp-image-619977 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2019/08/Screen-Shot-2019-08-14-at-3.54.45-PM-1024x631.png" alt="" width="640" height="394" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/08/Screen-Shot-2019-08-14-at-3.54.45-PM-1024x631.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/Screen-Shot-2019-08-14-at-3.54.45-PM-300x185.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/Screen-Shot-2019-08-14-at-3.54.45-PM-768x474.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/Screen-Shot-2019-08-14-at-3.54.45-PM.png 1093w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-619977" class="wp-caption-text"&gt;Available self-paced learning guides.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Getting support for Spring Boot&lt;/h2&gt; &lt;p&gt;Support for Spring Boot is available to Red Hat customers through a subscription to &lt;a href="https://developers.redhat.com/products/rhoar/overview/"&gt;Red Hat OpenShift Application Runtimes&lt;/a&gt;. Contact your local Red Hat representative or &lt;a href="https://www.redhat.com/en/about/contact/sales" target="_blank" rel="noopener noreferrer"&gt;Red Hat Sales&lt;/a&gt; for details on how you can enjoy the world-class support offered by Red Hat and its worldwide partner network. More information on what&amp;#8217;s included can be found in &lt;a href="https://developers.redhat.com/blog/2019/02/28/spring-boot-2-x-red-hat-openshift-application-runtimes-rhoar/"&gt;Extending support to Spring Boot 2.x for Red Hat OpenShift Application Runtimes&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Moving forward, customers can expect support for Spring Boot and other runtimes according to the &lt;a href="https://access.redhat.com/support/policy/updates/jboss_notes/" target="_blank" rel="noopener noreferrer"&gt;Red Hat Product Update and Support Lifecycle&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;What’s next for Spring Boot support?&lt;/h3&gt; &lt;p&gt;The Runtimes Spring Boot team is continually taking &lt;a href="https://issues.jboss.org/projects/SB" target="_blank" rel="noopener noreferrer"&gt;feedback&lt;/a&gt; from customers and the wider community of open source developers, as well as tracking the &lt;a href="https://github.com/spring-projects/spring-boot/releases" target="_blank" rel="noopener noreferrer"&gt;upstream Spring Boot releases&lt;/a&gt;. The team is working to make updates to support based on that feedback, as well as considering support for additional modules from Red Hat and the large Java and Spring community.&lt;/p&gt; &lt;h3&gt;The people behind Red Hat&amp;#8217;s Spring Boot support&lt;/h3&gt; &lt;p&gt;This offering was produced by Red Hat’s Application Runtimes product and engineering team along with the &lt;a href="https://snowdrop.me" target="_blank" rel="noopener noreferrer"&gt;Snowdrop&lt;/a&gt; upstream community, and involved many hours of development, testing, documentation writing, testing some more, and working with the wider Red Hat community of customers, partners, and Spring developers to incorporate contributions, both big and small. We are glad you have chosen to use it and hope that it meets or exceeds your expectations!&lt;/p&gt; &lt;h3&gt;Spring Boot resources&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/products/rhoar/overview/"&gt;Red Hat OpenShift Application Runtimes Developer home page&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_openshift_application_runtimes/1/html/spring_boot_runtime_guide/" target="_blank" rel="noopener noreferrer"&gt;Spring Boot Runtime Guide&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://issues.jboss.org/projects/SB" target="_blank" rel="noopener noreferrer"&gt;Spring Boot Issue Tracker&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://learn.openshift.com/middleware/courses/middleware-spring-boot/" target="_blank" rel="noopener noreferrer"&gt;Interactive Learning Scenarios for Spring Boot on OpenShift&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://snowdrop.me/" target="_blank" rel="noopener noreferrer"&gt;Snowdrop upstream project&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F30%2Fextending-support-for-spring-boot-2-1-6-and-spring-reactive%2F&amp;#38;linkname=Extending%20support%20for%20Spring%20Boot%202.1.6%20and%20Spring%20Reactive" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F30%2Fextending-support-for-spring-boot-2-1-6-and-spring-reactive%2F&amp;#38;linkname=Extending%20support%20for%20Spring%20Boot%202.1.6%20and%20Spring%20Reactive" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F30%2Fextending-support-for-spring-boot-2-1-6-and-spring-reactive%2F&amp;#38;linkname=Extending%20support%20for%20Spring%20Boot%202.1.6%20and%20Spring%20Reactive" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F30%2Fextending-support-for-spring-boot-2-1-6-and-spring-reactive%2F&amp;#38;linkname=Extending%20support%20for%20Spring%20Boot%202.1.6%20and%20Spring%20Reactive" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F30%2Fextending-support-for-spring-boot-2-1-6-and-spring-reactive%2F&amp;#38;linkname=Extending%20support%20for%20Spring%20Boot%202.1.6%20and%20Spring%20Reactive" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F30%2Fextending-support-for-spring-boot-2-1-6-and-spring-reactive%2F&amp;#38;linkname=Extending%20support%20for%20Spring%20Boot%202.1.6%20and%20Spring%20Reactive" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F30%2Fextending-support-for-spring-boot-2-1-6-and-spring-reactive%2F&amp;#38;linkname=Extending%20support%20for%20Spring%20Boot%202.1.6%20and%20Spring%20Reactive" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F30%2Fextending-support-for-spring-boot-2-1-6-and-spring-reactive%2F&amp;#038;title=Extending%20support%20for%20Spring%20Boot%202.1.6%20and%20Spring%20Reactive" data-a2a-url="https://developers.redhat.com/blog/2019/08/30/extending-support-for-spring-boot-2-1-6-and-spring-reactive/" data-a2a-title="Extending support for Spring Boot 2.1.6 and Spring Reactive"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/30/extending-support-for-spring-boot-2-1-6-and-spring-reactive/"&gt;Extending support for Spring Boot 2.1.6 and Spring Reactive&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/6bNrZtVxqkQ" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Red Hat Application Runtimes recently added extended support for the Spring Boot 2.1.6 runtime for Red Hat customers building Spring apps. Red Hat Application Runtimes provides application developers with a variety of application runtimes running on the Red Hat OpenShift Container Platform. Introduction to Spring Boot Spring Boot lets you create opinionated Spring-based standalone applications. The [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/30/extending-support-for-spring-boot-2-1-6-and-spring-reactive/"&gt;Extending support for Spring Boot 2.1.6 and Spring Reactive&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/08/30/extending-support-for-spring-boot-2-1-6-and-spring-reactive/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">619937</post-id><dc:creator>James Falkner</dc:creator><dc:date>2019-08-30T07:00:05Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/08/30/extending-support-for-spring-boot-2-1-6-and-spring-reactive/</feedburner:origLink></entry><entry><title>Create your first application with Kogito</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/Cn5quei_fR8/" /><category term="Java" /><category term="JBoss BRMS" /><category term="Spring Boot" /><category term="Kogito" /><author><name>Amit Nijhawan</name></author><id>https://developers.redhat.com/blog/?p=619247</id><updated>2019-08-29T07:00:51Z</updated><published>2019-08-29T07:00:51Z</published><content type="html">&lt;p&gt;&lt;a href="https://kogito.kie.org/"&gt;Kogito&lt;/a&gt; is cloud-native development, deployment, and execution platform for building intelligent applications, backed by battle-tested capabilities. It originates from well-known open source projects, such as Drools and jBPM. Key characteristics of Kogito include:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Cloud-first —&lt;/strong&gt; Cloud deployment is the first and foremost target runtime environment.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Domain-specific —&lt;/strong&gt; No more leaking abstraction of the technology behind the service to your client applications.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Empowering developers&lt;/strong&gt; &lt;strong&gt;—&lt;/strong&gt; Kogito offers a powerful developer experience based on battle-tested components.&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Create your first application&lt;/h2&gt; &lt;p&gt;This article covers:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Configuring your IDE with modeler plugin.&lt;/li&gt; &lt;li&gt;Generating a new project.&lt;/li&gt; &lt;li&gt;Building and running the project.&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;&lt;strong&gt;Install Eclipse with modeling plugins&lt;/strong&gt;&lt;/h3&gt; &lt;p&gt;To be able to make use of visual modeling of your processes download Eclipse IDE and install from Marketplace&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Eclipse BPMN2 Modeler plugin (with jBPM Runtime Extension)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Currently, the Eclipse IDE is the only IDE that has complete support for both process and rule modeling but the team is working on bringing in web-based embeddable BPMN2, DMN and Scenario editors to VSCode and Eclipse Che.&lt;/p&gt; &lt;p&gt;To build your own service that is powered by Kogito, the best way is to start by generating a project using the Maven Archetype.&lt;/p&gt; &lt;h2&gt;SpringBoot&lt;/h2&gt; &lt;h3&gt;Generate project&lt;/h3&gt; &lt;pre&gt;&lt;code&gt;mvn archetype:generate -DarchetypeGroupId=org.kie.kogito -DarchetypeArtifactId=kogito-springboot-archetype -DarchetypeVersion=0.1.3 -DgroupId=com.company -DartifactId=sample-kogito&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Tools are ncluded in the project out-of-the-box that allow testing the generated application. Simply build the project with Maven and start the application.&lt;/p&gt; &lt;p&gt;As before, you have the option to start it using SpringBoot Maven plugin or as a normal Java service. We will use the SpringBoot Maven plugin in this example.&lt;/p&gt; &lt;h3&gt;&lt;strong&gt;Start your application&lt;/strong&gt;&lt;/h3&gt; &lt;p&gt;Open your command line and go into the newly created sample-kogito folder.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;mvn clean package spring-boot:run&lt;/code&gt;&lt;/pre&gt; &lt;h3&gt;Implement your application logic&lt;/h3&gt; &lt;p&gt;You&amp;#8217;re now ready to implement your business logic that can be composed of business processes, rules, decision tables, Java services, and more.&lt;/p&gt; &lt;h3&gt;Build and run in JVM mode&lt;/h3&gt; &lt;pre&gt;mvn clean package java -jar target/jbpm-springboot-example-{version}.jaror on Windows java -jar target\jbpm-springboot-example-{version}.jar&lt;/pre&gt; &lt;h4&gt;Learn more&lt;/h4&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/2019/07/23/devnation-live-introducing-kogito/"&gt;DevNation Live: Introducing Kogito&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F29%2Fcreate-your-first-application-with-kogito%2F&amp;#38;linkname=Create%20your%20first%20application%20with%20Kogito" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F29%2Fcreate-your-first-application-with-kogito%2F&amp;#38;linkname=Create%20your%20first%20application%20with%20Kogito" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F29%2Fcreate-your-first-application-with-kogito%2F&amp;#38;linkname=Create%20your%20first%20application%20with%20Kogito" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F29%2Fcreate-your-first-application-with-kogito%2F&amp;#38;linkname=Create%20your%20first%20application%20with%20Kogito" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F29%2Fcreate-your-first-application-with-kogito%2F&amp;#38;linkname=Create%20your%20first%20application%20with%20Kogito" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F29%2Fcreate-your-first-application-with-kogito%2F&amp;#38;linkname=Create%20your%20first%20application%20with%20Kogito" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F29%2Fcreate-your-first-application-with-kogito%2F&amp;#38;linkname=Create%20your%20first%20application%20with%20Kogito" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F29%2Fcreate-your-first-application-with-kogito%2F&amp;#038;title=Create%20your%20first%20application%20with%20Kogito" data-a2a-url="https://developers.redhat.com/blog/2019/08/29/create-your-first-application-with-kogito/" data-a2a-title="Create your first application with Kogito"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/29/create-your-first-application-with-kogito/"&gt;Create your first application with Kogito&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/Cn5quei_fR8" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Kogito is cloud-native development, deployment, and execution platform for building intelligent applications, backed by battle-tested capabilities. It originates from well-known open source projects, such as Drools and jBPM. Key characteristics of Kogito include: Cloud-first — Cloud deployment is the first and foremost target runtime environment. Domain-specific — No more leaking abstraction of the technology behind [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/29/create-your-first-application-with-kogito/"&gt;Create your first application with Kogito&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/08/29/create-your-first-application-with-kogito/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">619247</post-id><dc:creator>Amit Nijhawan</dc:creator><dc:date>2019-08-29T07:00:51Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/08/29/create-your-first-application-with-kogito/</feedburner:origLink></entry><entry><title>Kogito for Quarkus intelligent applications</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/nJdxhoEDFQY/" /><category term="Java" /><category term="Quarkus" /><category term="Red Hat Decision Manager" /><category term="business automation" /><category term="jBPM" /><category term="Kogito" /><category term="RHPAM" /><author><name>Karina Varela</name></author><id>https://developers.redhat.com/blog/?p=620707</id><updated>2019-08-29T06:59:18Z</updated><published>2019-08-29T06:59:18Z</published><content type="html">&lt;p&gt;The &lt;a href="http://quarkus.io/"&gt;Quarkus&lt;/a&gt; project is becoming quite popular among developers. Quarkus provides a fast-dev environment, and it has already a set of libraries, standards, and frameworks that are made available through &lt;a href="https://quarkus.io/extensions/"&gt;extensions&lt;/a&gt; like RestEasy, Panache, SmallRye, Keycloak, and Kafka. Additionally, you can start using &lt;a href="https://developers.redhat.com/blog/2019/07/23/devnation-live-introducing-kogito/"&gt;Kogito&lt;/a&gt; today to create intelligent Quarkus applications.&lt;span id="more-620707"&gt;&lt;/span&gt;&lt;/p&gt; &lt;div class="wp-block-image"&gt; &lt;figure class="alignleft size-large is-resized"&gt; &lt;p&gt;&lt;div id="attachment_435" style="width: 216px" class="wp-caption alignnone"&gt;&lt;img aria-describedby="caption-attachment-435" class="wp-image-435" src="https://karinavarelame.files.wordpress.com/2019/08/kogito_icon_rgb_color_default_256px-1.png?w=206&amp;#38;h=206" alt="" width="206" height="206" data-attachment-id="435" data-permalink="https://karinavarela.me/kogito_icon_rgb_color_default_256px-1/" data-orig-file="https://karinavarelame.files.wordpress.com/2019/08/kogito_icon_rgb_color_default_256px-1.png" data-orig-size="256,256" data-comments-opened="0" data-image-meta="{&amp;#34;aperture&amp;#34;:&amp;#34;0&amp;#34;,&amp;#34;credit&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;camera&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;caption&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;created_timestamp&amp;#34;:&amp;#34;0&amp;#34;,&amp;#34;copyright&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;focal_length&amp;#34;:&amp;#34;0&amp;#34;,&amp;#34;iso&amp;#34;:&amp;#34;0&amp;#34;,&amp;#34;shutter_speed&amp;#34;:&amp;#34;0&amp;#34;,&amp;#34;title&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;orientation&amp;#34;:&amp;#34;0&amp;#34;}" data-image-title="kogito_icon_rgb_color_default_256px-1" data-image-description="" data-medium-file="https://karinavarelame.files.wordpress.com/2019/08/kogito_icon_rgb_color_default_256px-1.png?w=256" data-large-file="https://karinavarelame.files.wordpress.com/2019/08/kogito_icon_rgb_color_default_256px-1.png?w=256" /&gt;&lt;p id="caption-attachment-435" class="wp-caption-text"&gt;Kogito models its logo after Odin, the Norse god who traded his own eye in exchange for wisdom.&lt;/p&gt;&lt;/div&gt;&lt;/figure&gt; &lt;/div&gt; &lt;p&gt;Business applications are all about knowledge automation. The &lt;a href="https://jbpm.org/"&gt;jBPM&lt;/a&gt; and &lt;a href="https://www.drools.org/"&gt;Drools&lt;/a&gt; community know this and wanted to provide a way for Quarkus developers to build intelligent applications.&lt;/p&gt; &lt;p&gt;&lt;a href="https://kogito.kie.org/"&gt;Kogito&lt;/a&gt; is the open source Quarkus extension that allows developers to implement core logic in a more business-driven way. It brings concepts and maturity from 15+ years of experience of production-tested projects like jBPM.&lt;/p&gt; &lt;p&gt;Kogito is the proper extension for intelligent Quarkus applications. Kogito precompiles business assets (like a BPMN file or a rules decision table, for example). It automatically generates the native executable with its own REST endpoint that allows interaction with its respective processes, tasks, and rules. In that way, developers only need to worry about the implementation of the logic itself.&lt;/p&gt; &lt;p&gt;With Kogito, delivering intelligent cloud-native business applications will be easier than ever. To understand the power of Kogito, let’s take a quick look at what a Business Automation tool like jBPM delivers.&lt;/p&gt; &lt;h3&gt;Red Hat Process Automation Manager&lt;/h3&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/products/rhpam/download"&gt;Red Hat Process Automation Manager&lt;/a&gt; (RHPAM) is the enterprise version of jBPM project, which includes Drools and OptaPlanner. RHPAM is well known for delivering a cloud-ready solution through BizDevOps culture. It has a productive environment to author business logic using comprehensible language for biz and tech: the logic is implemented following the triple-crown pattern – &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_jboss_bpm_suite/6.1/html/administration_and_configuration_guide/chap-business_process_model_and_notation"&gt;Business Process Model and Notation&lt;/a&gt; (BPMN), &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.3/html/designing_and_building_cases_for_case_management/case-management-cmmn-con-case-management-design"&gt;Case Management Model and Notation&lt;/a&gt; (CMMN), and &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.0/html/designing_a_decision_service_using_dmn_models/dmn-con_dmn-models"&gt;Decision Model and Notation&lt;/a&gt; (DMN).&lt;/p&gt; &lt;p&gt;It also comes with a powerful execution engine, Kie Server, which can easily scale in hybrid cloud environments and can deliver decoupled business logic through CI/CD pipelines. To understand more about the power of a business automation tool like RHPAM, refer to this article: &lt;a href="https://developers.redhat.com/blog/2019/02/20/good-news-business-automation-is-not-about-soa/"&gt;Good news: Business automation is not about SOA&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Kogito ergo automate&lt;/h3&gt; &lt;p&gt;With Kogito, developers can have business assets precompiled and running on top of Quarkus, taking advantage of hot reload during the development phase. Additionally, when using native mode to compile the project, a business rule execution runs 100 times faster and with lower resource consumption.&lt;/p&gt; &lt;p&gt;Needless to say, the startup time is superb in both modes (the application is &lt;em&gt;ready&lt;/em&gt; for access after boot; no additional processing happens on the app first access). Check out the startup times for these Kogito example projects:&lt;/p&gt; &lt;figure class="wp-block-image"&gt;&lt;img class="wp-image-445" src="https://karinavarelame.files.wordpress.com/2019/08/screen-shot-2019-08-20-at-15.52.44-1.png?w=730" alt="" data-attachment-id="445" data-permalink="https://karinavarela.me/screen-shot-2019-08-20-at-15-52-44-1/" data-orig-file="https://karinavarelame.files.wordpress.com/2019/08/screen-shot-2019-08-20-at-15.52.44-1.png" data-orig-size="2408,164" data-comments-opened="0" data-image-meta="{&amp;#34;aperture&amp;#34;:&amp;#34;0&amp;#34;,&amp;#34;credit&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;camera&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;caption&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;created_timestamp&amp;#34;:&amp;#34;0&amp;#34;,&amp;#34;copyright&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;focal_length&amp;#34;:&amp;#34;0&amp;#34;,&amp;#34;iso&amp;#34;:&amp;#34;0&amp;#34;,&amp;#34;shutter_speed&amp;#34;:&amp;#34;0&amp;#34;,&amp;#34;title&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;orientation&amp;#34;:&amp;#34;0&amp;#34;}" data-image-title="screen-shot-2019-08-20-at-15.52.44-1" data-image-description="" data-medium-file="https://karinavarelame.files.wordpress.com/2019/08/screen-shot-2019-08-20-at-15.52.44-1.png?w=300" data-large-file="https://karinavarelame.files.wordpress.com/2019/08/screen-shot-2019-08-20-at-15.52.44-1.png?w=730" /&gt;&lt;figcaption&gt;Startup using GraalVM takes 1s.&lt;/figcaption&gt;&lt;/figure&gt; &lt;figure class="wp-block-image"&gt;&lt;img class="wp-image-446" src="https://karinavarelame.files.wordpress.com/2019/08/screen-shot-2019-08-20-at-15.55.38-1.png?w=730" alt="" data-attachment-id="446" data-permalink="https://karinavarela.me/screen-shot-2019-08-20-at-15-55-38-1/" data-orig-file="https://karinavarelame.files.wordpress.com/2019/08/screen-shot-2019-08-20-at-15.55.38-1.png" data-orig-size="2360,144" data-comments-opened="0" data-image-meta="{&amp;#34;aperture&amp;#34;:&amp;#34;0&amp;#34;,&amp;#34;credit&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;camera&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;caption&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;created_timestamp&amp;#34;:&amp;#34;0&amp;#34;,&amp;#34;copyright&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;focal_length&amp;#34;:&amp;#34;0&amp;#34;,&amp;#34;iso&amp;#34;:&amp;#34;0&amp;#34;,&amp;#34;shutter_speed&amp;#34;:&amp;#34;0&amp;#34;,&amp;#34;title&amp;#34;:&amp;#34;&amp;#34;,&amp;#34;orientation&amp;#34;:&amp;#34;0&amp;#34;}" data-image-title="screen-shot-2019-08-20-at-15.55.38-1" data-image-description="" data-medium-file="https://karinavarelame.files.wordpress.com/2019/08/screen-shot-2019-08-20-at-15.55.38-1.png?w=300" data-large-file="https://karinavarelame.files.wordpress.com/2019/08/screen-shot-2019-08-20-at-15.55.38-1.png?w=730" /&gt;&lt;figcaption&gt;Startup in native mode, 0.007s.&lt;/figcaption&gt;&lt;/figure&gt; &lt;p&gt;Remember that, to test the native mode, you have to set up GraalVM on your machine. Also, Kogito is still in its early days, and version 0.3.0 will be released this week (August).&lt;/p&gt; &lt;p&gt;Knowing the future of business automation, I suggest you try the extension and join the Kogito community! &lt;img class="emoji" src="https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/svg/1f600.svg" alt="&amp;#x1f600;" /&gt;&lt;/p&gt; &lt;h3&gt;Learn more about Kogito&lt;/h3&gt; &lt;p&gt;To test Kogito yourself and learn a little bit more about the project, please refer to:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://kogito.kie.org/get-started/"&gt;Getting Started with Kogito&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/kiegroup/kogito-examples"&gt;Kogito examples&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Understand the migration process from Drools to Kogito from an engineering point of view. In this video, &lt;a href="https://developers.redhat.com/blog/author/mfusco/"&gt;Mario Fusco&lt;/a&gt;, a Red Hat Principal Software Engineer, also shows performance and implementation with Kogito:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/blog/2019/07/23/devnation-live-introducing-kogito/"&gt;DevNation Live: Introducing Kogito&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Here is a forum for discussions around Kogito Development:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://groups.google.com/forum/#!forum/kogito-development"&gt;Kogito Google Group&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F29%2Fkogito-for-quarkus-intelligent-applications%2F&amp;#38;linkname=Kogito%20for%20Quarkus%20intelligent%20applications" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F29%2Fkogito-for-quarkus-intelligent-applications%2F&amp;#38;linkname=Kogito%20for%20Quarkus%20intelligent%20applications" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F29%2Fkogito-for-quarkus-intelligent-applications%2F&amp;#38;linkname=Kogito%20for%20Quarkus%20intelligent%20applications" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F29%2Fkogito-for-quarkus-intelligent-applications%2F&amp;#38;linkname=Kogito%20for%20Quarkus%20intelligent%20applications" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F29%2Fkogito-for-quarkus-intelligent-applications%2F&amp;#38;linkname=Kogito%20for%20Quarkus%20intelligent%20applications" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F29%2Fkogito-for-quarkus-intelligent-applications%2F&amp;#38;linkname=Kogito%20for%20Quarkus%20intelligent%20applications" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F29%2Fkogito-for-quarkus-intelligent-applications%2F&amp;#38;linkname=Kogito%20for%20Quarkus%20intelligent%20applications" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F29%2Fkogito-for-quarkus-intelligent-applications%2F&amp;#038;title=Kogito%20for%20Quarkus%20intelligent%20applications" data-a2a-url="https://developers.redhat.com/blog/2019/08/29/kogito-for-quarkus-intelligent-applications/" data-a2a-title="Kogito for Quarkus intelligent applications"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/29/kogito-for-quarkus-intelligent-applications/"&gt;Kogito for Quarkus intelligent applications&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/nJdxhoEDFQY" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;The Quarkus project is becoming quite popular among developers. Quarkus provides a fast-dev environment, and it has already a set of libraries, standards, and frameworks that are made available through extensions like RestEasy, Panache, SmallRye, Keycloak, and Kafka. Additionally, you can start using Kogito today to create intelligent Quarkus applications. Business applications are all about [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/29/kogito-for-quarkus-intelligent-applications/"&gt;Kogito for Quarkus intelligent applications&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/08/29/kogito-for-quarkus-intelligent-applications/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">620707</post-id><dc:creator>Karina Varela</dc:creator><dc:date>2019-08-29T06:59:18Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/08/29/kogito-for-quarkus-intelligent-applications/</feedburner:origLink></entry><entry><title>Build a monitoring infrastructure for your Jaeger installation</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/H2xnT9CvOn4/" /><category term="Cloud" /><category term="Kubernetes" /><category term="Jaeger" /><category term="kubernetes" /><category term="monitoring" /><category term="prometheus" /><author><name>Juraci Paixão Kröhling</name></author><id>https://developers.redhat.com/blog/?p=621167</id><updated>2019-08-28T07:00:30Z</updated><published>2019-08-28T07:00:30Z</published><content type="html">&lt;p&gt;When you deploy &lt;a href="https://www.jaegertracing.io/"&gt;Jaeger&lt;/a&gt; in a production configuration, it makes sense to keep an eye on your Jaeger instance to see if it is performing as expected. After all, an outage in Jaeger means that tracing data is being lost, making it challenging to understand possible problems happening within your production applications.&lt;/p&gt; &lt;p&gt;This article guides you in building a monitoring infrastructure for your Jaeger installation. We&amp;#8217;ll first provide a link to ready-made resources for those who just want a quick way to monitor Jaeger.&lt;/p&gt; &lt;p&gt;In the second part, we&amp;#8217;ll go deeper and see how we can install all the tools in a &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; cluster, including &lt;a href="https://prometheus.io/"&gt;Prometheus&lt;/a&gt;, &lt;a href="https://grafana.com/"&gt;Grafana&lt;/a&gt;, and Jaeger itself, as well as the required tools to customize the alert rules and dashboards using the official Jaeger monitoring mixin.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; If you already have a working environment involving Grafana, Prometheus, and Jaeger, you might only need to know where the base dashboards and alert definitions are located. Here they are:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://github.com/jaegertracing/jaeger/blob/master/monitoring/jaeger-mixin/dashboard-for-grafana.json"&gt; Dashboard&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/jaegertracing/jaeger/blob/master/monitoring/jaeger-mixin/prometheus_alerts.yml"&gt;Alerts&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;If you are already familiar with mixins, the official Jaeger monitoring mixin is available in &lt;a href="https://github.com/jaegertracing/jaeger/tree/master/monitoring/jaeger-mixin"&gt;our main source repository&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Prerequisites&lt;/h2&gt; &lt;p&gt;This guide assumes you have admin access to a Kubernetes cluster. An easy way to get a Kubernetes cluster for testing purposes is running it locally via &lt;a href="https://github.com/kubernetes/minikube"&gt;Minikube&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;This guide also requires you to have &lt;a href="https://github.com/google/go-jsonnet"&gt;jsonnet&lt;/a&gt; and &lt;a href="https://github.com/jsonnet-bundler/jsonnet-bundler"&gt;jb (jsonnet-bundler)&lt;/a&gt;. They can be installed on your local machine using go get, as follows:&lt;/p&gt; &lt;pre&gt;$ go get github.com/google/go-jsonnet/cmd/jsonnet $ go get github.com/jsonnet-bundler/jsonnet-bundler/cmd/jb &lt;/pre&gt; &lt;h2&gt;Installing Prometheus, Alertmanager, and Grafana&lt;/h2&gt; &lt;p&gt;Installing Prometheus on Kubernetes can be done in several ways. One way to install it is via the project &lt;a href="https://github.com/coreos/kube-prometheus"&gt;kube-prometheus&lt;/a&gt;, but the &lt;a href="https://github.com/coreos/prometheus-operator"&gt;Prometheus Operator&lt;/a&gt; can be directly used instead, as well the &lt;a href="https://github.com/helm/charts/tree/master/stable/prometheus-operator"&gt;community Helm chart for the Prometheus Operator&lt;/a&gt;. For this guide, we&amp;#8217;ll use kube-prometheus to get a Prometheus, Alertmanager, and Grafana instance.&lt;/p&gt; &lt;p&gt;First, let&amp;#8217;s use &lt;code&gt;jb&lt;/code&gt; to generate a base &lt;code&gt;jsonnet&lt;/code&gt; file describing our installation, adding &lt;code&gt;kube-prometheus&lt;/code&gt; as a dependency:&lt;/p&gt; &lt;pre&gt;$ jb init $ jb install \ github.com/jaegertracing/jaeger/monitoring/jaeger-mixin@master \ github.com/grafana/jsonnet-libs/grafana-builder@master \ github.com/coreos/kube-prometheus/jsonnet/kube-prometheus@master &lt;/pre&gt; &lt;p&gt;Once that is done, we should have a manifest file named &lt;code&gt;jsonnetfile.json&lt;/code&gt; similar to this one:&lt;/p&gt; &lt;pre&gt;{ "dependencies": [ { "name": "mixin", "source": { "git": { "remote": "https://github.com/jpkrohling/jaeger", "subdir": "monitoring/mixin" } }, "version": "1668-Move-Jaeger-mixing-to-main-repo" }, { "name": "grafana-builder", "source": { "git": { "remote": "https://github.com/grafana/jsonnet-libs", "subdir": "grafana-builder" } }, "version": "master" }, { "name": "kube-prometheus", "source": { "git": { "remote": "https://github.com/coreos/kube-prometheus", "subdir": "jsonnet/kube-prometheus" } }, "version": "master" } ] } &lt;/pre&gt; &lt;p&gt;The &lt;code&gt;install&lt;/code&gt; command should also have created &lt;code&gt;vendor&lt;/code&gt; directory with all the &lt;code&gt;jsonnet&lt;/code&gt; dependencies. All we need now is a deployment descriptor: create a file named &lt;code&gt;monitoring-setup.jsonnet&lt;/code&gt;, with the following contents.&lt;/p&gt; &lt;pre&gt;local kp = (import 'kube-prometheus/kube-prometheus.libsonnet') + { _config+:: { namespace: 'monitoring', }, }; { ['00namespace-' + name + '.json']: kp.kubePrometheus[name] for name in std.objectFields(kp.kubePrometheus) } + { ['0prometheus-operator-' + name + '.json']: kp.prometheusOperator[name] for name in std.objectFields(kp.prometheusOperator) } + { ['node-exporter-' + name + '.json']: kp.nodeExporter[name] for name in std.objectFields(kp.nodeExporter) } + { ['kube-state-metrics-' + name + '.json']: kp.kubeStateMetrics[name] for name in std.objectFields(kp.kubeStateMetrics) } + { ['alertmanager-' + name + '.json']: kp.alertmanager[name] for name in std.objectFields(kp.alertmanager) } + { ['prometheus-' + name + '.json']: kp.prometheus[name] for name in std.objectFields(kp.prometheus) } + { ['prometheus-adapter-' + name + '.json']: kp.prometheusAdapter[name] for name in std.objectFields(kp.prometheusAdapter) } + { ['grafana-' + name + '.json']: kp.grafana[name] for name in std.objectFields(kp.grafana) } &lt;/pre&gt; &lt;p&gt;With that, we are ready to generate our deployment manifests and apply them:&lt;/p&gt; &lt;pre&gt;$ jsonnet -J vendor -cm manifests/ monitoring-setup.jsonnet $ kubectl apply -f manifests/ &lt;/pre&gt; &lt;p&gt;It might be the case that the Custom Resource Definitions (CRDs) aren&amp;#8217;t ready when they are first used, causing messages like:&lt;/p&gt; &lt;pre&gt;no matches for kind "ServiceMonitor" in version "monitoring.coreos.com/v1" &lt;/pre&gt; &lt;p&gt;In that case, simply apply the manifests again, since they are idempotent.&lt;/p&gt; &lt;p&gt;After a couple of minutes, there should be a few &lt;em&gt;Deployment&lt;/em&gt; and &lt;em&gt;Statefulset&lt;/em&gt; resources available:&lt;/p&gt; &lt;pre&gt;$ kubectl get deployments -n monitoring NAME READY UP-TO-DATE AVAILABLE AGE grafana 1/1 1 1 56s kube-state-metrics 1/1 1 1 56s prometheus-adapter 1/1 1 1 56s prometheus-operator 1/1 1 1 57s $ kubectl get statefulsets -n monitoring NAME READY AGE alertmanager-main 3/3 60s prometheus-k8s 2/2 50s &lt;/pre&gt; &lt;p&gt;Let&amp;#8217;s check that Prometheus is up by connecting directly to the service&amp;#8217;s port:&lt;/p&gt; &lt;pre&gt;$ kubectl port-forward -n monitoring service/prometheus-k8s 9090:9090 $ firefox http://localhost:9090 &lt;/pre&gt; &lt;p&gt;Perform the same check for Grafana, where the default credentials are &lt;em&gt;admin&lt;/em&gt; for both the username and password.&lt;/p&gt; &lt;pre&gt;$ kubectl port-forward -n monitoring service/grafana 3000:3000 $ firefox http://localhost:3000 &lt;/pre&gt; &lt;h2&gt;Installing Jaeger&lt;/h2&gt; &lt;p&gt;The Jaeger Operator is installed by default in the &amp;#8220;observability&amp;#8221; namespace. For this guide, let&amp;#8217;s keep it together with Prometheus and Grafana in the &amp;#8220;monitoring&amp;#8221; namespace. To accomplish that, we&amp;#8217;ll get the manifests with &lt;code&gt;curl&lt;/code&gt; and replace &lt;code&gt;observability&lt;/code&gt; with &lt;code&gt;monitoring&lt;/code&gt;, feeding the outcome to &lt;code&gt;kubectl&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;$ kubectl create -f https://raw.githubusercontent.com/jaegertracing/jaeger-operator/v1.13.1/deploy/crds/jaegertracing_v1_jaeger_crd.yaml $ curl -s https://raw.githubusercontent.com/jaegertracing/jaeger-operator/v1.13.1/deploy/service_account.yaml | sed 's/observability/monitoring/gi' | kubectl apply -f - $ curl -s https://raw.githubusercontent.com/jaegertracing/jaeger-operator/v1.13.1/deploy/role.yaml | sed 's/observability/monitoring/gi' | kubectl apply -f - $ curl -s https://raw.githubusercontent.com/jaegertracing/jaeger-operator/v1.13.1/deploy/role_binding.yaml | sed 's/observability/monitoring/gi' | kubectl apply -f - $ curl -s https://raw.githubusercontent.com/jaegertracing/jaeger-operator/v1.13.1/deploy/operator.yaml | sed 's/observability/monitoring/gi' | kubectl apply -f - &lt;/pre&gt; &lt;p&gt;At the time of writing, the latest version was v1.13.1, so change the URLs above to match the desired version. After a few moments, the Jaeger Operator should be up and running:&lt;/p&gt; &lt;pre&gt;$ kubectl get deployment/jaeger-operator -n monitoring NAME READY UP-TO-DATE AVAILABLE AGE jaeger-operator 1/1 1 1 23s &lt;/pre&gt; &lt;p&gt;Once the Jaeger Operator is ready, it&amp;#8217;s time to create a Jaeger instance called &lt;code&gt;tracing&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;kubectl apply -f - &amp;#60;&amp;#60;EOF apiVersion: jaegertracing.io/v1 kind: Jaeger metadata: name: tracing namespace: monitoring EOF &lt;/pre&gt; &lt;p&gt;And in a few moments, a Jaeger instance should be ready:&lt;/p&gt; &lt;pre&gt;$ kubectl get deployment/tracing -n monitoring NAME READY UP-TO-DATE AVAILABLE AGE tracing 1/1 1 1 17s $ kubectl get ingress -n monitoring NAME HOSTS ADDRESS PORTS AGE tracing-query * 192.168.122.181 80 26s &lt;/pre&gt; &lt;p&gt;We can access the Jaeger UI by opening the given IP address in a web browser. In this example, it&amp;#8217;s http://192.168.122.181/, but your IP will likely be different.&lt;/p&gt; &lt;p&gt;Now that we have everything running, let&amp;#8217;s install our business application, instrumented to create spans for each HTTP request it receives:&lt;/p&gt; &lt;pre&gt;$ kubectl apply -n default -f https://raw.githubusercontent.com/jaegertracing/jaeger-operator/v1.13.1/deploy/examples/business-application-injected-sidecar.yaml &lt;/pre&gt; &lt;p&gt;Once the deployment is ready, we can open a direct connection to the Pod and start sending requests to it:&lt;/p&gt; &lt;pre&gt;$ kubectl get -n default deployment/myapp NAME READY UP-TO-DATE AVAILABLE AGE myapp 1/1 1 1 26s $ kubectl port-forward deployment/myapp 8080:8080 $ watch -n 0.5 curl localhost:8080 &lt;/pre&gt; &lt;p&gt;This will generate two HTTP requests per second, and we should see one new trace in the Jaeger UI for every HTTP request.&lt;/p&gt; &lt;h2&gt;Create a PodMonitor&lt;/h2&gt; &lt;p&gt;At this point, we have a fully functional set of monitoring services: Prometheus, Grafana, Alertmanager, and Jaeger. However, the metrics generated from our Jaeger deployment aren&amp;#8217;t being scraped by Prometheus: we need to create a &lt;code&gt;ServiceMonitor&lt;/code&gt; or a &lt;code&gt;PodMonitor&lt;/code&gt; telling Prometheus where to get our data.&lt;/p&gt; &lt;p&gt;Depending on the component, the metrics are served in different ports:&lt;/p&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Component&lt;/th&gt; &lt;th&gt;Port&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;Agent&lt;/td&gt; &lt;td&gt;14271&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Collector&lt;/td&gt; &lt;td&gt;14269&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Query&lt;/td&gt; &lt;td&gt;16687&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;All in one&lt;/td&gt; &lt;td&gt;14269&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;As the Jaeger instance we created didn&amp;#8217;t specify a &lt;a href="https://www.jaegertracing.io/docs/1.13/operator/#deployment-strategies"&gt;strategy&lt;/a&gt;, the default strategy &lt;code&gt;allInOne&lt;/code&gt; was selected. Our &lt;code&gt;PodMonitor&lt;/code&gt; will then tell Prometheus to get the metrics from the port 14269:&lt;/p&gt; &lt;pre&gt;$ kubectl apply -f - &amp;#60;&amp;#60;EOF apiVersion: monitoring.coreos.com/v1 kind: PodMonitor metadata: name: tracing namespace: monitoring spec: podMetricsEndpoints: - interval: 5s targetPort: 14269 selector: matchLabels: app: jaeger EOF &lt;/pre&gt; &lt;p&gt;It might take a couple of minutes for Prometheus to see this new target. Check the &lt;code&gt;Targets&lt;/code&gt; page, looking for the target &lt;code&gt;monitoring/tracing/0&lt;/code&gt;. Once Prometheus scrapes Jaeger&amp;#8217;s metrics endpoint, we can see Jaeger-specific metrics in the Prometheus Graph view. For instance, enter &lt;code&gt;jaeger_collector_traces_saved_by_svc_total&lt;/code&gt; and click &lt;code&gt;Execute&lt;/code&gt;. The number of traces shown in the graph should be increasing over time, reflecting the number of HTTP requests that we are running against the business application from the previous steps.&lt;/p&gt; &lt;p&gt;&lt;img class=" size-full wp-image-621197 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/08/prometheus-pod-monitor.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/08/prometheus-pod-monitor.png" alt="Pod monitor" width="825" height="476" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/08/prometheus-pod-monitor.png 825w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/prometheus-pod-monitor-300x173.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/prometheus-pod-monitor-768x443.png 768w" sizes="(max-width: 825px) 100vw, 825px" /&gt;&lt;/p&gt; &lt;h2&gt;Adapt the mixin&lt;/h2&gt; &lt;p&gt;We now have the metrics from our Jaeger instance available in Prometheus, but which metrics should be seen on a dashboard and which alerts should be generated under which circumstances?&lt;/p&gt; &lt;p&gt;While it&amp;#8217;s hard to come up with a generic, one-size-fits-all answer to those questions, our friends at Grafana Labs came up with a mixin for Jaeger, providing a starting point for your own dashboards and alerts. The mixin has since been contributed to the Jaeger project and is available under the main repository.&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s go back to our original &lt;code&gt;monitoring-setup.jsonnet&lt;/code&gt; and add the Jaeger-specific dashboard and alert rules:&lt;/p&gt; &lt;pre&gt;local jaegerAlerts = (import 'jaeger-mixin/alerts.libsonnet').prometheusAlerts; local jaegerDashboard = (import 'jaeger-mixin/mixin.libsonnet').grafanaDashboards; local kp = (import 'kube-prometheus/kube-prometheus.libsonnet') + { _config+:: { namespace: 'monitoring', }, grafanaDashboards+:: { 'jaeger.json': jaegerDashboard['jaeger.json'], }, prometheusAlerts+:: jaegerAlerts, }; { ['00namespace-' + name + '.json']: kp.kubePrometheus[name] for name in std.objectFields(kp.kubePrometheus) } + { ['0prometheus-operator-' + name + '.json']: kp.prometheusOperator[name] for name in std.objectFields(kp.prometheusOperator) } + { ['node-exporter-' + name + '.json']: kp.nodeExporter[name] for name in std.objectFields(kp.nodeExporter) } + { ['kube-state-metrics-' + name + '.json']: kp.kubeStateMetrics[name] for name in std.objectFields(kp.kubeStateMetrics) } + { ['alertmanager-' + name + '.json']: kp.alertmanager[name] for name in std.objectFields(kp.alertmanager) } + { ['prometheus-' + name + '.json']: kp.prometheus[name] for name in std.objectFields(kp.prometheus) } + { ['prometheus-adapter-' + name + '.json']: kp.prometheusAdapter[name] for name in std.objectFields(kp.prometheusAdapter) } + { ['grafana-' + name + '.json']: kp.grafana[name] for name in std.objectFields(kp.grafana) } &lt;/pre&gt; &lt;p&gt;And let&amp;#8217;s generate the new manifests:&lt;/p&gt; &lt;pre&gt;$ jsonnet -J vendor -cm manifests/ monitoring-setup.jsonnet &lt;/pre&gt; &lt;p&gt;Only a few manifests should have been changed, but it&amp;#8217;s safe to apply all the manifests again:&lt;/p&gt; &lt;pre&gt;$ kubectl apply -f manifests/ &lt;/pre&gt; &lt;p&gt;After a few moments, a new pod for Grafana should replace the previous one:&lt;/p&gt; &lt;pre&gt;$ kubectl get pods -n monitoring -l app=grafana NAME READY STATUS RESTARTS AGE grafana-558647b59-fkmr4 1/1 Running 0 11m grafana-7bcb7f5b9b-6rv2w 0/1 Pending 0 8s &lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; When using Minikube, your new pod might get stuck in the &lt;em&gt;Pending&lt;/em&gt; state due to &lt;em&gt;Insufficient cpu&lt;/em&gt;. You can check the cause by running &lt;code&gt;kubectl describe -n monitoring pod POD_NAME&lt;/code&gt;, and manually kill the old pod with &lt;code&gt;kubectl delete -n monitoring pod POD_NAME&lt;/code&gt;, or start &lt;code&gt;minikube&lt;/code&gt; with a higher value for the flag &lt;code&gt;--cpus&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Once the new Grafana pod is up and running, you should see that Grafana has a new Jaeger dashboard available, displaying the data provided by Prometheus. Similarly, new alert rules should be available in Prometheus: look for the ones with &amp;#8220;Jaeger&amp;#8221; in the name, such as &lt;code&gt;JaegerCollectorQueueNotDraining&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;img class=" size-full wp-image-621217 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/08/dashboard-1024x911.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/08/dashboard-1024x911.png" alt="Dashboard" width="640" height="569" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/08/dashboard-1024x911.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/dashboard-300x267.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/dashboard-768x684.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/p&gt; &lt;h2&gt;Wrapping up&lt;/h2&gt; &lt;p&gt;Deploying observability tools to bring insights to your business application is a necessity in the world of cloud-native microservices, and it&amp;#8217;s essential to be able to monitor how these tools are behaving. This blog post shows one way to get a complete stack up and running in Kubernetes, with the final goal of monitoring Jaeger using its own internal metrics. The same setup can be extended to get Prometheus to scrape the metrics from your business application, and Grafana as the dashboard tool to visualize the data.&lt;/p&gt; &lt;p&gt;Are you using Grafana already to visualize the metrics scraped from Jaeger? Share your dashboards with us, we might have a place for them in the official Jaeger monitoring mixin!&lt;/p&gt; &lt;h3&gt;Upcoming&lt;/h3&gt; &lt;p&gt;&lt;a href="https://twitter.com/jpkrohling"&gt;Juraci Paixão Kröhling&lt;/a&gt; will present “What are my microservices doing?” at the Red Hat &amp;#8220;&lt;a href="https://www.redhat.com/en/events/webinar/develop-deploy-deliver-continuously?sc_cid=701f2000000uI48AAE"&gt;Develop. Deploy. Deliver continuously.&amp;#8221;&lt;/a&gt; virtual event, Thursday, October 10, 2019.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F28%2Fbuild-a-monitoring-infrastructure-for-your-jaeger-installation%2F&amp;#38;linkname=Build%20a%20monitoring%20infrastructure%20for%20your%20Jaeger%20installation" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F28%2Fbuild-a-monitoring-infrastructure-for-your-jaeger-installation%2F&amp;#38;linkname=Build%20a%20monitoring%20infrastructure%20for%20your%20Jaeger%20installation" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F28%2Fbuild-a-monitoring-infrastructure-for-your-jaeger-installation%2F&amp;#38;linkname=Build%20a%20monitoring%20infrastructure%20for%20your%20Jaeger%20installation" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F28%2Fbuild-a-monitoring-infrastructure-for-your-jaeger-installation%2F&amp;#38;linkname=Build%20a%20monitoring%20infrastructure%20for%20your%20Jaeger%20installation" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F28%2Fbuild-a-monitoring-infrastructure-for-your-jaeger-installation%2F&amp;#38;linkname=Build%20a%20monitoring%20infrastructure%20for%20your%20Jaeger%20installation" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F28%2Fbuild-a-monitoring-infrastructure-for-your-jaeger-installation%2F&amp;#38;linkname=Build%20a%20monitoring%20infrastructure%20for%20your%20Jaeger%20installation" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F28%2Fbuild-a-monitoring-infrastructure-for-your-jaeger-installation%2F&amp;#38;linkname=Build%20a%20monitoring%20infrastructure%20for%20your%20Jaeger%20installation" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F28%2Fbuild-a-monitoring-infrastructure-for-your-jaeger-installation%2F&amp;#038;title=Build%20a%20monitoring%20infrastructure%20for%20your%20Jaeger%20installation" data-a2a-url="https://developers.redhat.com/blog/2019/08/28/build-a-monitoring-infrastructure-for-your-jaeger-installation/" data-a2a-title="Build a monitoring infrastructure for your Jaeger installation"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/28/build-a-monitoring-infrastructure-for-your-jaeger-installation/"&gt;Build a monitoring infrastructure for your Jaeger installation&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/H2xnT9CvOn4" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;When you deploy Jaeger in a production configuration, it makes sense to keep an eye on your Jaeger instance to see if it is performing as expected. After all, an outage in Jaeger means that tracing data is being lost, making it challenging to understand possible problems happening within your production applications. This article guides [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/28/build-a-monitoring-infrastructure-for-your-jaeger-installation/"&gt;Build a monitoring infrastructure for your Jaeger installation&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/08/28/build-a-monitoring-infrastructure-for-your-jaeger-installation/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">621167</post-id><dc:creator>Juraci Paixão Kröhling</dc:creator><dc:date>2019-08-28T07:00:30Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/08/28/build-a-monitoring-infrastructure-for-your-jaeger-installation/</feedburner:origLink></entry><entry><title>Using Keycloak instead of Picketlink for SAML-based authentication</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/iQAC_9KfDOs/" /><category term="Red Hat JBoss Enterprise Application Platform" /><category term="Red Hat SSO" /><category term="Security" /><category term="keycloak" /><category term="WildFly" /><author><name>Siddhartha De</name></author><id>https://developers.redhat.com/blog/?p=517667</id><updated>2019-08-27T07:00:26Z</updated><published>2019-08-27T07:00:26Z</published><content type="html">&lt;p&gt;The &lt;a href="http://picketlink.org/"&gt;Picketlink&lt;/a&gt; project is now a deprecated module in &lt;a href="https://developers.redhat.com/products/eap/overview"&gt;Red Hat JBoss Enterprise Application Platform (EAP)&lt;/a&gt;, so there&amp;#8217;s a chance that Picketlink will no longer ship with the next release of EAP/Wildfly and that there will not be any fixes in the near future for the &lt;code&gt;picketlink&lt;/code&gt; module.&lt;/p&gt; &lt;p&gt;Picketlink, however, is now merged with &lt;a href="https://www.keycloak.org/about.html"&gt;Keycloak&lt;/a&gt;, an open source identity and access management solution developed by Red Hat&amp;#8217;s JBoss Community. In this article, we&amp;#8217;ll present an alternative solution to the &lt;code&gt;picketlink&lt;/code&gt; module. Some organizations use &lt;code&gt;picketlink&lt;/code&gt; as the service provider to enable SAML-based authentication with a third-party identity provider (i.e., Active Directory Federated Services (AD FS), OKTA, PingFederate, etc.). In this, article, we&amp;#8217;ll see how the keycloak-saml adapter can be configured in the place of Picketlink to enable SAML-based authentication with a third-party identity provider.&lt;/p&gt; &lt;p&gt;&lt;span id="more-517667"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h3&gt;Set up the Relying Party&lt;/h3&gt; &lt;div dir="ltr"&gt;In AD FS Management console, right-click &lt;em&gt;Trust relationships → Relying Party Trusts&lt;/em&gt; and select &lt;em&gt;Add Relying Party Trust&lt;/em&gt; from the menu:&lt;/div&gt; &lt;div dir="ltr"&gt; &lt;p&gt;&lt;img src="https://lh5.googleusercontent.com/7xezIIuj00qQLFIB0LR53uOpwionzFfz9OXjdzqlCdkptUO-l2LumtxNuS2IgvyyZyP78shXObIzi4xwjeDGdbK5WrrN9QAAlsVpndEf9X3al3FDwzJB4GJREAMY0S6Ot4lGrzk" /&gt;&lt;/p&gt; &lt;p id="uksEVJh"&gt;AD FS allows you to import metadata, which completes the configuration without any manual intervention. However, here we are required to go with manual configuration.&lt;/p&gt; &lt;/div&gt; &lt;p id="DulEjws"&gt;&lt;img class=" alignnone size-full wp-image-618217 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a3fd775b65.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a3fd775b65.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a3fd775b65.png 714w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a3fd775b65-300x239.png 300w" sizes="(max-width: 714px) 100vw, 714px" /&gt;&lt;/p&gt; &lt;p&gt;Select &lt;em&gt;AD FS profile&lt;/em&gt; for SAML2.0 based federation:&lt;/p&gt; &lt;p id="vnIxyTD"&gt;&lt;img class=" alignnone size-full wp-image-618227 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a40470e6ed.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a40470e6ed.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a40470e6ed.png 543w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a40470e6ed-300x101.png 300w" sizes="(max-width: 543px) 100vw, 543px" /&gt;&lt;/p&gt; &lt;p&gt;If you are required to enable encrypted assertion, import the certificate that will be used for encryption, but make sure that the associated private key is present with the service provider.&lt;/p&gt; &lt;p id="asCZtfF"&gt;&lt;img class=" alignnone size-full wp-image-618237 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a41c40f799.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a41c40f799.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a41c40f799.png 539w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a41c40f799-300x106.png 300w" sizes="(max-width: 539px) 100vw, 539px" /&gt;&lt;/p&gt; &lt;p&gt;Check the SAML2.0 WebSSO protocol support to enable SAML federation with a web application:&lt;/p&gt; &lt;p id="PdOtPqK"&gt;&lt;img class=" alignnone size-full wp-image-618247 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a432585276.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a432585276.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a432585276.png 553w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a432585276-300x211.png 300w" sizes="(max-width: 553px) 100vw, 553px" /&gt;&lt;/p&gt; &lt;p&gt;Add the URL of the relying party trust; multiple URLs can be added here:&lt;/p&gt; &lt;p id="wWCpLxU"&gt;&lt;img class=" alignnone size-full wp-image-618257 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a4383bc0b2.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a4383bc0b2.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a4383bc0b2.png 542w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a4383bc0b2-300x106.png 300w" sizes="(max-width: 542px) 100vw, 542px" /&gt;&lt;/p&gt; &lt;p&gt;Permit all users to enable access for all the user to the relying-party:&lt;/p&gt; &lt;p id="voPRlEe"&gt;&lt;img class=" alignnone size-full wp-image-618267 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a43e0a48f8.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a43e0a48f8.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a43e0a48f8.png 547w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d4a43e0a48f8-300x115.png 300w" sizes="(max-width: 547px) 100vw, 547px" /&gt;&lt;/p&gt; &lt;p&gt;Once the relying party trust is added, AD FS will be able to correctly authenticate the users according to requests from the service provider, but the requested name ID format will not yet be recognized and the SAML response will not contain any additional information like email. Thus, it&amp;#8217;s necessary to map claims from AD user details into a SAML document.&lt;/p&gt; &lt;h3&gt;Three rules&lt;/h3&gt; &lt;p&gt;We will set up three rules: one for mapping user ID, one for mapping standard user attributes, and another for a user group. All of these start by clicking the &lt;em&gt;Add Rule&lt;/em&gt; button in the &lt;em&gt;Edit Claim Rules&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;&lt;img class="alignnone size-full" src="https://lh6.googleusercontent.com/d_P1vSYXxcWXunGnl9g_3GHGFqzWfPWcxFlSJm1HvW1fhQtPAoLjjNhpBppupxNXwEyQ4_qG45vXTlwSTotAaWxHZQfit88TM7K9RwkvUtSHzphUoaoIISoX4Nl77Nhgv1aFDys" width="510" height="557" /&gt;&lt;/p&gt; &lt;p&gt;The first rule will map the user ID in Windows Qualified Domain name to the SAML response. In the &lt;em&gt;Add Transform Claim Rule&lt;/em&gt; window, select &lt;em&gt;Transform&lt;/em&gt; an incoming claim rule type:&lt;/p&gt; &lt;p&gt;&lt;img class="alignnone size-full" src="https://lh5.googleusercontent.com/jSXZhgQ_8_NvGsG9DhvUXbNKBpF8xORc_jAkQkNNb-BM6rbcGaqZJ0m-VDXiYCAVUMVHQG7ygdaS4yGk4XTkCOLcpAeIw0MVXfNOzLsytGBazlQ0rooJMN8KC6PQFok7qWS7FOY" width="730" height="589" /&gt;&lt;/p&gt; &lt;div dir="ltr"&gt;The example above targets the Windows account name ID format. Other name ID formats are supported but are outside the scope of this post. See &lt;a href="https://blogs.msdn.microsoft.com/card/2010/02/17/name-identifiers-in-saml-assertions/"&gt;this article&lt;/a&gt; on how to set up name IDs for persistent and transient formats.&lt;/div&gt; &lt;p&gt;The second rule will map the user email to the SAML response. In the &lt;em&gt;Add Transform Claim Rule&lt;/em&gt; window, select Send LDAP attributes as Claims rule type. You can add other attributes as needed:&lt;/p&gt; &lt;div dir="ltr"&gt;&lt;img class="alignnone size-full" src="https://lh4.googleusercontent.com/lskbFPTz1mUbpNcOJdME27smfEbbEUe_WHHu8vNRswxNhf3dmEEZwFyuXdXPPt3yLp1oUCD1E7kf9n6CCyeRxdExSJqJKcSMlJMLCOUMWo8KjaAqZTcell7cpIBqNSa52kCeb5Q" width="563" height="597" /&gt;&lt;/div&gt; &lt;div dir="ltr"&gt; &lt;p&gt;The third rule would send a group name if the user is a member of a named group. Again, start in the &lt;em&gt;Add Transform Claim Rule&lt;/em&gt; window and select &lt;em&gt;Send Group Membership&lt;/em&gt; as a &lt;em&gt;Claim rule&lt;/em&gt; type. Then enter the requested values in the field:&lt;/p&gt; &lt;/div&gt; &lt;div dir="ltr"&gt;&lt;img class="alignnone size-full" src="https://lh6.googleusercontent.com/HlWHP-WN3coMtQX8XR-lr7-ccsVACSesTC3fEeQrGUtEzTGmb7kjCspmwpGxvEGGGT7rqggJPvfZEqmxvEEMDg61hyqsNJcZXZwbMWlGsOjUcnzwyF0iC9jRfAafHAOfkxtkXAY" width="730" height="589" /&gt;&lt;/div&gt; &lt;div dir="ltr"&gt; &lt;div dir="ltr"&gt;This setup would send an attribute named Group in the SAML assertion with value managers if the authenticated user is a member of the DOMAIN\Managers group.&lt;/div&gt; &lt;/div&gt; &lt;div dir="ltr"&gt;&lt;/div&gt; &lt;div dir="ltr"&gt;Now install keycloak-saml-adapter in Wildfly,&lt;/div&gt; &lt;ul&gt; &lt;li&gt;Download the Wildfly client adapter from &lt;a href="https://www.keycloak.org/downloads.html"&gt;https://www.keycloak.org/downloads.html&lt;/a&gt;.&lt;/li&gt; &lt;li&gt;Unzip the saml-adapter at &lt;code&gt;$Wildfly_Home&lt;/code&gt;. In Linux, unzip can be done by executing the command &lt;code&gt;unzip keycloak-wildfly-adapter-dist.zip&lt;/code&gt;.&lt;/li&gt; &lt;li&gt;Post successful extraction a CLI script. &lt;code&gt;adapter-install-saml.cli&lt;/code&gt; will be present at &lt;code&gt;$Wildfly_Home/bin&lt;/code&gt;, which is required to be executed through the jboss-cli command, i.e., &lt;code&gt;$Wildfly_Home/bin/jboss-cli.sh --connect --file=adapter-install-saml.cli&lt;/code&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;div dir="ltr" style="text-align: left;"&gt; &lt;p id="fkrKUOp"&gt;&lt;img class=" alignnone size-full wp-image-619037 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d50e5c651b1a.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d50e5c651b1a.png" alt="" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d50e5c651b1a.png 676w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/img_5d50e5c651b1a-300x83.png 300w" sizes="(max-width: 676px) 100vw, 676px" /&gt;&lt;/p&gt; &lt;p&gt;Wildfly is now ready with keycloak-saml adapter. To enable authentication with AD FS through SAML protocol, the &lt;code&gt;keycloak-saml.xml&lt;/code&gt; file must be configured similarly to the picketlink.xml, as shown below, and placed at application&amp;#8217;s WEB-INF.&lt;/p&gt; &lt;pre&gt;&amp;#60;keycloak-saml-adapter xmlns="urn:keycloak:saml:adapter" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:keycloak:saml:adapter http://www.keycloak.org/schema/keycloak_saml_adapter_1_7.xsd"&amp;#62; &amp;#60;SP entityID="https://example.com:8443/saml-servlet-filter/" sslPolicy="EXTERNAL" nameIDPolicyFormat="urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName" logoutPage="/logout.jsp"&amp;#62; &amp;#60;IDP entityID="idp" signatureAlgorithm="RSA_SHA256"&amp;#62; &amp;#60;SingleSignOnService signRequest="false" validateResponseSignature="false" requestBinding="POST" bindingUrl="https://example.adfs.com/adfs/ls/"/&amp;#62; &amp;#60;SingleLogoutService signRequest="false" signResponse="false" validateRequestSignature="false" validateResponseSignature="false" requestBinding="POST" responseBinding="POST" postBindingUrl="https://example.adfs.com/adfs/ls/" redirectBindingUrl="https://example.adfs.com/adfs/ls/"/&amp;#62; &amp;#60;/IDP&amp;#62; &amp;#60;/SP&amp;#62; &amp;#60;/keycloak-saml-adapter&amp;#62;&lt;/pre&gt; &lt;p&gt;That&amp;#8217;s it. Now the keycloak-saml adapter is set up and ready to go.&lt;/p&gt; &lt;/div&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F27%2Fusing-keycloak-instead-of-picketlink-for-saml-based-authentication%2F&amp;#38;linkname=Using%20Keycloak%20instead%20of%20Picketlink%20for%20SAML-based%20authentication" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F27%2Fusing-keycloak-instead-of-picketlink-for-saml-based-authentication%2F&amp;#38;linkname=Using%20Keycloak%20instead%20of%20Picketlink%20for%20SAML-based%20authentication" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F27%2Fusing-keycloak-instead-of-picketlink-for-saml-based-authentication%2F&amp;#38;linkname=Using%20Keycloak%20instead%20of%20Picketlink%20for%20SAML-based%20authentication" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F27%2Fusing-keycloak-instead-of-picketlink-for-saml-based-authentication%2F&amp;#38;linkname=Using%20Keycloak%20instead%20of%20Picketlink%20for%20SAML-based%20authentication" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F27%2Fusing-keycloak-instead-of-picketlink-for-saml-based-authentication%2F&amp;#38;linkname=Using%20Keycloak%20instead%20of%20Picketlink%20for%20SAML-based%20authentication" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F27%2Fusing-keycloak-instead-of-picketlink-for-saml-based-authentication%2F&amp;#38;linkname=Using%20Keycloak%20instead%20of%20Picketlink%20for%20SAML-based%20authentication" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F27%2Fusing-keycloak-instead-of-picketlink-for-saml-based-authentication%2F&amp;#38;linkname=Using%20Keycloak%20instead%20of%20Picketlink%20for%20SAML-based%20authentication" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F27%2Fusing-keycloak-instead-of-picketlink-for-saml-based-authentication%2F&amp;#038;title=Using%20Keycloak%20instead%20of%20Picketlink%20for%20SAML-based%20authentication" data-a2a-url="https://developers.redhat.com/blog/2019/08/27/using-keycloak-instead-of-picketlink-for-saml-based-authentication/" data-a2a-title="Using Keycloak instead of Picketlink for SAML-based authentication"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/27/using-keycloak-instead-of-picketlink-for-saml-based-authentication/"&gt;Using Keycloak instead of Picketlink for SAML-based authentication&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/iQAC_9KfDOs" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;The Picketlink project is now a deprecated module in Red Hat JBoss Enterprise Application Platform (EAP), so there&amp;#8217;s a chance that Picketlink will no longer ship with the next release of EAP/Wildfly and that there will not be any fixes in the near future for the picketlink module. Picketlink, however, is now merged with Keycloak, [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/27/using-keycloak-instead-of-picketlink-for-saml-based-authentication/"&gt;Using Keycloak instead of Picketlink for SAML-based authentication&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/08/27/using-keycloak-instead-of-picketlink-for-saml-based-authentication/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">517667</post-id><dc:creator>Siddhartha De</dc:creator><dc:date>2019-08-27T07:00:26Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/08/27/using-keycloak-instead-of-picketlink-for-saml-based-authentication/</feedburner:origLink></entry><entry><title>DevNation Live: Kubernetes enterprise integration patterns with Camel K</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/nz2RntomQo0/" /><category term="Kubernetes" /><category term="Camel K" /><category term="kubernetes" /><author><name>Editorial Team</name></author><id>https://developers.redhat.com/blog/?p=614367</id><updated>2019-08-27T06:59:23Z</updated><published>2019-08-27T06:59:23Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/devnation/?page=0"&gt;DevNation Live tech talks&lt;/a&gt; are hosted by the Red Hat technologists who create our products. These sessions include real solutions and code and sample projects to help you get started. This talk from Nicola Ferraro and Luca Burgazzoli will explore &lt;a href="https://www.nicolaferraro.me/2018/10/15/introducing-camel-k/"&gt;Camel K&lt;/a&gt;, a lightweight integration platform that allows enterprise integration patterns to be used natively on any &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt; cluster.&lt;/p&gt; &lt;p&gt;&lt;span id="more-614367"&gt;&lt;/span&gt;When used in combination with &lt;a href="https://developers.redhat.com/topics/knative/"&gt;Knative&lt;/a&gt;, a framework that adds serverless building blocks to Kubernetes, and the subatomic execution environment of Quarkus, Camel K can mix serverless features such as auto-scaling, scaling to zero, and event-based communication with the outstanding integration capabilities of Apache Camel.&lt;/p&gt; &lt;p&gt;This session will show how Camel K works and provide examples to demonstrate how Camel K makes it easier to connect cloud services or enterprise applications using some of the 250+ components that Camel provides.&lt;/p&gt; &lt;p&gt;Watch the complete video:&lt;br /&gt; &lt;iframe src="https://www.youtube.com/embed/51x9BewGCYA" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h3&gt;&lt;b&gt;Learn more&lt;/b&gt;&lt;/h3&gt; &lt;p&gt;Join us at an upcoming&lt;a href="https://developers.redhat.com/events/"&gt; developer event&lt;/a&gt;, and see our collection of&lt;a href="https://developers.redhat.com/devnation/?page=0"&gt; past DevNation Live tech talks.&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F27%2Fdevnation-live-kubernetes-enterprise-integration-patterns-with-camel-k%2F&amp;#38;linkname=DevNation%20Live%3A%20Kubernetes%20enterprise%20integration%20patterns%20with%20Camel%20K" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F27%2Fdevnation-live-kubernetes-enterprise-integration-patterns-with-camel-k%2F&amp;#38;linkname=DevNation%20Live%3A%20Kubernetes%20enterprise%20integration%20patterns%20with%20Camel%20K" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F27%2Fdevnation-live-kubernetes-enterprise-integration-patterns-with-camel-k%2F&amp;#38;linkname=DevNation%20Live%3A%20Kubernetes%20enterprise%20integration%20patterns%20with%20Camel%20K" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F27%2Fdevnation-live-kubernetes-enterprise-integration-patterns-with-camel-k%2F&amp;#38;linkname=DevNation%20Live%3A%20Kubernetes%20enterprise%20integration%20patterns%20with%20Camel%20K" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F27%2Fdevnation-live-kubernetes-enterprise-integration-patterns-with-camel-k%2F&amp;#38;linkname=DevNation%20Live%3A%20Kubernetes%20enterprise%20integration%20patterns%20with%20Camel%20K" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F27%2Fdevnation-live-kubernetes-enterprise-integration-patterns-with-camel-k%2F&amp;#38;linkname=DevNation%20Live%3A%20Kubernetes%20enterprise%20integration%20patterns%20with%20Camel%20K" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F27%2Fdevnation-live-kubernetes-enterprise-integration-patterns-with-camel-k%2F&amp;#38;linkname=DevNation%20Live%3A%20Kubernetes%20enterprise%20integration%20patterns%20with%20Camel%20K" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F27%2Fdevnation-live-kubernetes-enterprise-integration-patterns-with-camel-k%2F&amp;#038;title=DevNation%20Live%3A%20Kubernetes%20enterprise%20integration%20patterns%20with%20Camel%20K" data-a2a-url="https://developers.redhat.com/blog/2019/08/27/devnation-live-kubernetes-enterprise-integration-patterns-with-camel-k/" data-a2a-title="DevNation Live: Kubernetes enterprise integration patterns with Camel K"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/27/devnation-live-kubernetes-enterprise-integration-patterns-with-camel-k/"&gt;DevNation Live: Kubernetes enterprise integration patterns with Camel K&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/nz2RntomQo0" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;DevNation Live tech talks are hosted by the Red Hat technologists who create our products. These sessions include real solutions and code and sample projects to help you get started. This talk from Nicola Ferraro and Luca Burgazzoli will explore Camel K, a lightweight integration platform that allows enterprise integration patterns to be used natively [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/27/devnation-live-kubernetes-enterprise-integration-patterns-with-camel-k/"&gt;DevNation Live: Kubernetes enterprise integration patterns with Camel K&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/08/27/devnation-live-kubernetes-enterprise-integration-patterns-with-camel-k/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">614367</post-id><dc:creator>Editorial Team</dc:creator><dc:date>2019-08-27T06:59:23Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/08/27/devnation-live-kubernetes-enterprise-integration-patterns-with-camel-k/</feedburner:origLink></entry><entry><title>10 Quarkus videos to get you up to speed with supersonic, subatomic Java</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/lNBmgr6np74/" /><category term="Quarkus" /><category term="Java" /><category term="kubernetes" /><author><name>Editorial Team</name></author><id>https://developers.redhat.com/blog/?p=620317</id><updated>2019-08-26T07:00:08Z</updated><published>2019-08-26T07:00:08Z</published><content type="html">&lt;p&gt;Maybe you’ve heard about &lt;a href="https://developers.redhat.com/blog/2019/05/09/create-your-first-quarkus-project-with-eclipse-ide-red-hat-codeready-studio/"&gt;Quarkus&lt;/a&gt;, also known as supersonic, subatomic Java. According to &lt;a href="https://quarkus.io/"&gt;&lt;span style="font-weight: 400;"&gt;Quarkus.io&lt;/span&gt;&lt;/a&gt;, it’s a &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt;-native Java stack tailored for GraalVM and OpenJDK HotSpot, crafted from the best of breed Java libraries and standards.&lt;/p&gt; &lt;p&gt;To help you learn more, we’ve rounded up 10 talks showing Quarkus in action. These videos will take your Quarkus knowledge to the next level.&lt;/p&gt; &lt;h3&gt;1. Introducing Quarkus: A next-generation Kubernetes native Java framework&lt;/h3&gt; &lt;p&gt;By Thomas Qvarnstrom and Jason Greene&lt;/p&gt; &lt;p&gt;The goal of Quarkus is to make Java a leading platform in Kubernetes and serverless environments, while offering developers a unified reactive and imperative programming model to optimally address a wider range of distributed application architectures. Learn more in this introduction to the project.&lt;/p&gt; &lt;p&gt;&lt;iframe src="https://www.youtube.com/embed/ZCsWi_641Rk" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h3&gt;2. Quarkus: Supersonic, subatomic Java&lt;/h3&gt; &lt;p&gt;By Burr Sutter&lt;/p&gt; &lt;p&gt;This &lt;a href="https://developers.redhat.com/devnation/?page=0"&gt;DevNation Live&lt;/a&gt; tutorial demonstrates how to use Quarkus to optimize your enterprise Java apps, your APIs, your microservices, and your serverless functions for a Kubernetes/OpenShift environment that is vastly smaller, faster, and more scalable.&lt;/p&gt; &lt;p&gt;&lt;iframe src="https://www.youtube.com/embed/7G_r1iyrn2c" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h3&gt;3. Quarkus and GraalVM: Booting Hibernate at supersonic speed, subatomic size&lt;/h3&gt; &lt;p&gt;By Sanne Grinovero&lt;/p&gt; &lt;p&gt;In this presentation, you’ll learn how Quarkus was created, how it works, and how it’s able to make complex libraries, such as Hibernate ORM, compatible with GraalVM native images.&lt;/p&gt; &lt;p&gt;&lt;iframe src="https://www.youtube.com/embed/za5CSBX-UME" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h3&gt;4. Taste of serverless application development&lt;/h3&gt; &lt;p&gt;By Marthen Luther&lt;/p&gt; &lt;p&gt;This talk shows how to create a simple Java application using Quarkus and deploy it as a serverless application on Knative.&lt;/p&gt; &lt;p&gt;&lt;iframe src="https://www.youtube.com/embed/-c1Sh-1uAeM" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h3&gt;5. Coding that sparks joy with Quarkus&lt;/h3&gt; &lt;p&gt;By Edson Yanaga&lt;/p&gt; &lt;p&gt;Create your first Quarkus project and learn why the tool sparks joy in the hearts of developers.&lt;/p&gt; &lt;p&gt;&lt;iframe src="https://www.youtube.com/embed/8r3ZV36ah4I" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h3&gt;6. The (a) future of Java and containers&lt;/h3&gt; &lt;p&gt;By Mark Little&lt;/p&gt; &lt;p&gt;This presentation takes you through the history of Java and explains why Quarkus is a game-changer for the future.&lt;/p&gt; &lt;p&gt;&lt;iframe src="https://www.youtube.com/embed/O085h6jKBWc" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h3&gt;7. Quarkus: Supersonic, subatomic Java&lt;/h3&gt; &lt;p&gt;By Dimitris Andreadis&lt;/p&gt; &lt;p&gt;Learn about the benefits of Quarkus, including developer joy, supersonic speed, and best of breed libraries and standards in this overview.&lt;/p&gt; &lt;p&gt;&lt;iframe src="https://www.youtube.com/embed/UWETnSFB0WA" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h3&gt;8. Subatomic reactive systems with Quarkus&lt;/h3&gt; &lt;p&gt;By Clement Escoffier&lt;/p&gt; &lt;p&gt;Quarkus provides a supersonic development experience and a subatomic execution environment thanks to its integration with GraalVM. This talk is about the reactive side of Quarkus and how to use it to implement reactive and data-streaming applications.&lt;/p&gt; &lt;p&gt;&lt;iframe src="https://www.youtube.com/embed/trwJxZawglc" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h3&gt;9. Build Eclipse MicroProfile apps quickly with Quarkus&lt;/h3&gt; &lt;p&gt;By John Clingan&lt;/p&gt; &lt;p&gt;Combining Eclipse MicroProfile and Quarkus lets developers deliver feature-rich, container-based MicroProfile applications that start in under tens of milliseconds. This talk live-codes a container-based MicroProfile application that is deployed to Kubernetes.&lt;/p&gt; &lt;p&gt;&lt;iframe src="https://www.youtube.com/embed/hReKM6rmcho" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h3&gt;10. Java, turbocharged&lt;/h3&gt; &lt;p&gt;By Marcus Biel&lt;/p&gt; &lt;p&gt;This talk demonstrates how to use Quarkus to create super small, super fast Java containers, which can be a game-changer, especially in a serverless environment.&lt;/p&gt; &lt;p&gt;&lt;iframe src="https://www.youtube.com/embed/eqUApOrYeS8" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F26%2F10-quarkus-videos-to-get-you-up-to-speed-with-supersonic-subatomic-java%2F&amp;#38;linkname=10%20Quarkus%20videos%20to%20get%20you%20up%20to%20speed%20with%20supersonic%2C%20subatomic%20Java" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F26%2F10-quarkus-videos-to-get-you-up-to-speed-with-supersonic-subatomic-java%2F&amp;#38;linkname=10%20Quarkus%20videos%20to%20get%20you%20up%20to%20speed%20with%20supersonic%2C%20subatomic%20Java" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F26%2F10-quarkus-videos-to-get-you-up-to-speed-with-supersonic-subatomic-java%2F&amp;#38;linkname=10%20Quarkus%20videos%20to%20get%20you%20up%20to%20speed%20with%20supersonic%2C%20subatomic%20Java" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F26%2F10-quarkus-videos-to-get-you-up-to-speed-with-supersonic-subatomic-java%2F&amp;#38;linkname=10%20Quarkus%20videos%20to%20get%20you%20up%20to%20speed%20with%20supersonic%2C%20subatomic%20Java" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F26%2F10-quarkus-videos-to-get-you-up-to-speed-with-supersonic-subatomic-java%2F&amp;#38;linkname=10%20Quarkus%20videos%20to%20get%20you%20up%20to%20speed%20with%20supersonic%2C%20subatomic%20Java" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F26%2F10-quarkus-videos-to-get-you-up-to-speed-with-supersonic-subatomic-java%2F&amp;#38;linkname=10%20Quarkus%20videos%20to%20get%20you%20up%20to%20speed%20with%20supersonic%2C%20subatomic%20Java" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F26%2F10-quarkus-videos-to-get-you-up-to-speed-with-supersonic-subatomic-java%2F&amp;#38;linkname=10%20Quarkus%20videos%20to%20get%20you%20up%20to%20speed%20with%20supersonic%2C%20subatomic%20Java" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F08%2F26%2F10-quarkus-videos-to-get-you-up-to-speed-with-supersonic-subatomic-java%2F&amp;#038;title=10%20Quarkus%20videos%20to%20get%20you%20up%20to%20speed%20with%20supersonic%2C%20subatomic%20Java" data-a2a-url="https://developers.redhat.com/blog/2019/08/26/10-quarkus-videos-to-get-you-up-to-speed-with-supersonic-subatomic-java/" data-a2a-title="10 Quarkus videos to get you up to speed with supersonic, subatomic Java"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/26/10-quarkus-videos-to-get-you-up-to-speed-with-supersonic-subatomic-java/"&gt;10 Quarkus videos to get you up to speed with supersonic, subatomic Java&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/lNBmgr6np74" height="1" width="1" alt=""/&gt;</content><summary type="html">&lt;p&gt;Maybe you’ve heard about Quarkus, also known as supersonic, subatomic Java. According to Quarkus.io, it’s a Kubernetes-native Java stack tailored for GraalVM and OpenJDK HotSpot, crafted from the best of breed Java libraries and standards. To help you learn more, we’ve rounded up 10 talks showing Quarkus in action. These videos will take your Quarkus [&amp;#8230;]&lt;/p&gt; &lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/08/26/10-quarkus-videos-to-get-you-up-to-speed-with-supersonic-subatomic-java/"&gt;10 Quarkus videos to get you up to speed with supersonic, subatomic Java&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;</summary><wfw:commentRss xmlns:wfw="http://wellformedweb.org/CommentAPI/">https://developers.redhat.com/blog/2019/08/26/10-quarkus-videos-to-get-you-up-to-speed-with-supersonic-subatomic-java/feed/</wfw:commentRss><slash:comments xmlns:slash="http://purl.org/rss/1.0/modules/slash/">0</slash:comments><post-id xmlns="com-wordpress:feed-additions:1">620317</post-id><dc:creator>Editorial Team</dc:creator><dc:date>2019-08-26T07:00:08Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/08/26/10-quarkus-videos-to-get-you-up-to-speed-with-supersonic-subatomic-java/</feedburner:origLink></entry></feed>
