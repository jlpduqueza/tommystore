<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Interacting with native libraries in .NET Core 3.0</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/k4XFvqN13yE/" /><category term=".NET Core" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><author><name>Tom Deseyn</name></author><id>searchisko:content:id:jbossorg_blog-interacting_with_native_libraries_in_net_core_3_0</id><updated>2019-09-06T13:38:43Z</updated><published>2019-09-06T13:38:43Z</published><content type="html">&lt;p&gt;&lt;code&gt;NativeLibrary&lt;/code&gt; is a new class in .NET Core 3.0 for interacting with native libraries. In this article, we&amp;#8217;ll take a closer look.&lt;/p&gt; &lt;h2&gt;DllImport&lt;/h2&gt; &lt;p&gt;.NET makes it simple to call functions from a native library using &lt;code&gt;DllImport&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;[DllImport("mylibrary")] public static extern int foo(); &lt;/pre&gt; &lt;p&gt;This code makes available the function &lt;code&gt;foo&lt;/code&gt; from the native library &lt;code&gt;mylibrary&lt;/code&gt;. This function accepts no arguments and returns an &lt;code&gt;int&lt;/code&gt;. .NET takes care of marshaling the argument types. It is possible to use managed types (like strings), which will be automagically marshaled.&lt;span id="more-622537"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;When we use this function, .NET Core tries to find &lt;code&gt;mylibrary&lt;/code&gt;. It looks in the application folder and in the system library folders. When looking, it tries variations of the name. For example, on Windows, it adds a &lt;code&gt;.dll&lt;/code&gt; extension; on Linux, it adds an &lt;code&gt;.so&lt;/code&gt; extension. The lookup also takes into account the current platform based on the &lt;a href="https://docs.microsoft.com/en-us/dotnet/core/rid-catalog" target="_blank" rel="noopener noreferrer"&gt;Runtime IDentifier&lt;/a&gt; (RID). An application can include libraries for different runtime identifiers (organized in rid-folders), and the most appropriate library will be used.&lt;/p&gt; &lt;p&gt;The main limitation of &lt;code&gt;DllImport&lt;/code&gt; is that the library name and the symbol names are fixed at compile time. In many cases, especially when you&amp;#8217;re building the library yourself and including it with the application, this limitation isn&amp;#8217;t an issue.&lt;/p&gt; &lt;h2&gt;NativeLibrary&lt;/h2&gt; &lt;p&gt;&lt;code&gt;NativeLibrary&lt;/code&gt; is a static class with only a couple of methods:&lt;/p&gt; &lt;pre&gt;void Free(IntPtr handle) IntPtr GetExport(IntPtr handle, String name) IntPtr Load(String libraryPath) IntPtr Load(String libraryName, Assembly, DllImportSearchPath?) void SetDllImportResolver(Assembly, DllImportResolver) IntPtr TryGetExport(IntPtr handle, String name, out IntPtr address) IntPtr TryLoad(String libraryPath, out IntPtr handle) IntPtr TryLoad(String libraryName, Assembly, DllImportSearchPath?, out IntPtr handle) &lt;/pre&gt; &lt;p&gt;The first thing we can do is control the library we use in the &lt;code&gt;DllImport&lt;/code&gt;, by providing a &lt;code&gt;DllImportResolver&lt;/code&gt; delegate for our assembly. The &lt;code&gt;DllImportResolver&lt;/code&gt; has the following signature:&lt;/p&gt; &lt;pre&gt;public delegate IntPtr DllImportResolver(string libraryName, Assembly assembly, DllImportSearchPath? searchPath); &lt;/pre&gt; &lt;p&gt;Its arguments provide us with the context of the &lt;code&gt;DllImport&lt;/code&gt; and as a return value we must provide an &lt;code&gt;IntPtr&lt;/code&gt; for the library. We get this &lt;code&gt;IntPtr&lt;/code&gt; using the &lt;code&gt;Load&lt;/code&gt; methods. The &lt;code&gt;Load(string)&lt;/code&gt; method loads the library at a specific path. The other &lt;code&gt;Load&lt;/code&gt; method provides the default &lt;code&gt;DllImport&lt;/code&gt; loading logic. Let’s see how we can use this information:&lt;/p&gt; &lt;pre&gt;static class Library { const string MyLibrary = "mylibrary"; static Library() { NativeLibrary.SetDllImportResolver(typeof(Library).Assembly, ImportResolver); } private static IntPtr ImportResolver(string libraryName, Assembly assembly, DllImportSearchPath? searchPath) { IntPtr libHandle = IntPtr.Zero; if (libraryName == MyLibrary) { // Try using the system library 'libmylibrary.so.5' NativeLibrary.TryLoad("libmylibrary.so.5", assembly, DllImportSearchPath.System32, out libHandle); } return libHandle; } [DllImport(MyLibrary)] public static extern int foo(); } &lt;/pre&gt; &lt;p&gt;In this example, we register a &lt;code&gt;DllImportResolver&lt;/code&gt; for the assembly. In our resolver, we try loading &lt;code&gt;libmylibrary.so.5&lt;/code&gt; from the system libraries. If it fails, we fall back to the default &lt;code&gt;DllImport&lt;/code&gt; resolution by returning &lt;code&gt;IntPtr.Zero&lt;/code&gt;. This result gives us the usability of &lt;code&gt;DllImport&lt;/code&gt; with the flexibility of picking a specific library at runtime.&lt;/p&gt; &lt;p&gt;Another thing we can do using &lt;code&gt;NativeLibrary&lt;/code&gt; is directly resolve symbols using &lt;code&gt;GetExport&lt;/code&gt;/&lt;code&gt;TryGetExport&lt;/code&gt;. Let&amp;#8217;s look at an example:&lt;/p&gt; &lt;pre&gt;class Library : IDisposable { private readonly IntPtr _libHandle; private readonly Func&amp;#60;int&amp;#62; _foo; private bool _disposed; public Library() { _libHandle = NativeLibrary.Load("mylibrary", typeof(Library).Assembly, DllImportSearchPath.System32); if (NativeLibrary.TryGetExport(_libHandle, "foo", out IntPtr fooHandle)) { _foo = Marshal.GetDelegateForFunctionPointer&amp;#60;Func&amp;#60;int&amp;#62;&amp;#62;(fooHandle); } else { _foo = () =&amp;#62; { throw new NotSupportedException("'foo' not found"); }; } } ~Library() { Dispose(false); } public int foo() { ThrowIfDisposed(); return _foo(); } public void Dispose() { Dispose(true); GC.SuppressFinalize(this); } protected virtual void Dispose(bool disposing) { if (!_disposed) { _disposed = true; NativeLibrary.Free(_libHandle); } } private void ThrowIfDisposed() { if (_disposed) { ThrowObjectDisposedException(); } } private void ThrowObjectDisposedException() =&amp;#62; throw new ObjectDisposedException(typeof(Library).FullName); } &lt;/pre&gt; &lt;p&gt;Here we&amp;#8217;ve replaced the &lt;code&gt;DllImport&lt;/code&gt; with calls to &lt;code&gt;NativeLibrary.Load&lt;/code&gt;, &lt;code&gt;TryGetExport&lt;/code&gt; and &lt;code&gt;Marshal.GetDelegateForFunctionPointer&lt;/code&gt;. There&amp;#8217;s more code involved, but in return we now have full control over the library we are using and can detect and use its symbols dynamically.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;In this article, you’ve learned about the new &lt;code&gt;NativeLibrary&lt;/code&gt; class and how you can use it—instead of the &lt;code&gt;DllImport&lt;/code&gt; attribute—when you need more control over the library resolution and the symbols you use.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F06%2Finteracting-with-native-libraries-in-net-core-3-0%2F&amp;#38;linkname=Interacting%20with%20native%20libraries%20in%20.NET%20Core%203.0" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F06%2Finteracting-with-native-libraries-in-net-core-3-0%2F&amp;#38;linkname=Interacting%20with%20native%20libraries%20in%20.NET%20Core%203.0" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F06%2Finteracting-with-native-libraries-in-net-core-3-0%2F&amp;#38;linkname=Interacting%20with%20native%20libraries%20in%20.NET%20Core%203.0" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F06%2Finteracting-with-native-libraries-in-net-core-3-0%2F&amp;#38;linkname=Interacting%20with%20native%20libraries%20in%20.NET%20Core%203.0" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F06%2Finteracting-with-native-libraries-in-net-core-3-0%2F&amp;#38;linkname=Interacting%20with%20native%20libraries%20in%20.NET%20Core%203.0" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F06%2Finteracting-with-native-libraries-in-net-core-3-0%2F&amp;#38;linkname=Interacting%20with%20native%20libraries%20in%20.NET%20Core%203.0" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F06%2Finteracting-with-native-libraries-in-net-core-3-0%2F&amp;#38;linkname=Interacting%20with%20native%20libraries%20in%20.NET%20Core%203.0" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F06%2Finteracting-with-native-libraries-in-net-core-3-0%2F&amp;#038;title=Interacting%20with%20native%20libraries%20in%20.NET%20Core%203.0" data-a2a-url="https://developers.redhat.com/blog/2019/09/06/interacting-with-native-libraries-in-net-core-3-0/" data-a2a-title="Interacting with native libraries in .NET Core 3.0"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/09/06/interacting-with-native-libraries-in-net-core-3-0/"&gt;Interacting with native libraries in .NET Core 3.0&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/k4XFvqN13yE" height="1" width="1" alt=""/&gt;</content><summary>NativeLibrary is a new class in .NET Core 3.0 for interacting with native libraries. In this article, we’ll take a closer look. DllImport .NET makes it simple to call functions from a native library using DllImport: [DllImport("mylibrary")] public static extern int foo(); This code makes available the function foo from the native library mylibrary. This function accepts no arguments and returns a...</summary><dc:creator>Tom Deseyn</dc:creator><dc:date>2019-09-06T13:38:43Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/09/06/interacting-with-native-libraries-in-net-core-3-0/</feedburner:origLink></entry><entry><title>New Security Features in WildFly 18</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/uxT3c6UaBk4/new-security-features-in-wildfly-18" /><category term="Elytron" scheme="searchisko:content:tags" /><category term="feed_group_name_aggregated" scheme="searchisko:content:tags" /><category term="feed_name_fjuma" scheme="searchisko:content:tags" /><category term="new features" scheme="searchisko:content:tags" /><category term="wildfly 18" scheme="searchisko:content:tags" /><author><name>Farah Juma</name></author><id>searchisko:content:id:jbossorg_blog-new_security_features_in_wildfly_18</id><updated>2019-09-06T13:37:44Z</updated><published>2019-09-05T23:08:58Z</published><content type="html">&lt;!-- [DocumentBodyStart:9ceaa560-8018-4646-a361-50d4fcb4c01b] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;p&gt;Since WildFly 18 will be released in a few weeks, just wanted to highlight the new security features that will be included in this release.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Certificate Authority Configuration&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Since WildFly 14, it's possible to obtain and manage certificates from Let&amp;#8217;s Encrypt using the WildFly CLI. WildFly 18 now adds the ability to make use of any certificate authority that implements the &lt;a class="jive-link-external-small" href="https://tools.ietf.org/html/rfc8555" rel="nofollow"&gt;Automatic Certificate Management Environment (ACME) protocol&lt;/a&gt;. More details can be found in this &lt;a class="jive-link-external-small" href="https://dvilkola.wordpress.com/2019/06/11/obtain-and-manage-certificates-from-any-server-instance-that-implements-acme-specification-using-the-wildfly-cli/" rel="nofollow"&gt;blog post&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Simplified SSL Configuration with Let&amp;#8217;s Encrypt&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;It is now possible to use the &lt;span style="font-family: 'courier new', courier;"&gt;ssl enable-ssl-management&lt;/span&gt; and &lt;span style="font-family: 'courier new', courier;"&gt;enable-ssl-http-server&lt;/span&gt; commands to easily enable one-way and two-way SSL using certificates obtained automatically from Let&amp;#8217;s Encrypt. Details on how to get started with these commands can be found &lt;a class="jive-link-external-small" href="https://github.com/wildfly/wildfly/blob/master/docs/src/main/asciidoc/_admin-guide/CLI_Recipes.adoc#security-commands" rel="nofollow"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;SSL Certificate Revocation Checking using OCSP&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Certificate revocation checks can now be performed using the Online Certificate Status Protocol (OCSP) in addition to certificate revocation lists (CRL). Details on how to configure an Elytron trust manager to perform certificate revocation checks can be found &lt;a class="jive-link-external-small" href="https://github.com/wildfly/wildfly/blob/master/docs/src/main/asciidoc/_elytron/Using_the_Elytron_Subsystem.adoc#configure-certificate-revocation-in-trust-manager" rel="nofollow"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Enhanced X509Certificate Identity Mapping&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Prior to WildFly 18, the mapping of an X.509 certificate chain to an identity was done by taking the subject distinguished name from the first certificate in the X.509 certificate chain as an X.500 principal. It is now possible to map an X.509 certificate chain to an identity by using a subject alternative name from the first certificate in the X.509 certificate chain. For a complete overview of this feature, take a look at this &lt;a class="jive-link-blog-small" data-containerId="5158" data-containerType="37" data-objectId="6299" data-objectType="38" href="https://developer.jboss.org/people/fjuma/blog/2019/06/11/mapping-an-x509-cert-to-an-identity-using-a-subject-alt-name"&gt;blog post&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Identity Attribute Aggregation&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Elytron already had a very flexible approach for assigning roles and permissions to an identity based on arbitrary attributes loaded by a security realm. This feature adds support for loading the attributes from multiple security realms and aggregating the results together. Check out this &lt;a class="jive-link-external-small" href="http://darranl.blogspot.com/2019/06/wildfly-elytron-aggregation-of.html" rel="nofollow"&gt;blog post&lt;/a&gt; for more details on this feature.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Aggregate Realm Principal Transformer Configuration&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;It is now possible to configure a principal transformer for an aggregate realm that will be used to transform the principal after the authentication identity is obtained but before the authorization identity is obtained. A complete example on how to configure and make use of this principal transformer can be found &lt;a class="jive-link-blog-small" data-containerId="5403" data-containerType="37" data-objectId="6318" data-objectType="38" href="https://developer.jboss.org/people/aabdelsa/blog/2019/09/06/configuring-an-aggregate-realm-with-a-principal-transformer"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Enhanced Audit Logging&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Support for both &lt;a class="jive-link-external-small" href="https://tools.ietf.org/html/rfc5424" rel="nofollow"&gt;RFC 5424&lt;/a&gt; and &lt;a class="jive-link-external-small" href="https://tools.ietf.org/html/rfc3164" rel="nofollow"&gt;RFC 3164&lt;/a&gt; have now been added to Elytron&amp;#8217;s audit logging capabilities as well as the ability to configure how many times Elytron should attempt to send messages to a syslog server when an error is encountered during sending. More details on this feature can be found &lt;a class="jive-link-external-small" href="https://justinwildfly.blogspot.com/2019/08/enhanced-audit-logging-in-wildfly.html" rel="nofollow"&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Masked Password Support&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;It is now possible to specify masked passwords when using the Elytron Authentication Client. Check out this &lt;a class="jive-link-blog-small" data-containerId="5403" data-containerType="37" data-objectId="6322" data-objectType="38" href="https://developer.jboss.org/people/aabdelsa/blog/2019/09/05/support-for-masked-passwords-in-the-client-xml-configuration"&gt;blog post&lt;/a&gt; for examples on how to make use of masked passwords.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Where to Find More Information&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;As always, be sure to check out our &lt;a class="jive-link-wiki-small" data-containerId="2303" data-containerType="14" data-objectId="56082" data-objectType="102" href="https://developer.jboss.org/docs/DOC-56082"&gt;blog posts&lt;/a&gt; page, where we collect references to all our blog posts on Elytron features. If there is an Elytron topic you&amp;#8217;d like to see a blog post on, feel free to leave a comment on that page to ask for it. Questions on Elytron are also welcome on WildFly&amp;#8217;s &lt;a class="jivecontainerTT-hover-container jive-link-community-small" data-containerId="1" data-containerType="14" data-objectId="2303" data-objectType="14" href="https://developer.jboss.org/community/wildfly?view=discussions"&gt;user forums&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;To learn more about the Elytron subsystem, take a look at the Elytron &lt;a class="jive-link-external-small" href="https://github.com/wildfly/wildfly/blob/master/docs/src/main/asciidoc/_elytron/Using_the_Elytron_Subsystem.adoc" rel="nofollow"&gt;documentation&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:9ceaa560-8018-4646-a361-50d4fcb4c01b] --&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/uxT3c6UaBk4" height="1" width="1" alt=""/&gt;</content><summary>Since WildFly 18 will be released in a few weeks, just wanted to highlight the new security features that will be included in this release.   Certificate Authority Configuration   Since WildFly 14, it's possible to obtain and manage certificates from Let’s Encrypt using the WildFly CLI. WildFly 18 now adds the ability to make use of any certificate authority that implements the Automatic Certifica...</summary><dc:creator>Farah Juma</dc:creator><dc:date>2019-09-05T23:08:58Z</dc:date><feedburner:origLink>https://developer.jboss.org/people/fjuma/blog/2019/09/05/new-security-features-in-wildfly-18</feedburner:origLink></entry><entry><title>Upcoming support for automatic updates of credential stores</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/1U2-HX4nE-o/automatic-updates-of-credential-stores" /><category term="automatic updates" scheme="searchisko:content:tags" /><category term="credential store" scheme="searchisko:content:tags" /><category term="feed_group_name_aggregated" scheme="searchisko:content:tags" /><category term="feed_name_fjuma" scheme="searchisko:content:tags" /><category term="wildfly elytron" scheme="searchisko:content:tags" /><author><name>Farah Juma</name></author><id>searchisko:content:id:jbossorg_blog-upcoming_support_for_automatic_updates_of_credential_stores</id><updated>2019-09-05T22:18:35Z</updated><published>2019-09-05T22:18:35Z</published><content type="html">&lt;!-- [DocumentBodyStart:d077c36e-540b-467d-9853-96cdb6ca16e9] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;p&gt;One of the new security features that we have been working on is adding support for automatic updates of credential stores. Although this feature didn&amp;#8217;t make it into WildFly 18, the plan is to have it included in WildFly 19. This blog post will give an introduction to this new feature.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Credential References&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;A credential store allows for secure storage of credentials. It is possible to populate and manipulate a credential store using the WildFly CLI. Once a credential has been added to a credential store, it is possible to reference the stored credential. In particular, many resources across WildFly&amp;#8217;s management model support a &lt;span style="font-family: 'courier new', courier;"&gt;credential-reference&lt;/span&gt; attribute that can be used either to specify a &lt;span style="font-family: 'courier new', courier;"&gt;clear-text&lt;/span&gt; password or to cross-reference a credential from a configured credential store. As an example, when configuring a &lt;span style="font-family: 'courier new', courier;"&gt;key-store&lt;/span&gt; in the Elytron subsystem, a &lt;span style="font-family: 'courier new', courier;"&gt;credential-reference&lt;/span&gt; is used to specify the credential that should be used to access the keystore. This can be configured as follows:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;First, let's configure a &lt;span style="font-family: 'courier new', courier;"&gt;credential-store&lt;/span&gt; (note that the &lt;span style="font-family: 'courier new', courier;"&gt;mycredstore.cs&lt;/span&gt; file doesn&amp;#8217;t need to exist yet):&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:ed5f902e-0c87-48f2-85d4-eae8344428a2][excluded]--&gt;&lt;pre class="plain" name="code"&gt;/subsystem=elytron/credential-store=myCredStore:add(location=mycredstore.cs, relative-to=jboss.server.config.dir, credential-reference={clear-text=StorePassword}, create=true)&lt;/pre&gt;&lt;!--[CodeBlockEnd:ed5f902e-0c87-48f2-85d4-eae8344428a2]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Next, we'll add a credential to our &lt;span style="font-family: 'courier new', courier;"&gt;credential-store&lt;/span&gt;:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:ff6405ac-87f4-4ec2-9fc8-4ad3718326e3][excluded]--&gt;&lt;pre class="plain" name="code"&gt;/subsystem=elytron/credential-store=myCredStore:add-alias(alias=example, secret-value=mySecretPassword)&lt;/pre&gt;&lt;!--[CodeBlockEnd:ff6405ac-87f4-4ec2-9fc8-4ad3718326e3]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Finally, we can configure a &lt;span style="font-family: 'courier new', courier;"&gt;key-store&lt;/span&gt; and reference this newly added credential:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:a8cd1ba1-e1f4-449a-b73c-86906fdb6efb][excluded]--&gt;&lt;pre class="plain" name="code"&gt;/subsystem=elytron/key-store=myKS:add(relative-to=jboss.server.config.dir, path=my.keystore, type=JCEKS, credential-reference={store=myCredStore, alias=example})&lt;/pre&gt;&lt;!--[CodeBlockEnd:a8cd1ba1-e1f4-449a-b73c-86906fdb6efb]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Notice that the &lt;span style="font-family: 'courier new', courier;"&gt;credential-reference&lt;/span&gt; has two attributes, &lt;span style="font-family: 'courier new', courier;"&gt;store&lt;/span&gt; and &lt;span style="font-family: 'courier new', courier;"&gt;alias&lt;/span&gt;. The &lt;span style="font-family: 'courier new', courier;"&gt;store&lt;/span&gt; attribute indicates the credential store. The &lt;span style="font-family: 'courier new', courier;"&gt;alias&lt;/span&gt; attribute indicates the entry in the credential store that holds our credential.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Automatic Updates&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Instead of needing to first add a credential to a configured credential store in order to reference it from a &lt;span style="font-family: 'courier new', courier;"&gt;credential-reference&lt;/span&gt;, WildFly 19 will add the ability to automatically add a credential to a previously defined credential store by specifying both the &lt;span style="font-family: 'courier new', courier;"&gt;store&lt;/span&gt; and &lt;span style="font-family: 'courier new', courier;"&gt;clear-text&lt;/span&gt; attributes for a &lt;span style="font-family: 'courier new', courier;"&gt;credential-reference&lt;/span&gt;. In particular, when configuring a new &lt;span style="font-family: 'courier new', courier;"&gt;credential-reference&lt;/span&gt; with both the &lt;span style="font-family: 'courier new', courier;"&gt;store&lt;/span&gt; and &lt;span style="font-family: 'courier new', courier;"&gt;clear-text&lt;/span&gt; attributes specified, the following will happen:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;If the &lt;span style="font-family: 'courier new', courier;"&gt;alias&lt;/span&gt; attribute is also specified, one of the following will occur:&lt;ul&gt;&lt;li&gt;If the configured credential store does not contain an entry for the given &lt;span style="font-family: 'courier new', courier;"&gt;alias&lt;/span&gt;, a new entry will be added to the credential store to hold the clear text password that was specified. The &lt;span style="font-family: 'courier new', courier;"&gt;clear-text&lt;/span&gt; attribute will then be removed from the management model.&lt;/li&gt;&lt;li&gt;If the credential store does contain an entry for the given &lt;span style="font-family: 'courier new', courier;"&gt;alias&lt;/span&gt;, the existing credential will be replaced with the clear text password that was specified. The &lt;span style="font-family: 'courier new', courier;"&gt;clear-text&lt;/span&gt; attribute will then be removed from the management model.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;If the &lt;span style="font-family: 'courier new', courier;"&gt;alias&lt;/span&gt; attribute is not specified, an alias will be generated and a new entry will be added to the credential store to hold the clear text password that was specified. The &lt;span style="font-family: 'courier new', courier;"&gt;clear-text&lt;/span&gt; attribute will then be removed from the management model.&lt;/li&gt;&lt;/ul&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;As an example, let&amp;#8217;s configure another &lt;span style="font-family: 'courier new', courier;"&gt;credential-store&lt;/span&gt; in the Elytron subsystem:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:872f4a79-a301-4f36-97f0-b2ede388248d][excluded]--&gt;&lt;pre class="plain" name="code"&gt;/subsystem=elytron/credential-store=myNewCredStore:add(location=mynewcredstore.cs, relative-to=jboss.server.config.dir, credential-reference={clear-text=StorePassword}, create=true)&lt;/pre&gt;&lt;!--[CodeBlockEnd:872f4a79-a301-4f36-97f0-b2ede388248d]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Now, going back to our keystore example, from WildFly 19, it will be possible to configure a &lt;span style="font-family: 'courier new', courier;"&gt;key-store&lt;/span&gt; with a &lt;span style="font-family: 'courier new', courier;"&gt;credential-reference&lt;/span&gt; that specifies the &lt;span style="font-family: 'courier new', courier;"&gt;store&lt;/span&gt;, &lt;span style="font-family: 'courier new', courier;"&gt;alias&lt;/span&gt;, and &lt;span style="font-family: 'courier new', courier;"&gt;clear-text&lt;/span&gt; attributes as follows:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:f62fcf6c-3d2e-425e-b2b7-b1f2b106c6c9][excluded]--&gt;&lt;pre class="plain" name="code"&gt;/subsystem=elytron/key-store=newKS:add(relative-to=jboss.server.config.dir, path=new.keystore, type=JCEKS, credential-reference={store=myNewCredStore, alias=myNewAlias, clear-text=myNewPassword}) { &amp;#160;&amp;#160;&amp;#160; "outcome" =&amp;gt; "success", &amp;#160;&amp;#160;&amp;#160; "result" =&amp;gt; {"credential-store-update" =&amp;gt; { &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "status" =&amp;gt; "new-entry-added", &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "new-alias" =&amp;gt; "myNewAlias" &amp;#160;&amp;#160;&amp;#160; }} }&lt;/pre&gt;&lt;!--[CodeBlockEnd:f62fcf6c-3d2e-425e-b2b7-b1f2b106c6c9]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;The above command will result in a new entry being added to our credential store, &lt;span style="font-family: 'courier new', courier;"&gt;myNewCredStore&lt;/span&gt;, with alias &lt;span style="font-family: 'courier new', courier;"&gt;myNewAlias&lt;/span&gt; and credential &lt;span style="font-family: 'courier new', courier;"&gt;myNewPassword&lt;/span&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;When updating an existing &lt;span style="font-family: 'courier new', courier;"&gt;credential-reference&lt;/span&gt; attribute that contains both the &lt;span style="font-family: 'courier new', courier;"&gt;alias&lt;/span&gt; and &lt;span style="font-family: 'courier new', courier;"&gt;store&lt;/span&gt; attributes to also specify the &lt;span style="font-family: 'courier new', courier;"&gt;clear-text&lt;/span&gt; attribute, the existing credential in the configured credential store will be replaced with the clear text password that was specified. The &lt;span style="font-family: 'courier new', courier;"&gt;clear-text&lt;/span&gt; attribute will then be removed from the management model. As an example, the following command will result in updating the credential for the &lt;span style="font-family: 'courier new', courier;"&gt;myNewAlias&lt;/span&gt; entry that was just added to our credential store:&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;!--[CodeBlockStart:64a6c62c-7575-4e1f-82bf-0aff987f054b][excluded]--&gt;&lt;pre class="plain" name="code"&gt;/subsystem=elytron/key-store=newKS:write-attribute(name=credential-reference.clear-text,value=myUpdatedPassword) { &amp;#160;&amp;#160;&amp;#160; "outcome" =&amp;gt; "success", &amp;#160;&amp;#160;&amp;#160; "result" =&amp;gt; {"credential-store-update" =&amp;gt; {"status" =&amp;gt; "existing-entry-updated"}}, &amp;#160;&amp;#160;&amp;#160; "response-headers" =&amp;gt; { &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "operation-requires-reload" =&amp;gt; true, &amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; "process-state" =&amp;gt; "reload-required" &amp;#160;&amp;#160;&amp;#160; } }&lt;/pre&gt;&lt;!--[CodeBlockEnd:64a6c62c-7575-4e1f-82bf-0aff987f054b]--&gt;&lt;div style="display:none;"&gt;&lt;/div&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Summary&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;This blog post has given an introduction to the upcoming support for automatic updates of credential stores.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;For more details on this feature and updates on the status of this feature, keep an eye on &lt;a class="jive-link-external-small" href="https://issues.jboss.org/browse/WFCORE-4150" rel="nofollow"&gt;WFCORE-4150&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:d077c36e-540b-467d-9853-96cdb6ca16e9] --&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/1U2-HX4nE-o" height="1" width="1" alt=""/&gt;</content><summary>One of the new security features that we have been working on is adding support for automatic updates of credential stores. Although this feature didn’t make it into WildFly 18, the plan is to have it included in WildFly 19. This blog post will give an introduction to this new feature.   Credential References   A credential store allows for secure storage of credentials. It is possible to populate...</summary><dc:creator>Farah Juma</dc:creator><dc:date>2019-09-05T22:18:35Z</dc:date><feedburner:origLink>https://developer.jboss.org/people/fjuma/blog/2019/09/05/automatic-updates-of-credential-stores</feedburner:origLink></entry><entry><title>Red Hat OpenShift 4 on your laptop: Introducing Red Hat CodeReady Containers</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/fAlzLX4vHE8/" /><category term="cloud" scheme="searchisko:content:tags" /><category term="CodeReady Workspaces" scheme="searchisko:content:tags" /><category term="container" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift" scheme="searchisko:content:tags" /><author><name>CodeReady Container Team</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_openshift_4_on_your_laptop_introducing_red_hat_codeready_containers</id><updated>2019-09-05T13:35:37Z</updated><published>2019-09-05T13:35:37Z</published><content type="html">&lt;p&gt;We are pleased to announce that Red Hat CodeReady Containers is now available as a Developer Preview. CodeReady Containers brings a minimal, preconfigured OpenShift 4.1 or newer cluster to your local laptop or desktop computer for development and testing purposes. CodeReady Containers supports native hypervisors for Linux, macOS, and Windows 10. You can download CodeReady Containers from &lt;a href="https://cloud.redhat.com/openshift/install/crc/installer-provisioned?intcmp=7013a000002CtetAAC"&gt;the CodeReady Containers product page on cloud.redhat.com&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;CodeReady Containers is designed for local development and testing on an OpenShift 4 cluster. For running an OpenShift 3 cluster locally, see &lt;a href="https://developers.redhat.com/products/cdk/overview"&gt;Red Hat Container Development Kit (CDK)&lt;/a&gt; or &lt;a href="https://github.com/minishift/minishift"&gt;Minishift&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;In this article, we’ll look at the features and benefits of CodeReady Containers, show a demo of how easy it is to create a local Red Hat OpenShift 4 cluster, and show how to deploy an application on top of it.&lt;br /&gt; &lt;span id="more-624577"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h3&gt;Prerequisites&lt;/h3&gt; &lt;p&gt;CodeReady Containers requires the following minimum system resources to run Red Hat OpenShift:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;4 virtual CPUs (vCPUs)&lt;/li&gt; &lt;li&gt;8 GB of memory&lt;/li&gt; &lt;li&gt;35 GB of storage space&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;You will also require the native hypervisor for your host operating system. CodeReady Containers currently supports libvirt for Linux, HyperKit for macOS, and Hyper-V for Windows.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s a brief walk-through of getting the bits, all the way through getting an app deployed.&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone size-full wp-image-626367 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/09/crc-beta-small-1024x525.gif" src="https://developers.redhat.com/blog/wp-content/uploads/2019/09/crc-beta-small.gif" alt="" width="1575" height="808" /&gt;&lt;/p&gt; &lt;h3&gt;Download &amp;#38; install&lt;/h3&gt; &lt;p&gt;You can download CodeReady Containers from &lt;a href="https://cloud.redhat.com/openshift/install/crc/installer-provisioned?intcmp=7013a000002CtetAAC"&gt;the CodeReady Containers landing page on cloud.redhat.com&lt;/a&gt;. To install CodeReady Containers, extract the downloaded archive its contents, and add the extracted &lt;code&gt;crc&lt;/code&gt; binary to your &lt;code&gt;PATH&lt;/code&gt; environment variable. On Linux and macOS, you can extract the contents of the &lt;code&gt;.tar.xz&lt;/code&gt; archive using the &lt;code&gt;tar xvf &lt;/code&gt; command.&lt;/p&gt; &lt;h3&gt;Configuration&lt;/h3&gt; &lt;p&gt;Once CodeReady Containers has been installed, set up your host environment with the &lt;code&gt;crc setup&lt;/code&gt; command. This command must be run before starting the OpenShift cluster. This command should be run with your regular user account but will request elevated privileges when modifications are needed. Ensure that your user account is capable of elevating privileges.&lt;/p&gt; &lt;pre&gt;$ crc setup &lt;/pre&gt; &lt;h3&gt;Start your OpenShift 4 cluster&lt;/h3&gt; &lt;p&gt;After your host environment has been set up with the &lt;code&gt;crc setup&lt;/code&gt; command, you can start the OpenShift cluster with the &lt;code&gt;crc start&lt;/code&gt; command. When prompted, supply your user pull secret for the cluster. Your user pull secret can be copied or downloaded from the &lt;a href="https://cloud.redhat.com/openshift/install/crc/installer-provisioned?intcmp=7013a000002CtetAAC"&gt;CodeReady Containers landing page on cloud.redhat.com&lt;/a&gt; under the &lt;em&gt;Pull Secret&lt;/em&gt; section. A Red Hat account is required to access the user pull secret.&lt;/p&gt; &lt;pre&gt;$ crc start &lt;/pre&gt; &lt;p&gt;That&amp;#8217;s it!&lt;/p&gt; &lt;p&gt;You should now have a running Red Hat OpenShift 4 cluster in no time.&lt;/p&gt; &lt;h3&gt;Using your cluster&lt;/h3&gt; &lt;p&gt;CodeReady Containers includes a cached OpenShift client binary (&lt;code&gt;oc&lt;/code&gt;). You can use this cached &lt;code&gt;oc&lt;/code&gt; binary to interact with the running OpenShift cluster by running the &lt;code&gt;crc oc-env&lt;/code&gt; command and following the printed instructions. Once the environment has been set up to use the cached &lt;code&gt;oc&lt;/code&gt; binary, you can log in to the cluster as the &lt;code&gt;developer&lt;/code&gt; user, as follows:&lt;/p&gt; &lt;pre&gt;$ eval $(crc oc-env) $ oc login -u developer -p developer &lt;/pre&gt; &lt;p&gt;Now we’ll create a sample &lt;code&gt;httpd&lt;/code&gt; application deployment. Once you are logged in with &lt;code&gt;oc&lt;/code&gt;, create a new project:&lt;/p&gt; &lt;pre&gt;$ oc new-project myproject &lt;/pre&gt; &lt;p&gt;Create the &lt;code&gt;httpd&lt;/code&gt; example application:&lt;/p&gt; &lt;pre&gt;$ oc new-app httpd-example &lt;/pre&gt; &lt;p&gt;Monitor the status of your build to ensure it pushes successfully:&lt;/p&gt; &lt;pre&gt;$ oc logs -f bc/httpd-example [...] Writing manifest to image destination Storing signatures Push successful &lt;/pre&gt; &lt;p&gt;Once the push is successful, get the route to your application and ensure it is functioning properly:&lt;/p&gt; &lt;pre&gt;$ oc get routes NAME            HOST/PORT                           PATH SERVICES PORT TERMINATION   WILDCARD httpd-example   httpd-example-myproject.apps-crc.testing          httpd-example &amp;#60;all&amp;#62; None $ curl -Ik httpd-example-myproject.apps-crc.testing HTTP/1.1 200 OK [...] &lt;/pre&gt; &lt;p&gt;Congratulations, you now have a sample &lt;code&gt;httpd&lt;/code&gt; application running on Red Hat OpenShift 4!&lt;/p&gt; &lt;p&gt;You can also use &lt;code&gt;&lt;a href="https://github.com/openshift/odo"&gt;odo&lt;/a&gt;&lt;/code&gt;, a developer-focused command-line interface for OpenShift, to interact with the OpenShift cluster provided by CodeReady Containers.&lt;/p&gt; &lt;p&gt;For more information about CodeReady Containers, see the &lt;a href="https://code-ready.github.io/crc/"&gt;official CodeReady Containers documentation&lt;/a&gt;. Also, see the video below for a hands-on look.&lt;/p&gt; &lt;h3&gt;Getting help&lt;/h3&gt; &lt;p&gt;If you encounter any issues using CodeReady Containers, see the &lt;a href="https://code-ready.github.io/crc/#troubleshooting-codeready-containers_gsg"&gt;Troubleshooting Red Hat CodeReady Containers&lt;/a&gt; guide. If this does not resolve your issue, &lt;a href="https://bugzilla.redhat.com/enter_bug.cgi?product=OpenShift%20Container%20Platform&amp;#38;component=crc"&gt;create a bug in Bugzilla with the ‘crc’ component&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;For community discussion, join the #codeready IRC channel on Freenode.&lt;/p&gt; &lt;h3&gt;Acknowledgements&lt;/h3&gt; &lt;p&gt;Many thanks to the CodeReady Container development team, members of the Red Hat OpenShift development team and blog writers/reviewers Kevin Owen, Gerard Braad, Praveen Kumar, and all.&lt;/p&gt; &lt;p&gt;&lt;iframe src="https://www.youtube.com/embed/qogFjV2fJNs" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;" class="mce_SELRES_start"&gt;﻿&lt;/span&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F05%2Fred-hat-openshift-4-on-your-laptop-introducing-red-hat-codeready-containers%2F&amp;#38;linkname=Red%20Hat%20OpenShift%204%20on%20your%20laptop%3A%20Introducing%20Red%20Hat%20CodeReady%20Containers" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F05%2Fred-hat-openshift-4-on-your-laptop-introducing-red-hat-codeready-containers%2F&amp;#38;linkname=Red%20Hat%20OpenShift%204%20on%20your%20laptop%3A%20Introducing%20Red%20Hat%20CodeReady%20Containers" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F05%2Fred-hat-openshift-4-on-your-laptop-introducing-red-hat-codeready-containers%2F&amp;#38;linkname=Red%20Hat%20OpenShift%204%20on%20your%20laptop%3A%20Introducing%20Red%20Hat%20CodeReady%20Containers" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F05%2Fred-hat-openshift-4-on-your-laptop-introducing-red-hat-codeready-containers%2F&amp;#38;linkname=Red%20Hat%20OpenShift%204%20on%20your%20laptop%3A%20Introducing%20Red%20Hat%20CodeReady%20Containers" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F05%2Fred-hat-openshift-4-on-your-laptop-introducing-red-hat-codeready-containers%2F&amp;#38;linkname=Red%20Hat%20OpenShift%204%20on%20your%20laptop%3A%20Introducing%20Red%20Hat%20CodeReady%20Containers" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F05%2Fred-hat-openshift-4-on-your-laptop-introducing-red-hat-codeready-containers%2F&amp;#38;linkname=Red%20Hat%20OpenShift%204%20on%20your%20laptop%3A%20Introducing%20Red%20Hat%20CodeReady%20Containers" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F05%2Fred-hat-openshift-4-on-your-laptop-introducing-red-hat-codeready-containers%2F&amp;#38;linkname=Red%20Hat%20OpenShift%204%20on%20your%20laptop%3A%20Introducing%20Red%20Hat%20CodeReady%20Containers" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F05%2Fred-hat-openshift-4-on-your-laptop-introducing-red-hat-codeready-containers%2F&amp;#038;title=Red%20Hat%20OpenShift%204%20on%20your%20laptop%3A%20Introducing%20Red%20Hat%20CodeReady%20Containers" data-a2a-url="https://developers.redhat.com/blog/2019/09/05/red-hat-openshift-4-on-your-laptop-introducing-red-hat-codeready-containers/" data-a2a-title="Red Hat OpenShift 4 on your laptop: Introducing Red Hat CodeReady Containers"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/09/05/red-hat-openshift-4-on-your-laptop-introducing-red-hat-codeready-containers/"&gt;Red Hat OpenShift 4 on your laptop: Introducing Red Hat CodeReady Containers&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/fAlzLX4vHE8" height="1" width="1" alt=""/&gt;</content><summary>We are pleased to announce that Red Hat CodeReady Containers is now available as a Developer Preview. CodeReady Containers brings a minimal, preconfigured OpenShift 4.1 or newer cluster to your local laptop or desktop computer for development and testing purposes. CodeReady Containers supports native hypervisors for Linux, macOS, and Windows 10. You can download CodeReady Containers from the CodeR...</summary><dc:creator>CodeReady Container Team</dc:creator><dc:date>2019-09-05T13:35:37Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/09/05/red-hat-openshift-4-on-your-laptop-introducing-red-hat-codeready-containers/</feedburner:origLink></entry><entry><title>Why Java is so hot right now</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/YncGa2vlxFg/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><author><name>rhsilva</name></author><id>searchisko:content:id:jbossorg_blog-why_java_is_so_hot_right_now</id><updated>2019-09-05T07:00:57Z</updated><published>2019-09-05T07:00:57Z</published><content type="html">&lt;p&gt;The Java platform has become one of the most widely used platforms, with a huge ecosystem in the world of technology. &lt;a href="https://developers.redhat.com/developer-tools/java"&gt;Java&lt;/a&gt; lets developers create applications for several platforms, such as Windows, Linux, embedded systems, and mobile.&lt;/p&gt; &lt;p&gt;Java also has received criticisms, such as: &lt;em&gt;Java is fat;&lt;/em&gt; &lt;em&gt;Java takes a lot of memory;&lt;/em&gt; &lt;em&gt;Java is verbose&lt;/em&gt;. But, Java was created to solve big problems, not small problems. Of course, you can also solve small problems with Java, but you see the real benefit of Java when you have a big problem, especially when creating solutions for enterprise environments. In this article, we&amp;#8217;ll take a closer look at the current Java ecosystem.&lt;span id="more-621357"&gt;&lt;/span&gt;&lt;br /&gt; Java is great for enterprise environments because of its power to solve complex problems and its multi-platform characteristics, but also because it promotes more security to business promoting backward compatibility and offers solutions based on specifications.&lt;/p&gt; &lt;p&gt;Java has a big ecosystem, with emphasis on &lt;a href="https://developers.redhat.com/videos/youtube/f2EwhTUmeOI/"&gt;Java EE (now Jakarta EE)&lt;/a&gt; that promotes several specifications to solve common problems in the enterprise environment. Some of these specifications are: EJB, JPA, JMS, JAX-RS, JAX-WS, and others. Furthermore, we have the &lt;a href="https://spring.io/"&gt;Spring&lt;/a&gt; ecosystem, although it is not based on specifications but uses some specifications from Java EE.&lt;/p&gt; &lt;h2&gt;Cloud computing and microservices&lt;/h2&gt; &lt;p&gt;The cloud computing concept has changed how developers architect, write, and think about applications. Cloud computing is a set of principles and approaches that aims to provide computing resources as a service (PaaS, IaaS, SaaS).  With this, we use only those resources that are necessary to run applications and scale when needed. This way, we can optimize computing resources and consequently optimize costs to business. It is fantastic, but to benefit from cloud computing, applications should be developed according to this approach. With this, the microservices architecture came about as a good approach to architect applications for cloud computing (cloud-native applications).&lt;/p&gt; &lt;p&gt;Microservices architecture breaks a big application (monolith) into many micro-applications or microservices, generally in the business domain. With this, we can scale only the business domains we really need without scaling all of them, thereby gaining fault tolerance as well as resilience. Additionally, microservices architecture lets us explore cloud computing benefits and optimize computing resources.&lt;/p&gt; &lt;h2&gt;Java and cloud computing&lt;/h2&gt; &lt;p&gt;In a cloud-native application approach, the complexity is not in the applications but in the communication between these applications, as well as management and monitoring. In other words, the complexity is about how these applications (microservices) interact with each other and how quickly we can identify problems. With this, the Java platform and its ecosystem have many gaps to solve, which will be discussed below:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Fat JVM: &lt;/strong&gt;Many Java applications start with libraries that are not used, and the JVM will load things that the application doesn&amp;#8217;t need. This is okay when you have a big application that solves complex problems, but is not so good for small applications (like microservices).&lt;/li&gt; &lt;li&gt;&lt;strong&gt;JVM JIT optimization:&lt;/strong&gt; The JVM has &lt;a href="https://www.ibm.com/support/knowledgecenter/en/SSYKE2_8.0.0/com.ibm.java.vm.80.doc/docs/jit_optimize.html"&gt;JIT optimization&lt;/a&gt; that optimizes applications running a long time. In other words, the longer the application life cycle, the more optimization is done. That means it&amp;#8217;s better to run an application for a long time than for a short time. In cloud computing, however, applications are born and die all the time and their life cycle is shorter.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Longer boot time: &lt;/strong&gt;Many Java applications have a long boot time compared to applications written in another language because these applications commonly solve other things at boot time.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Fat packages (war, ear, jar): &lt;/strong&gt;Many Java apps have a large package size, mainly when they have libraries inside them (in lib folder). This can increase the delivery time, degrading the delivery process.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Java EE has no pattern solutions to microservices: &lt;/strong&gt;The Java EE has many important specifications to solve enterprise problems, but it has no specs to solve problems that came from microservice architecture and cloud computing.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Java and Java EE updates are slow: &lt;/strong&gt;Java and Java EE have slow processes for updating features and creating new features. This is bad because the enterprise environment is in continuous change with new challenges all the time.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;With this, the Java ecosystem had several changes and initiatives to solve each gap created by cloud computing and put Java on top again.&lt;/p&gt; &lt;h2&gt;Java initiatives&lt;/h2&gt; &lt;p&gt;The Java platform is a robust platform that promotes many solutions, but to me, the best part of the Java world is the community, which is very strong and hard-working. The Java community has promoted many actions and initiatives that have boosted the Java platform and promoted solutions to bring Java closer to a cloud-native application approach, which many people refer to as c&lt;em&gt;loud-native Java.&lt;/em&gt;&lt;/p&gt; &lt;p&gt;The main actions and initiatives done in the Java ecosystem include: Jakarta EE, Microprofile, new Java release cycle, Java language improvements, JVM improvements, and Quarkus. I&amp;#8217;ll explain how these initiatives have impacted the Java ecosystem.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Jakarta EE: &lt;/strong&gt;Java EE was one of the most import projects at Java ecosystem. Java EE promoted many pattern solutions to enterprise problems, but this project was migrated from Oracle to Eclipse Foundation and had many changes in the work&amp;#8217;s structure. The project is now called &lt;a href="https://jakarta.ee/"&gt;Jakarta EE&lt;/a&gt;; it&amp;#8217;s an umbrella project that promotes pattern solutions (specifications) for the enterprise world and has a new process to approve new features and evolve existing features. Thus, Jakarta EE can evolve quickly and improve more enterprise solutions.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;MicroProfile: &lt;/strong&gt;As mentioned above, Jakarta EE has many good solutions for the enterprise world, but it does not have pattern solutions to many problems in a microservices architecture. &lt;a href="https://microprofile.io/"&gt;MicroProfile&lt;/a&gt; is an umbrella project that promotes many pattern solutions (specifications) for microservices architecture problems. This project has compatibility with Java EE and lets developers more easily create applications using microservices architecture. Some of these specifications are: MicroProfile Config, MicroProfile OpenTracing, MicroProfile RestClient, Microprofile Fault Tolerance, etc.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Java release cycle: &lt;/strong&gt;The Java release cycle changed, and now Java releases occur every six months. It&amp;#8217;s an excellent change, because it permits the Java platform to respond quickly to new challenges and promotes a faster evolution of the Java platform.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Improvements in Java language: &lt;/strong&gt;The Java language has seen several improvements, such as the functional feature, as well as the Jigsaw project, which introduced modularity. With this, we can create thinner Java applications that can easily be scaled.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Improvements in JVM: &lt;/b&gt;The JVM had some issues when used in containers, mainly about measurements of memory and CPU. This was bad because the container is very important to cloud computing. With containers, you don&amp;#8217;t deliver just the application, but the entire environment with all its dependencies. Since Java 9, the JVM has seen many updates that made communication with containers better. With this, the JVM is closer to cloud computing necessities.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Quarkus: &lt;/strong&gt;&lt;a href="https://quarkus.io/"&gt;Quarkus&lt;/a&gt; is the latest news in the Java ecosystem and has been at the top of the talks. Quarkus is a project tailored to GraalVM and OpenJDK HotSpot that promotes a Kubernetes Java application stack that lets developers write applications using the best of breed Java libraries and standards. With Quarkus, we can write applications with faster boot time, incredibly low RSS memory, and an amazing set of tools. Quarkus is really an amazing project that defines a new future for the Java platform. This project works with a container-first concept and uses the technique of compile-time boot to boost Java applications.&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Conclusion&lt;/h3&gt; &lt;p&gt;All of these projects and initiatives in the Java ecosystem bring Java back into focus and start the new era for the Java platform. With this, Java enters the world of cloud computing, offering ways of working with specifications and promoting standardized solutions to cloud computing. These initiatives are amazing both for Java and for cloud computing, because from these standardized solutions will emerge new enterprise solutions that will have the support of many companies, thereby making adoption of these solutions even safer.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F05%2Fwhy-java-is-so-hot-right-now%2F&amp;#38;linkname=Why%20Java%20is%20so%20hot%20right%20now" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F05%2Fwhy-java-is-so-hot-right-now%2F&amp;#38;linkname=Why%20Java%20is%20so%20hot%20right%20now" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F05%2Fwhy-java-is-so-hot-right-now%2F&amp;#38;linkname=Why%20Java%20is%20so%20hot%20right%20now" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F05%2Fwhy-java-is-so-hot-right-now%2F&amp;#38;linkname=Why%20Java%20is%20so%20hot%20right%20now" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F05%2Fwhy-java-is-so-hot-right-now%2F&amp;#38;linkname=Why%20Java%20is%20so%20hot%20right%20now" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F05%2Fwhy-java-is-so-hot-right-now%2F&amp;#38;linkname=Why%20Java%20is%20so%20hot%20right%20now" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F05%2Fwhy-java-is-so-hot-right-now%2F&amp;#38;linkname=Why%20Java%20is%20so%20hot%20right%20now" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F05%2Fwhy-java-is-so-hot-right-now%2F&amp;#038;title=Why%20Java%20is%20so%20hot%20right%20now" data-a2a-url="https://developers.redhat.com/blog/2019/09/05/why-java-is-so-hot-right-now/" data-a2a-title="Why Java is so hot right now"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/09/05/why-java-is-so-hot-right-now/"&gt;Why Java is so hot right now&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/YncGa2vlxFg" height="1" width="1" alt=""/&gt;</content><summary>The Java platform has become one of the most widely used platforms, with a huge ecosystem in the world of technology. Java lets developers create applications for several platforms, such as Windows, Linux, embedded systems, and mobile. Java also has received criticisms, such as: Java is fat; Java takes a lot of memory; Java is verbose. But, Java was created to solve big problems, not small problem...</summary><dc:creator>rhsilva</dc:creator><dc:date>2019-09-05T07:00:57Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/09/05/why-java-is-so-hot-right-now/</feedburner:origLink></entry><entry><title>Red Hat Summit 2020: Call for Proposals for new developer track</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/4iDe94ICy_k/" /><category term="events" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="red hat summit" scheme="searchisko:content:tags" /><author><name>David David</name></author><id>searchisko:content:id:jbossorg_blog-red_hat_summit_2020_call_for_proposals_for_new_developer_track</id><updated>2019-09-04T07:01:47Z</updated><published>2019-09-04T07:01:47Z</published><content type="html">&lt;p&gt;Red Hat Developer invites you to share your expertise at &lt;a href="https://www.redhat.com/en/summit"&gt;Red Hat Summit 2020&lt;/a&gt;, April 27-29th in San Francisco California. Submit a proposal now to lead a conference session and share your development story.&lt;/p&gt; &lt;p&gt;Every year, thousands of developers attend Red Hat Summit. New for 2020, you will be able to attend a new track created specifically for application developers.  This track will focus on the latest application development technologies, and we need your help.&lt;/p&gt; &lt;p&gt;Red Hat Summit attendees want to hear your stories of success and failure, your best techniques, how your work is changing, architecture tips, DevOps, and what&amp;#8217;s new.  Please submit your session ideas based on real-world examples and hands-on instruction. Below are some ideas to help you get started.&lt;span id="more-623407"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Submit your open source application development story at &lt;a href="https://www.redhat.com/en/summit/speakers/submit-a-session"&gt;redhat.com/summit&lt;/a&gt; by October 22, 2019. Include &amp;#8220;Developer:&amp;#8221; as a prefix for your talk summary.  If your session is chosen,&lt;strong&gt; you’ll receive a free pass to Red Hat Summit. &lt;/strong&gt;&lt;/span&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Setting up a Continuous Delivery pipeline on Red Hat OpenShift&lt;/li&gt; &lt;li&gt;How to leverage Tekton/OpenShift Pipelines for continuous delivery&lt;/li&gt; &lt;li&gt;Why use GitOps with continuous delivery&lt;/li&gt; &lt;li&gt;Deployment strategies: Blue-green Deployments, A/B Testing, and Canary Releases&lt;/li&gt; &lt;li&gt;Configure a CI/CD pipeline for serverless applications&lt;/li&gt; &lt;li&gt;Security in the continuous delivery pipeline&lt;/li&gt; &lt;li&gt;Success stories in application development with serverless architecture&lt;/li&gt; &lt;li&gt;Implementing serverless using Knative and Quarkus&lt;/li&gt; &lt;li&gt;Leveraging Quarkus to use Java in microservices or serverless architectures&lt;/li&gt; &lt;li&gt;Quarkus enables better microservices architecture for Java devs, necessitating Istio&lt;/li&gt; &lt;li&gt;Developer toolchain on Red Hat OpenShift for cloud development&lt;/li&gt; &lt;li&gt;Managing developer environments for cloud development with Eclipse Che/Red Hat CodeReady Workspaces&lt;/li&gt; &lt;li&gt;Improving your OpenShift workflow with odo&lt;/li&gt; &lt;li&gt;Serverless or microservice security topics&lt;/li&gt; &lt;li&gt;Monitoring applications using Prometheus and Grafana&lt;/li&gt; &lt;li&gt;Debugging microservice applications&lt;/li&gt; &lt;li&gt;Debugging serverless applications&lt;/li&gt; &lt;li&gt;Security and stability of microservice applications&lt;/li&gt; &lt;li&gt;Security and stability of serverless applications&lt;/li&gt; &lt;li&gt;Developing operators for Kubernetes/Openshift&lt;/li&gt; &lt;li&gt;Convert existing application into a Kubernetes/OpenShift Operator&lt;/li&gt; &lt;li&gt;Using Linux in containers (UBI, RHEL, Podman, Buildah, Skopeo)&lt;/li&gt; &lt;li&gt;Success stories of using Java in the cloud&lt;/li&gt; &lt;li&gt;Leveraging Ceph/OpenShift Container Storage in cloud application design&lt;/li&gt; &lt;li&gt;Getting started with service mesh/Istio routing&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a href="https://www.redhat.com/en/summit"&gt;Visit the website&lt;/a&gt; for details on submitting your talk.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F04%2Fred-hat-summit-2020-call-for-proposals-for-new-developer-track%2F&amp;#38;linkname=Red%20Hat%20Summit%202020%3A%20Call%20for%20Proposals%20for%20new%20developer%20track" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F04%2Fred-hat-summit-2020-call-for-proposals-for-new-developer-track%2F&amp;#38;linkname=Red%20Hat%20Summit%202020%3A%20Call%20for%20Proposals%20for%20new%20developer%20track" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F04%2Fred-hat-summit-2020-call-for-proposals-for-new-developer-track%2F&amp;#38;linkname=Red%20Hat%20Summit%202020%3A%20Call%20for%20Proposals%20for%20new%20developer%20track" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F04%2Fred-hat-summit-2020-call-for-proposals-for-new-developer-track%2F&amp;#38;linkname=Red%20Hat%20Summit%202020%3A%20Call%20for%20Proposals%20for%20new%20developer%20track" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F04%2Fred-hat-summit-2020-call-for-proposals-for-new-developer-track%2F&amp;#38;linkname=Red%20Hat%20Summit%202020%3A%20Call%20for%20Proposals%20for%20new%20developer%20track" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F04%2Fred-hat-summit-2020-call-for-proposals-for-new-developer-track%2F&amp;#38;linkname=Red%20Hat%20Summit%202020%3A%20Call%20for%20Proposals%20for%20new%20developer%20track" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F04%2Fred-hat-summit-2020-call-for-proposals-for-new-developer-track%2F&amp;#38;linkname=Red%20Hat%20Summit%202020%3A%20Call%20for%20Proposals%20for%20new%20developer%20track" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F04%2Fred-hat-summit-2020-call-for-proposals-for-new-developer-track%2F&amp;#038;title=Red%20Hat%20Summit%202020%3A%20Call%20for%20Proposals%20for%20new%20developer%20track" data-a2a-url="https://developers.redhat.com/blog/2019/09/04/red-hat-summit-2020-call-for-proposals-for-new-developer-track/" data-a2a-title="Red Hat Summit 2020: Call for Proposals for new developer track"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/09/04/red-hat-summit-2020-call-for-proposals-for-new-developer-track/"&gt;Red Hat Summit 2020: Call for Proposals for new developer track&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/4iDe94ICy_k" height="1" width="1" alt=""/&gt;</content><summary>Red Hat Developer invites you to share your expertise at Red Hat Summit 2020, April 27-29th in San Francisco California. Submit a proposal now to lead a conference session and share your development story. Every year, thousands of developers attend Red Hat Summit. New for 2020, you will be able to attend a new track created specifically for application developers.  This track will focus on the lat...</summary><dc:creator>David David</dc:creator><dc:date>2019-09-04T07:01:47Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/09/04/red-hat-summit-2020-call-for-proposals-for-new-developer-track/</feedburner:origLink></entry><entry><title>Cloud-native messaging on Red Hat OpenShift with Quarkus and AMQ Online</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/3tLw3a558r8/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><category term="Red Hat AMQ" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift" scheme="searchisko:content:tags" /><author><name>Ulf Lilleengen</name></author><id>searchisko:content:id:jbossorg_blog-cloud_native_messaging_on_red_hat_openshift_with_quarkus_and_amq_online</id><updated>2019-09-04T07:00:55Z</updated><published>2019-09-04T07:00:55Z</published><content type="html">&lt;p&gt;&lt;a href="https://quarkus.io/"&gt;Quarkus&lt;/a&gt; is a &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt;-native Java stack tailored for GraalVM and OpenJDK HotSpot, crafted from the best of breed Java libraries and standards, according to the project website. Starting with the 0.17.0 release, Quarkus supports using the Advanced Message Queuing Protocol (&lt;a href="http://www.amqp.org/"&gt;AMQP&lt;/a&gt;), which is an open standard for passing business messages between applications or organizations.&lt;/p&gt; &lt;p&gt;&lt;a href="https://www.redhat.com/en/about/videos/amq-online-nutshell"&gt;Red Hat AMQ Online&lt;/a&gt; is a &lt;a href="https://developers.redhat.com/openshift/"&gt;Red Hat OpenShift&lt;/a&gt;-based mechanism for delivering messaging as a managed service. Previously, we have seen &lt;a href="https://developers.redhat.com/blog/2019/05/17/self-service-messaging-with-red-hat-amq-online-and-gitops/"&gt;how to use AMQ Online to provision messaging&lt;/a&gt;. In this article, we will combine AMQ Online and Quarkus to show how you can create a modern messaging setup on OpenShift using two new technologies from the messaging space.&lt;/p&gt; &lt;p&gt;The guide assumes you have an installation of AMQ Online on OpenShift. Read the &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_amq/7.3/html/evaluating_amq_online_on_openshift_container_platform/index"&gt;installation guide&lt;/a&gt; for more information. AMQ Online is based on the &lt;a href="https://enmasse.io"&gt;EnMasse&lt;/a&gt; open source project.&lt;span id="more-606817"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;We will start off with creating a Quarkus application using reactive messaging, a simple order processing system. It includes an order generator, that sends orders to a messaging queue at fixed intervals, an order processor that processes orders from a messaging queue and delivers confirmations to be viewed in an HTML page.&lt;/p&gt; &lt;p&gt;Once the application is created, we will show how to inject messaging configuration into the application and use AMQ Online to provision the messaging resources that we need.&lt;/p&gt; &lt;h2&gt;Quarkus application&lt;/h2&gt; &lt;p&gt;Our Quarkus application will run on OpenShift and is a modified version of the &lt;a href="https://github.com/quarkusio/quarkus-quickstarts/tree/master/amqp-quickstart"&gt;amqp-quickstart&lt;/a&gt;. The full example client can be found &lt;a href="https://github.com/EnMasseProject/enmasse-example-clients/tree/master/quarkus-example-client"&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Order generator&lt;/h3&gt; &lt;p&gt;The order generator sends monotonically increasing order identifiers to an &amp;#8220;orders&amp;#8221; address every 5 seconds.&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; @ApplicationScoped public class OrderGenerator { private int orderId = 1; @Outgoing(&amp;#34;orders&amp;#34;) public Flowable&amp;#60;Integer&amp;#62; generate() { return Flowable.interval(5, TimeUnit.SECONDS) .map(tick -&amp;#62; orderId++); } } &lt;/pre&gt; &lt;h3&gt;Order processor&lt;/h3&gt; &lt;p&gt;The order processor is even simpler; it just returns a confirmation id to the &amp;#8220;confirmations&amp;#8221; address.&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; @ApplicationScoped public class OrderProcessor { @Incoming(&amp;#34;orders&amp;#34;) @Outgoing(&amp;#34;confirmations&amp;#34;) public Integer process(Integer order) { // Confirmation id is twice the order id &lt;img src="https://s.w.org/images/core/emoji/11.2.0/72x72/1f642.png" alt="" class="wp-smiley" style="height: 1em; max-height: 1em;" /&gt; return order * 2; } } &lt;/pre&gt; &lt;h3&gt;Confirmations resources&lt;/h3&gt; &lt;p&gt;The confirmations resource is an HTTP endpoint for listing the confirmations that have been produced.&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; @Path(&amp;#34;/confirmations&amp;#34;) public class ConfirmationResource { @Inject @Stream(&amp;#34;confirmations&amp;#34;) Publisher&amp;#60;Integer&amp;#62; orders; @GET @Produces(MediaType.TEXT_PLAIN) public String hello() { return &amp;#34;hello&amp;#34;; } @GET @Path(&amp;#34;/stream&amp;#34;) @Produces(MediaType.SERVER_SENT_EVENTS) public Publisher&amp;#60;Integer&amp;#62; stream() { return orders; } } &lt;/pre&gt; &lt;h3&gt;Configuration&lt;/h3&gt; &lt;p&gt;Our application needs some configuration information in order to connect to AMQ Online. The Quarkus connector configuration, AMQP endpoint information, and client credentials all need to be supplied. Although it is good practice to keep configuration in one place, we will split things up a bit to show the options you have for configuring a Quarkus application.&lt;/p&gt; &lt;h4&gt;Connectors&lt;/h4&gt; &lt;p&gt;The connector configuration can be supplied at compile time using the application properties file:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; mp.messaging.outgoing.orders.connector=smallrye-amqp mp.messaging.incoming.orders.connector=smallrye-amqp &lt;/pre&gt; &lt;p&gt;To keep things simple, we will only use a messaging queue for the &amp;#8220;orders&amp;#8221; address. The &amp;#8220;confirmations&amp;#8221; address will use an in-memory queue in the example application.&lt;/p&gt; &lt;h4&gt;AMQP endpoint&lt;/h4&gt; &lt;p&gt;The AMQP endpoint hostname and port information is not known at compile time and must be injected. The endpoint information can be provided in a configmap created by AMQ Online; thus, we will set them as environment variables in the application manifest:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; spec: template: spec: containers: - env: - name: AMQP_HOST valueFrom: configMapKeyRef: name: quarkus-config key: service.host - name: AMQP_PORT valueFrom: configMapKeyRef: name: quarkus-config key: service.port.amqp &lt;/pre&gt; &lt;h4&gt;Credentials&lt;/h4&gt; &lt;p&gt;We want to use the ability to use service account tokens for authenticating our messaging application on OpenShift. To do this, we need to create a custom ConfigSource that reads the authentication token from the pod filesystem:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; public class MessagingCredentialsConfigSource implements ConfigSource { private static final Set&amp;#60;String&amp;#62; propertyNames; static { propertyNames = new HashSet&amp;#60;&amp;#62;(); propertyNames.add(&amp;#34;amqp-username&amp;#34;); propertyNames.add(&amp;#34;amqp-password&amp;#34;); } @Override public Set&amp;#60;String&amp;#62; getPropertyNames() { return propertyNames; } @Override public Map&amp;#60;String, String&amp;#62; getProperties() { try { Map&amp;#60;String, String&amp;#62; properties = new HashMap&amp;#60;&amp;#62;(); properties.put(&amp;#34;amqp-username&amp;#34;, &amp;#34;@@serviceaccount@@&amp;#34;); properties.put(&amp;#34;amqp-password&amp;#34;, readTokenFromFile()); return properties; } catch (IOException e) { throw new UncheckedIOException(e); } } @Override public String getValue(String key) { if (&amp;#34;amqp-username&amp;#34;.equals(key)) { return &amp;#34;@@serviceaccount@@&amp;#34;; } if (&amp;#34;amqp-password&amp;#34;.equals(key)) { try { return readTokenFromFile(); } catch (IOException e) { throw new UncheckedIOException(e); } } return null; } @Override public String getName() { return &amp;#34;messaging-credentials-config&amp;#34;; } private static String readTokenFromFile() throws IOException { return new String(Files.readAllBytes(Paths.get(&amp;#34;/var/run/secrets/kubernetes.io/serviceaccount/token&amp;#34;)), StandardCharsets.UTF_8); } } &lt;/pre&gt; &lt;h3&gt;Building and deploying the application&lt;/h3&gt; &lt;p&gt;To deploy the example application, you need GraalVM to perform native compilation of the application. Follow the steps in the &lt;a href="https://quarkus.io/guides/building-native-image-guide.html"&gt;Quarkus Guide&lt;/a&gt; for setting up your environment.&lt;/p&gt; &lt;p&gt;Then, follow these instructions to download the source, build, and deploy the example application:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; git clone https://github.com/EnMasseProject/enmasse-example-clients cd enmasse-example-clients/quarkus-example-client oc new-project myapp mvn -Pnative -Dfabric8.mode=openshift -Dfabric8.build.strategy=docker package fabric8:build fabric8:resource fabric8:apply &lt;/pre&gt; &lt;p&gt;The application will be deployed but will not start until we configure AMQ Online with the messaging resources we need.&lt;/p&gt; &lt;h2&gt;Configuring messaging&lt;/h2&gt; &lt;p&gt;The remaining part is to configure messaging resources needed by our application. We need to create an address space to provision a messaging endpoint, an address to configure our messaging address, and a messaging user to configure client credentials.&lt;/p&gt; &lt;h3&gt;Address space&lt;/h3&gt; &lt;p&gt;An AMQ Online AddressSpace is a group of addresses that share connection endpoints as well as authentication and authorization policies. When creating an AddressSpace, you can configure how your messaging endpoints are exposed:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; apiVersion: enmasse.io/v1beta1 kind: AddressSpace metadata: name: quarkus-example spec: type: brokered plan: brokered-single-broker endpoints: - name: messaging service: messaging exports: - name: quarkus-config kind: configmap &lt;/pre&gt; &lt;h3&gt;Address&lt;/h3&gt; &lt;p&gt;Messages are sent and received from an address. An address has a type that determines its semantics and a plan that determines the amount of resources reserved for this address. An address can be defined like this:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; apiVersion: enmasse.io/v1beta1 kind: Address metadata: name: quarkus-example.orders spec: address: orders type: queue plan: brokered-queue &lt;/pre&gt; &lt;h3&gt;Messaging user&lt;/h3&gt; &lt;p&gt;To ensure that only trusted applications are able to send and receive messages to your addresses, a messaging user must be created. For applications running on-cluster, you can authenticate clients using an OpenShift service account. A &amp;#8220;serviceaccount&amp;#8221; user can be defined like this:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; apiVersion: user.enmasse.io/v1beta1 kind: MessagingUser metadata: name: quarkus-example.app spec: username: system:serviceaccount:myapp:default authentication: type: serviceaccount authorization: - operations: [&amp;#34;send&amp;#34;, &amp;#34;recv&amp;#34;] addresses: [&amp;#34;orders&amp;#34;] &lt;/pre&gt; &lt;h3&gt;Application configuration permissions&lt;/h3&gt; &lt;p&gt;To allow AMQ Online to create the configmap used to inject AMQP endpoint information, we also need to define a Role and RoleBinding:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; --- apiVersion: rbac.authorization.k8s.io/v1 kind: Role metadata: name: quarkus-config spec: rules: - apiGroups: [ &amp;#34;&amp;#34; ] resources: [ &amp;#34;configmaps&amp;#34; ] verbs: [ &amp;#34;create&amp;#34; ] - apiGroups: [ &amp;#34;&amp;#34; ] resources: [ &amp;#34;configmaps&amp;#34; ] resourceNames: [ &amp;#34;quarkus-config&amp;#34; ] verbs: [ &amp;#34;get&amp;#34;, &amp;#34;update&amp;#34;, &amp;#34;patch&amp;#34; ] --- apiVersion: rbac.authorization.k8s.io/v1 kind: RoleBinding metadata: name: quarkus-config roleRef: apiGroup: rbac.authorization.k8s.io kind: Role name: quarkus-config subjects: - kind: ServiceAccount name: address-space-controller namespace: amq-online-infra &lt;/pre&gt; &lt;h3&gt;Applying configuration&lt;/h3&gt; &lt;p&gt;You can apply the messaging configuration directly from the example source:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; cd enmasse-example-clients/quarkus-example-client oc project myapp oc apply -f src/main/resources/k8s/addressspace oc apply -f src/main/resources/k8s/address &lt;/pre&gt; &lt;h2&gt;Verifying application&lt;/h2&gt; &lt;p&gt;To verify that the application is running, first ensure that addresses are created and active:&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; until [[ `oc get address quarkus-example.prices -o jsonpath='{.status.phase}'` == &amp;#34;Active&amp;#34; ]]; do echo &amp;#34;Not yet ready&amp;#34;; sleep 5; done &lt;/pre&gt; &lt;p&gt;Then, retrieve the application route URL (open the echoed URL in your browser):&lt;/p&gt; &lt;pre class="brush: plain; title: ; notranslate"&gt; echo &amp;#34;http://$(oc get route quarkus-example-client -o jsonpath='{.spec.host}')/prices.html&amp;#34; &lt;/pre&gt; &lt;p&gt;You should now see a ticket that updates periodically based on the messages sent to and received from AMQ Online.&lt;/p&gt; &lt;h2&gt;Summary&lt;/h2&gt; &lt;p&gt;In this article, we showed how to write a Quarkus application that uses AMQP for messaging, configured this application to run on Red Hat OpenShift, and injected the application configuration derived from the AMQ Online configuration. We then created the manifests needed to provision messaging for the application.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F04%2Fcloud-native-messaging-on-red-hat-openshift-with-quarkus-and-amq-online%2F&amp;#38;linkname=Cloud-native%20messaging%20on%20Red%20Hat%20OpenShift%20with%20Quarkus%20and%20AMQ%20Online" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F04%2Fcloud-native-messaging-on-red-hat-openshift-with-quarkus-and-amq-online%2F&amp;#38;linkname=Cloud-native%20messaging%20on%20Red%20Hat%20OpenShift%20with%20Quarkus%20and%20AMQ%20Online" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F04%2Fcloud-native-messaging-on-red-hat-openshift-with-quarkus-and-amq-online%2F&amp;#38;linkname=Cloud-native%20messaging%20on%20Red%20Hat%20OpenShift%20with%20Quarkus%20and%20AMQ%20Online" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F04%2Fcloud-native-messaging-on-red-hat-openshift-with-quarkus-and-amq-online%2F&amp;#38;linkname=Cloud-native%20messaging%20on%20Red%20Hat%20OpenShift%20with%20Quarkus%20and%20AMQ%20Online" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F04%2Fcloud-native-messaging-on-red-hat-openshift-with-quarkus-and-amq-online%2F&amp;#38;linkname=Cloud-native%20messaging%20on%20Red%20Hat%20OpenShift%20with%20Quarkus%20and%20AMQ%20Online" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F04%2Fcloud-native-messaging-on-red-hat-openshift-with-quarkus-and-amq-online%2F&amp;#38;linkname=Cloud-native%20messaging%20on%20Red%20Hat%20OpenShift%20with%20Quarkus%20and%20AMQ%20Online" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F04%2Fcloud-native-messaging-on-red-hat-openshift-with-quarkus-and-amq-online%2F&amp;#38;linkname=Cloud-native%20messaging%20on%20Red%20Hat%20OpenShift%20with%20Quarkus%20and%20AMQ%20Online" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F04%2Fcloud-native-messaging-on-red-hat-openshift-with-quarkus-and-amq-online%2F&amp;#038;title=Cloud-native%20messaging%20on%20Red%20Hat%20OpenShift%20with%20Quarkus%20and%20AMQ%20Online" data-a2a-url="https://developers.redhat.com/blog/2019/09/04/cloud-native-messaging-on-red-hat-openshift-with-quarkus-and-amq-online/" data-a2a-title="Cloud-native messaging on Red Hat OpenShift with Quarkus and AMQ Online"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/09/04/cloud-native-messaging-on-red-hat-openshift-with-quarkus-and-amq-online/"&gt;Cloud-native messaging on Red Hat OpenShift with Quarkus and AMQ Online&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/3tLw3a558r8" height="1" width="1" alt=""/&gt;</content><summary>Quarkus is a Kubernetes-native Java stack tailored for GraalVM and OpenJDK HotSpot, crafted from the best of breed Java libraries and standards, according to the project website. Starting with the 0.17.0 release, Quarkus supports using the Advanced Message Queuing Protocol (AMQP), which is an open standard for passing business messages between applications or organizations. Red Hat AMQ Online is a...</summary><dc:creator>Ulf Lilleengen</dc:creator><dc:date>2019-09-04T07:00:55Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/09/04/cloud-native-messaging-on-red-hat-openshift-with-quarkus-and-amq-online/</feedburner:origLink></entry><entry><title>CDC pipeline with Red Hat AMQ Streams and Red Hat Fuse</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/80fEy3uSBGQ/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="integration" scheme="searchisko:content:tags" /><category term="jboss a-mq" scheme="searchisko:content:tags" /><category term="JBoss Fuse" scheme="searchisko:content:tags" /><category term="Red Hat AMQ" scheme="searchisko:content:tags" /><category term="Red Hat Fuse" scheme="searchisko:content:tags" /><category term="Red Hat Integration" scheme="searchisko:content:tags" /><author><name>snandaku</name></author><id>searchisko:content:id:jbossorg_blog-cdc_pipeline_with_red_hat_amq_streams_and_red_hat_fuse</id><updated>2019-09-03T07:00:44Z</updated><published>2019-09-03T07:00:44Z</published><content type="html">&lt;p&gt;Change Data Capture (CDC) is a pattern that enables database changes to be monitored and propagated to downstream systems. It is an effective way of enabling reliable microservices integration and solving typical challenges, such as gradually extracting microservices from existing monoliths.&lt;/p&gt; &lt;p&gt;With the release of &lt;a href="https://developers.redhat.com/blog/2019/07/04/announcing-red-hat-amq-streams-1-2-with-apache-kafka-2-2-support/"&gt;Red Hat AMQ Streams&lt;/a&gt; 1.2, &lt;a href="https://www.redhat.com/en/products/integration?extIdCarryOver=true&amp;#38;intcmp=701f2000001OMHaAAO&amp;#38;sc_cid=701f2000000RtqCAAS"&gt;Red Hat Integration&lt;/a&gt; now includes a developer preview of CDC features based on upstream project&lt;a href="https://debezium.io/docs/amq-streams/"&gt; Debezium&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;This article explains how to make use of Red Hat Integration to create a complete CDC pipeline. The idea is to enable applications to respond almost immediately whenever there is a data change. We capture the changes as they occur using Debezium and stream it using Red Hat AMQ Streams. We then filter and transform the data using &lt;a href="https://developers.redhat.com/products/fuse/overview"&gt;Red Hat Fuse&lt;/a&gt; and send it to Elasticsearch, where the data can be further analyzed or used by downstream systems.&lt;br /&gt; &lt;img class=" alignnone wp-image-620237 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/08/final_cdc-1024x415.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/08/final_cdc-300x122.png" alt="" width="602" height="245" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/08/final_cdc-300x122.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/final_cdc-768x312.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/final_cdc-1024x415.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/final_cdc.png 1600w" sizes="(max-width: 602px) 100vw, 602px" /&gt;&lt;br /&gt; &lt;span id="more-617417"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Overview of the architecture&lt;/h2&gt; &lt;p&gt;In this example, as transaction data comes in from our shopping website, it is persisted to a transaction database (MySQL DB), Debezium then captures the data changes and sends it over to the AMQ Streams topic with the table name (in our case transaction). We then read the &lt;a href="https://www.redhat.com/en/topics/integration/what-is-apache-kafka?extIdCarryOver=true&amp;#38;intcmp=701f2000001OMHaAAO&amp;#38;sc_cid=701f2000000RtqCAAS"&gt;Apache Kafka&lt;/a&gt; topic using Red Hat Fuse and filter large transactions (transactions &amp;#62; 1000) and send it to Elasticsearch where the data can be used/analyzed by downstream systems. Fuse Online is an integration Platform-as-a-Service (iPaaS) solution that makes it easy for business users to collaborate with integration experts and application developers.&lt;/p&gt; &lt;h2&gt;Preparing the demo environment&lt;/h2&gt; &lt;p&gt;Let&amp;#8217;s install the necessary components for this demonstration on &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt;, which enables efficient container orchestration, allowing rapid container provisioning, deploying, scaling, and management. Red Hat Integration on OpenShift helps us rapidly create and manage the web-scale cloud-native applications with ease.&lt;/p&gt; &lt;p&gt;The OpenShift Container Platform CLI exposes commands for managing your applications, as well as lower-level tools to interact with each component of your system. We will be making use of the OC tool to create/deploy projects and applications. First, we will create a new project and provision a MySQL DB.&lt;/p&gt; &lt;pre&gt;$oc new-project debezium-cdc $oc new-app --name=mysql debezium/example-mysql:0.9                          -e MYSQL_ROOT_PASSWORD=password                          -e MYSQL_USER=testUser                          -e MYSQL_PASSWORD=password                          -e MYSQL_DATABASE=sampledb &lt;/pre&gt; &lt;p&gt;We will also create a transaction database for the shopping website.&lt;/p&gt; &lt;pre&gt;$oc get pods $oc rsh &amp;#60;pod_name&amp;#62; $mysql -u root -ppassword -h mysql sampledb mysql&amp;#62; CREATE TABLE transaction (transaction_id serial PRIMARY KEY,userId integer NOT NULL, amount integer NOT NULL,last_login TIMESTAMP); &lt;/pre&gt; &lt;p&gt;Follow the &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_amq/7.3/html/using_amq_streams_on_openshift_container_platform/getting-started-str#downloads-str"&gt;Red Hat AMQ Streams documentation&lt;/a&gt; to provision Red Hat AMQ Streams using the AMQ Streams Operator. Next, we will deploy the&lt;a href="https://access.redhat.com/documentation/en-us/red_hat_amq/7.3/html/using_amq_streams_on_openshift_container_platform/getting-started-str#using-kafka-connect-with-plug-ins-str"&gt; Kafka Connect s2i&lt;/a&gt;. Next, download the necessary driver for MySQL along with the Debezium MySQL connector from the&lt;a href="https://debezium.io/docs/amq-streams/"&gt; Debezium website&lt;/a&gt;. Make sure to copy the driver into the connector folder.&lt;/p&gt; &lt;p&gt;Now, we can configure the Kafka connect utility with the MySQL Debezium connector that we have downloaded.&lt;/p&gt; &lt;pre&gt;$oc get buildconfigs $oc start-build &amp;#60;build-config-name&amp;#62; --from-dir=&amp;#60;connector_dir&amp;#62; &lt;/pre&gt; &lt;p&gt;We will now use a POST command to configure the Debezium connector with our MySQL DB configuration.&lt;/p&gt; &lt;pre&gt;PUT &amp;#60;kafka-connect-pod-route-url&amp;#62;&lt;a href="http://my-connect-cluster-connect-api-dbz-mysql.apps.florida-4a69.openshiftworkshop.com/connectors/debezium-connector-mysql/config"&gt;/connectors/debezium-connector-mysql/config&lt;/a&gt; {     "connector.class": "io.debezium.connector.mysql.MySqlConnector",     "tasks.max": "1",     "database.hostname": "mysql", → &lt;b&gt;&lt;i&gt;Database host name&lt;/i&gt;&lt;/b&gt;      "database.port": "3306", → &lt;b&gt;&lt;i&gt;Port&lt;/i&gt;&lt;/b&gt;     "database.user": "root", → &lt;b&gt;&lt;i&gt;Username&lt;/i&gt;&lt;/b&gt;     "database.password": "password", → &lt;b&gt;&lt;i&gt;Password&lt;/i&gt;&lt;/b&gt;     "database.server.id": "184054",     "database.server.name": "sampledb", → &lt;b&gt;&lt;i&gt;Database name&lt;/i&gt;&lt;/b&gt;     "database.whitelist": "sampledb",     "database.history.kafka.bootstrap.servers": "my-cluster-kafka-bootstrap.svc:9092", → &lt;b&gt;&lt;i&gt;Kafka cluster url&lt;/i&gt;&lt;/b&gt;     "database.history.kafka.topic": "changes-topic",     "decimal.handling.mode" : "double",     "transforms": "route",     "transforms.route.type": "org.apache.kafka.connect.transforms.RegexRouter",     "transforms.route.regex": "([^.]+)\\.([^.]+)\\.([^.]+)",     "transforms.route.replacement": "$3" } &lt;/pre&gt; &lt;p&gt;Next, we&amp;#8217;ll spin up Red Hat Fuse Online. &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_fuse/7.3/html/integrating_applications_with_fuse_online/fuse-online-on-ocp_ug"&gt;&lt;span style="font-weight: 400;"&gt;Follow the documentation&lt;/span&gt;&lt;/a&gt;&lt;span style="font-weight: 400;"&gt; to install Fuse Online on the OpenShift instance. &lt;/span&gt;&lt;span style="font-weight: 400;"&gt;Once the connectors are set up, we can create the integration. &lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;span style="font-weight: 400;"&gt;Integration is a four-step process, where data is read from the Kafka topic, schema are mapped, filtered, and written on to an Elasticsearch end point.&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone wp-image-617627 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/08/fuse_online_integ-1024x477.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/08/fuse_online_integ-300x140.png" alt="" width="632" height="295" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/08/fuse_online_integ-300x140.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/fuse_online_integ-768x358.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/fuse_online_integ-1024x477.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/fuse_online_integ.png 1600w" sizes="(max-width: 632px) 100vw, 632px" /&gt;&lt;/p&gt; &lt;p&gt;We will now need an Elasticsearch instance, which can be publicly hosted/ installed on OC. Create an index called transaction, and we&amp;#8217;ll push to this index from our Fuse Online Integration.&lt;/p&gt; &lt;p&gt;Finally, let&amp;#8217;s deploy an e-shopping web application. For this, we will be using &lt;a href="https://developers.redhat.com/blog/2019/03/07/quarkus-next-generation-kubernetes-native-java-framework/"&gt;Quarkus&lt;/a&gt; (supersonic, subatomic Java) to spin up a simple CRUD UI. Quarkus provides an effective solution for running Java in this new world of serverless, microservices, containers, Kubernetes, FaaS, and the cloud because it has been designed with these technologies in mind.&lt;/p&gt; &lt;pre&gt;oc new-app quay.io/quarkus/ubi-quarkus-native-s2i:19.0.2~https://github.com/snandakumar87/quarkus-transaction-crud oc cancel-build bc/quarkus-transaction-crud oc patch bc/quarkus-transaction-crud -p '{"spec":{"resources":{"limits":{"cpu":"5", "memory":"6Gi"}}}}' oc start-build bc/quarkus-transaction-crud oc expose svc/quarkus-transaction-crud&lt;/pre&gt; &lt;h2&gt;CDC in action&lt;/h2&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/uox8l1GtPSQ?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;p&gt;Open up the Red Hat OpenShift console and go into the project (debezium-cdc). You should see Multiple Application pods listed. Look for the “quarkus-transaction-crud” pod and follow the external route to land on the e-shopping web page.&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone wp-image-617647 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/08/crud_ui-1024x248.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/08/crud_ui-300x73.png" alt="" width="658" height="160" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/08/crud_ui-300x73.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/crud_ui-768x186.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/crud_ui-1024x248.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/crud_ui.png 1600w" sizes="(max-width: 658px) 100vw, 658px" /&gt;&lt;/p&gt; &lt;p&gt;Click on buy for the Macbook Pro, then navigate back to the OpenShift console, and look for an application pod “mysql” and navigate to the terminal. We will now verify the transaction data in the MySQL database.&lt;/p&gt; &lt;pre&gt;oc rsh &amp;#60;pod_name&amp;#62;) mysql -u &amp;#60;username&amp;#62; -p&amp;#60;password&amp;#62; -h mysql &amp;#60;databasename&amp;#62; Select * from transaction;&lt;/pre&gt; &lt;p&gt;&lt;img class=" alignnone wp-image-617657 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/08/txn_DB-1024x442.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/08/txn_DB-300x130.png" alt="" width="667" height="289" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/08/txn_DB-300x130.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/txn_DB-768x332.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/txn_DB-1024x442.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/txn_DB.png 1600w" sizes="(max-width: 667px) 100vw, 667px" /&gt;&lt;/p&gt; &lt;p&gt;Now that the data is entered into the DB, we can quickly look at the Change Data Capture. Open up the logs for the Kafka-Connect pod.&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone wp-image-617667 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/08/CDC_logs-1024x487.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/08/CDC_logs-300x143.png" alt="" width="669" height="319" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/08/CDC_logs-300x143.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/CDC_logs-768x365.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/CDC_logs-1024x487.png 1024w" sizes="(max-width: 669px) 100vw, 669px" /&gt;&lt;/p&gt; &lt;p&gt;The change is captured and added to our Kafka topic. Now let&amp;#8217;s switch to the Red Hat Fuse online console.&lt;/p&gt; &lt;p&gt;&lt;img class=" alignnone wp-image-617677 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/08/fuse_online-1024x294.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/08/fuse_online-300x86.png" alt="" width="663" height="190" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/08/fuse_online-300x86.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/fuse_online-768x221.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/fuse_online-1024x294.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/fuse_online.png 1600w" sizes="(max-width: 663px) 100vw, 663px" /&gt;&lt;/p&gt; &lt;p&gt;We can see that the transaction has been read from the Kafka topic, filtered, and sent to Elasticsearch. Let&amp;#8217;s do a simple GET on the elastic search REST endpoint to look for the new records that have been read from the Kafka topic.&lt;/p&gt; &lt;pre&gt;GET &amp;#60;elastic-url&amp;#62;/transaction/_search&lt;/pre&gt; &lt;p&gt;&lt;img class=" alignnone wp-image-617707 " data-add-featherlight="https://developers.redhat.com/blog/wp-content/uploads/2019/08/elastic_post-1024x457.png" src="https://developers.redhat.com/blog/wp-content/uploads/2019/08/elastic_post-300x134.png" alt="" width="660" height="295" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/08/elastic_post-300x134.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/elastic_post-768x342.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/elastic_post-1024x457.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/08/elastic_post.png 1292w" sizes="(max-width: 660px) 100vw, 660px" /&gt;&lt;/p&gt; &lt;h2&gt;Summary&lt;/h2&gt; &lt;p&gt;By harnessing the power of CDC features using Debezium, we can capture the data changes as they happen, which can now be streamed so that the downstream systems can make use of it. Red Hat Fuse unlocks the potential to&lt;a href="https://developers.redhat.com/products/fuse/connectors"&gt; connect several of these external systems&lt;/a&gt;, thereby completing the data pipeline.&lt;/p&gt; &lt;h3&gt;References&lt;/h3&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://www.redhat.com/en/products/integration?extIdCarryOver=true&amp;#38;sc_cid=701f20000012i69AAA"&gt;Red Hat Integration&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://developers.redhat.com/products/fuse/overview"&gt;Red Hat Fuse&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://debezium.io/docs/amq-streams/"&gt;Debezium&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://quarkus.io/"&gt;Quarkus&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F03%2Fcdc-pipeline-with-red-hat-amq-streams-and-red-hat-fuse%2F&amp;#38;linkname=CDC%20pipeline%20with%20Red%20Hat%20AMQ%20Streams%20and%20Red%20Hat%20Fuse" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F03%2Fcdc-pipeline-with-red-hat-amq-streams-and-red-hat-fuse%2F&amp;#38;linkname=CDC%20pipeline%20with%20Red%20Hat%20AMQ%20Streams%20and%20Red%20Hat%20Fuse" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F03%2Fcdc-pipeline-with-red-hat-amq-streams-and-red-hat-fuse%2F&amp;#38;linkname=CDC%20pipeline%20with%20Red%20Hat%20AMQ%20Streams%20and%20Red%20Hat%20Fuse" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F03%2Fcdc-pipeline-with-red-hat-amq-streams-and-red-hat-fuse%2F&amp;#38;linkname=CDC%20pipeline%20with%20Red%20Hat%20AMQ%20Streams%20and%20Red%20Hat%20Fuse" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F03%2Fcdc-pipeline-with-red-hat-amq-streams-and-red-hat-fuse%2F&amp;#38;linkname=CDC%20pipeline%20with%20Red%20Hat%20AMQ%20Streams%20and%20Red%20Hat%20Fuse" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F03%2Fcdc-pipeline-with-red-hat-amq-streams-and-red-hat-fuse%2F&amp;#38;linkname=CDC%20pipeline%20with%20Red%20Hat%20AMQ%20Streams%20and%20Red%20Hat%20Fuse" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F03%2Fcdc-pipeline-with-red-hat-amq-streams-and-red-hat-fuse%2F&amp;#38;linkname=CDC%20pipeline%20with%20Red%20Hat%20AMQ%20Streams%20and%20Red%20Hat%20Fuse" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F03%2Fcdc-pipeline-with-red-hat-amq-streams-and-red-hat-fuse%2F&amp;#038;title=CDC%20pipeline%20with%20Red%20Hat%20AMQ%20Streams%20and%20Red%20Hat%20Fuse" data-a2a-url="https://developers.redhat.com/blog/2019/09/03/cdc-pipeline-with-red-hat-amq-streams-and-red-hat-fuse/" data-a2a-title="CDC pipeline with Red Hat AMQ Streams and Red Hat Fuse"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/09/03/cdc-pipeline-with-red-hat-amq-streams-and-red-hat-fuse/"&gt;CDC pipeline with Red Hat AMQ Streams and Red Hat Fuse&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/80fEy3uSBGQ" height="1" width="1" alt=""/&gt;</content><summary>Change Data Capture (CDC) is a pattern that enables database changes to be monitored and propagated to downstream systems. It is an effective way of enabling reliable microservices integration and solving typical challenges, such as gradually extracting microservices from existing monoliths. With the release of Red Hat AMQ Streams 1.2, Red Hat Integration now includes a developer preview of CDC fe...</summary><dc:creator>snandaku</dc:creator><dc:date>2019-09-03T07:00:44Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/09/03/cdc-pipeline-with-red-hat-amq-streams-and-red-hat-fuse/</feedburner:origLink></entry><entry><title>Report from July 2019 ISO C++ Meeting (Core Language)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/aJn60tEg8yM/" /><category term="C++" scheme="searchisko:content:tags" /><category term="Developer Tools" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="language" scheme="searchisko:content:tags" /><category term="Programming Languages" scheme="searchisko:content:tags" /><category term="Red Hat Developer Toolset" scheme="searchisko:content:tags" /><author><name>Jason Merrill</name></author><id>searchisko:content:id:jbossorg_blog-report_from_july_2019_iso_c_meeting_core_language</id><updated>2019-09-03T07:00:41Z</updated><published>2019-09-03T07:00:41Z</published><content type="html">&lt;p&gt;The summer 2019 &lt;a href="https://isocpp.org/std/meetings-and-participation/upcoming-meetings"&gt;C++ meeting&lt;/a&gt; was in Cologne, Germany, 10 years since our last meeting in Germany. As usual, Red Hat sent three of us to the meeting: I attended in the Core language &lt;a href="https://isocpp.org/std/the-committee"&gt;working group&lt;/a&gt; (CWG), Jonathan Wakely in Library (LWG), and Thomas Rodgers in SG1 (parallelism and concurrency).&lt;/p&gt; &lt;p&gt;At the end of the meeting, as planned, we voted to send out a draft of the C++20 standard for comments from the national bodies. The most surprising thing about it was the proposal to:&lt;/p&gt; &lt;h4&gt;&lt;a href="http://wg21.link/p1823r0"&gt;Remove Contracts from C++20&lt;/a&gt;&lt;/h4&gt; &lt;p&gt;The disagreements from the &lt;a href="https://developers.redhat.com/blog/2019/04/11/report-from-the-february-2019-iso-c-meeting-core-language-working-group/"&gt;February meeting in Kona&lt;/a&gt; continued at this meeting; since no consensus seemed likely during the week, the two sides agreed to remove the Contracts feature from C++20 and revisit it for the next standard.  A new Study Group was formed for continuing discussion, to be led by a neutral party.&lt;/p&gt; &lt;p&gt;Other than that, the contents of the draft were about as expected. Quite a few minor features and corrections that had previously been approved by Evolution made it through Core and into the draft at this meeting:&lt;/p&gt; &lt;h3&gt;Concepts&lt;/h3&gt; &lt;h4&gt;&lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0848r3.html"&gt;Conditionally trivial special member functions&lt;/a&gt;&lt;/h4&gt; &lt;p&gt;This clarifies the semantics of overloaded of constructors and destructors with different constraints, for example:&lt;/p&gt; &lt;pre class="moz-text-flowed"&gt;struct empty {}; template &amp;#60;typename T&amp;#62; class optional { bool engaged = false; union {     empty _ = {};     T value;   }; public:   constexpr optional() = default; // non-trivial due to default member initializer   constexpr optional(optional const&amp;#38;) requires std::is_trivially_copy_constructible_v&amp;#60;T&amp;#62; = default;   constexpr optional(optional const&amp;#38; o): engaged(o.engaged) { if (o.engaged) new (&amp;#38;value) T(o.value); }   ~optional() requires std::is_trivially_destructible_v&amp;#60;T&amp;#62; = default;   ~optional() { if (engaged) value.~T(); }   // ... };&lt;/pre&gt; &lt;p&gt;If the requirements of the first overload of the copy constructor or destructor are satisfied, it effectively hides the second overload which is less constrained, so &lt;tt&gt;optional&amp;#60;int&amp;#62;&lt;/tt&gt; is trivially copy-constructible and trivially destructible.&lt;/p&gt; &lt;h4&gt;&lt;a href="http://wg21.link/p1616r1"&gt;Unconstrained template template parameters and constrained templates&lt;/a&gt;&lt;/h4&gt; &lt;p&gt;Normally, a template template parameter (TTP) must be at least as specialized as its template template argument. However, that meant that there was no way to write a TTP that accepted any template regardless of its constraints:&lt;/p&gt; &lt;pre class="moz-text-flowed"&gt;template &amp;#60;template &amp;#60;typename&amp;#62; typename TT&amp;#62; struct A {}; template &amp;#60;typename T&amp;#62; concept Any = true; template &amp;#60;Any&amp;#62; struct B; A&amp;#60;B&amp;#62; a; // previously error (TT is less constrained than B), now OK&lt;/pre&gt; &lt;p&gt;As I pointed out during discussion of this paper, there is already an exception for a TTP with a template parameter pack accepting an argument template with a specific number of template parameters; this adds the parallel escape hatch for constraints, so that a TTP with no constraints at all will match a constrained argument template.&lt;/p&gt; &lt;h4 class="moz-text-flowed"&gt;&lt;a href="http://wg21.link/p1452r2"&gt;Removing return-type requirements&lt;/a&gt;&lt;/h4&gt; &lt;p&gt;For a compound-requirement in a requires-expression, it was found unclear whether&lt;/p&gt; &lt;pre class="moz-text-flowed"&gt;  { expr } -&amp;#62; Type&lt;/pre&gt; &lt;div class="moz-text-flowed" lang="x-unicode"&gt;ought to require the exact type or convertibility. So, use of a type here was removed for C++20, and users can choose for themselves with&lt;/div&gt; &lt;pre class="moz-text-flowed"&gt;  { expr } -&amp;#62; Same&amp;#60;Type&amp;#62;&lt;/pre&gt; &lt;div class="moz-text-flowed" lang="x-unicode"&gt;or&lt;/div&gt; &lt;pre class="moz-text-flowed"&gt;  { expr } -&amp;#62; ConvertibleTo&amp;#60;Type&amp;#62;&lt;/pre&gt; &lt;h3 class="moz-text-flowed"&gt;Modules&lt;/h3&gt; &lt;h4 class="moz-text-flowed"&gt;&lt;a href="http://wg21.link/p1766r1"&gt;Mitigating minor modules maladies&lt;/a&gt;&lt;/h4&gt; &lt;p&gt;First, structs with only typedef names for linkage purposes, for example:&lt;/p&gt; &lt;pre class="moz-text-flowed"&gt;typedef struct { int i; } foobar;&lt;/pre&gt; &lt;p&gt;have always been fragile if any of their members are affected by that linkage, e.g. member functions or static data members, and we finally made such members ill-formed. Because this is a C compatibility hack, limiting it to definitions that can actually appear in C seems reasonable.&lt;/p&gt; &lt;p&gt;Second, it is now ill-formed (no diagnostic required) for a function to have different default arguments in different translation units.&lt;/p&gt; &lt;h4&gt;&lt;a href="http://wg21.link/p1811r0"&gt;Relaxing re-export redefinition restrictions&lt;/a&gt;&lt;/h4&gt; &lt;p&gt;Allows a single definition of an entity in a translation unit even if a definition is also available from an imported module, to reduce headaches from multiple inclusion of legacy header files.&lt;/p&gt; &lt;h4&gt;&lt;a href="http://wg21.link/p1703r1"&gt;Recognizing header units&lt;/a&gt;&lt;/h4&gt; &lt;p&gt;Requires that a header unit import declaration be on a line by itself, starting with &lt;tt&gt;import&lt;/tt&gt; or &lt;tt&gt;export import&lt;/tt&gt;, for easier partial preprocessing.&lt;/p&gt; &lt;h3&gt;Spaceship (operator&amp;#60;=&amp;#62;)&lt;/h3&gt; &lt;h4&gt;&lt;a href="http://wg21.link/p1186r3"&gt;When do you actually use operator&amp;#60;=&amp;#62;?&lt;/a&gt;&lt;/h4&gt; &lt;p&gt;Allows synthesis of &lt;tt&gt;operator&amp;#60;=&amp;#62;&lt;/tt&gt; from &lt;tt&gt;operator&amp;#60;&lt;/tt&gt; and &lt;tt&gt;operator==&lt;/tt&gt; if an explicit return type is provided.&lt;/p&gt; &lt;h4&gt;&lt;a href="http://wg21.link/p1630r1"&gt;Spaceship needs a tune-up&lt;/a&gt;&lt;/h4&gt; &lt;p&gt;Clarification of comparison operator synthesis and how rewritten comparison operators participate in overload resolution.&lt;/p&gt; &lt;h3&gt;constexpr&lt;/h3&gt; &lt;h4&gt;&lt;a href="http://wg21.link/p1331r2"&gt;Trivial default initialization in constexpr&lt;/a&gt;&lt;/h4&gt; &lt;p&gt;In C++17, a variable in a constexpr function must be initialized.  This paper removes that requirement and replaces it with a requirement that an object must be given a value before it is read from. So,&lt;/p&gt; &lt;pre class="moz-text-flowed"&gt;constexpr int f(int i) {   int j; // error in C++17, OK in C++20   j = i; // j now has a value   return j; // OK } constexpr int x = f(42); // OK constexpr int g(int i) {   int j; // error in C++17, OK in C++20   return j; // ill-formed, no diagnostic required: will never produce a constant value } constexpr int y = g(42); // error, non-constant initializer&lt;/pre&gt; &lt;h4&gt;&lt;a href="http://wg21.link/p1668r1"&gt;Unevaluated asm in constexpr functions&lt;/a&gt;&lt;/h4&gt; &lt;p&gt;Another thing that&amp;#8217;s no longer prohibited in a constexpr function; it just doesn&amp;#8217;t produce a constant value.&lt;/p&gt; &lt;h4&gt;&lt;a href="http://wg21.link/p1143r2"&gt;Adding the constinit keyword&lt;/a&gt;&lt;/h4&gt; &lt;p&gt;A new keyword to require constant (static) initialization of a non-const variable:&lt;/p&gt; &lt;pre class="moz-text-flowed"&gt;constexpr int f(int x) { return x; } constinit int i = f(42); // OK constinit int j = f(i);  // error, i isn't constant&lt;/pre&gt; &lt;h4&gt;&lt;a href="http://wg21.link/p0784r7"&gt;More constexpr containers&lt;/a&gt;&lt;/h4&gt; &lt;p&gt;Allowing containers such as &lt;tt&gt;std::vector&lt;/tt&gt; to be used in constexpr functions, by requiring that allocation/deallocation pairs be omitted during constant evaluation (as has been permitted in dynamically evaluated code since C++14).&lt;/p&gt; &lt;h4&gt;&lt;a href="http://wg21.link/p1301r4"&gt;[[nodiscard(&amp;#8220;should have a reason&amp;#8221;)]]&lt;/a&gt;&lt;/h4&gt; &lt;h4&gt;&lt;a href="http://wg21.link/p1771r1"&gt;[[nodiscard]] for constructors&lt;/a&gt;&lt;/h4&gt; &lt;p&gt;Filling in missing functionality for &lt;tt&gt;[[nodiscard]]&lt;/tt&gt;.&lt;/p&gt; &lt;h4&gt;&lt;a href="http://wg21.link/p1816r0"&gt;Class template argument deduction (CTAD) for aggregates&lt;/a&gt;&lt;/h4&gt; &lt;h4&gt;&lt;a href="http://wg21.link/p1814r0"&gt;CTAD for alias templates&lt;/a&gt;&lt;/h4&gt; &lt;p&gt;Supporting CTAD for additional templates. There was also a proposal to support deduction from inherited constructors, but the wording wasn&amp;#8217;t ready in time.&lt;/p&gt; &lt;h4 class="moz-text-flowed"&gt;&lt;a href="http://wg21.link/p1099r5"&gt;Using enum&lt;/a&gt;&lt;/h4&gt; &lt;p&gt;Allowing a user to import the enumerators of a scoped enumeration into the current scope, so they can be named without explicit scope.&lt;/p&gt; &lt;pre class="moz-text-flowed"&gt;  enum class A { a1 };   using enum A;   int i = a1;&lt;/pre&gt; &lt;p&gt;Note that there is significant &lt;a href="https://en.wiktionary.org/wiki/bikeshedding"&gt;bikeshedding&lt;/a&gt; happening on the lists at the moment, so the syntax may change before the final C++20 standard.&lt;/p&gt; &lt;h4&gt;&lt;a href="http://wg21.link/p0388r4"&gt;Conversion to arrays of unknown bound&lt;/a&gt;&lt;/h4&gt; &lt;p&gt;Permitting conversion from array of known bound to array of unknown bound in pointer conversion and reference binding.&lt;/p&gt; &lt;pre class="moz-text-flowed"&gt; int arr[42]; void f(int(&amp;#38;)[]);   void g(int(*)[]);   f(arr);    // now OK   g(&amp;#38;arr);   // now OK&lt;/pre&gt; &lt;h4&gt;&lt;a href="http://wg21.link/p1825r0"&gt;More implicit moves&lt;/a&gt;&lt;/h4&gt; &lt;p&gt;Loosens the C++11 conditions for implicit move in throw or return in various ways: now rvalue references will also be implicitly moved from, and implicit move is not limited to a constructor taking an rvalue reference to the returned expression&amp;#8217;s type.&lt;/p&gt; &lt;pre class="moz-text-flowed"&gt;  struct Movable { Movable(Movable&amp;#38;&amp;#38;); };   Movable f1(Movable &amp;#38;&amp;#38;r) { return r; } // now moves   struct Derived: Movable { };   Movable f2(Derived d) { return d; }   // now moves   struct Proxy { Proxy(Movable); };   Proxy f3(Movable m) { return m; }     // now moves&lt;/pre&gt; &lt;h4&gt;&lt;a href="http://wg21.link/p1152r4"&gt;Deprecating some uses of volatile&lt;/a&gt;&lt;/h4&gt; &lt;p&gt;Expressions such as ++ or += that involve both load and store of a volatile lvalue are deprecated, as are volatile-qualified parameter and return types.&lt;/p&gt; &lt;h4&gt;&lt;a href="http://wg21.link/p1161r3"&gt;Deprecating comma in subscripting expressions&lt;/a&gt;&lt;/h4&gt; &lt;p&gt;The authors would like to be able to use the comma in an array subscript to separate multiple arguments to &lt;tt&gt;operator[]&lt;/tt&gt; rather than as the comma operator, so the existing semantics are deprecated in C++20 to make room for new semantics in a future standard.&lt;/p&gt; &lt;pre class="moz-text-flowed"&gt;  array[x,y]    // Deprecated, uses y as index/key&lt;/pre&gt; &lt;h4&gt;&lt;a href="http://wg21.link/p0735r1"&gt;Interaction of memory_order_consume with release sequences&lt;/a&gt;&lt;/h4&gt; &lt;p&gt;A fairly subtle adjustment to consume semantics to make them less broken on ARM.  Most implementations treat consume as acquire, so this will not affect users.&lt;/p&gt; &lt;p&gt;The &lt;a href="https://isocpp.org/std/meetings-and-participation/upcoming-meetings"&gt;next meeting&lt;/a&gt; will be in Belfast, Northern Ireland in November, where we will start to process national body comments on the C++20 draft.  If you have any comments, please send them to a committee member to pass along.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F03%2Freport-from-july-2019-iso-c-meeting-core-language%2F&amp;#38;linkname=Report%20from%20July%202019%20ISO%20C%2B%2B%20Meeting%20%28Core%20Language%29" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F03%2Freport-from-july-2019-iso-c-meeting-core-language%2F&amp;#38;linkname=Report%20from%20July%202019%20ISO%20C%2B%2B%20Meeting%20%28Core%20Language%29" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F03%2Freport-from-july-2019-iso-c-meeting-core-language%2F&amp;#38;linkname=Report%20from%20July%202019%20ISO%20C%2B%2B%20Meeting%20%28Core%20Language%29" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F03%2Freport-from-july-2019-iso-c-meeting-core-language%2F&amp;#38;linkname=Report%20from%20July%202019%20ISO%20C%2B%2B%20Meeting%20%28Core%20Language%29" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F03%2Freport-from-july-2019-iso-c-meeting-core-language%2F&amp;#38;linkname=Report%20from%20July%202019%20ISO%20C%2B%2B%20Meeting%20%28Core%20Language%29" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F03%2Freport-from-july-2019-iso-c-meeting-core-language%2F&amp;#38;linkname=Report%20from%20July%202019%20ISO%20C%2B%2B%20Meeting%20%28Core%20Language%29" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F03%2Freport-from-july-2019-iso-c-meeting-core-language%2F&amp;#38;linkname=Report%20from%20July%202019%20ISO%20C%2B%2B%20Meeting%20%28Core%20Language%29" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F09%2F03%2Freport-from-july-2019-iso-c-meeting-core-language%2F&amp;#038;title=Report%20from%20July%202019%20ISO%20C%2B%2B%20Meeting%20%28Core%20Language%29" data-a2a-url="https://developers.redhat.com/blog/2019/09/03/report-from-july-2019-iso-c-meeting-core-language/" data-a2a-title="Report from July 2019 ISO C++ Meeting (Core Language)"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/09/03/report-from-july-2019-iso-c-meeting-core-language/"&gt;Report from July 2019 ISO C++ Meeting (Core Language)&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/aJn60tEg8yM" height="1" width="1" alt=""/&gt;</content><summary>The summer 2019 C++ meeting was in Cologne, Germany, 10 years since our last meeting in Germany. As usual, Red Hat sent three of us to the meeting: I attended in the Core language working group (CWG), Jonathan Wakely in Library (LWG), and Thomas Rodgers in SG1 (parallelism and concurrency). At the end of the meeting, as planned, we voted to send out a draft of the C++20 standard for comments from ...</summary><dc:creator>Jason Merrill</dc:creator><dc:date>2019-09-03T07:00:41Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/09/03/report-from-july-2019-iso-c-meeting-core-language/</feedburner:origLink></entry><entry><title>What's Coming To Keycloak</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/XDWUfmSnn4Y/2019-roadmap.html" /><category term="feed_group_name_keycloak" scheme="searchisko:content:tags" /><category term="feed_name_keycloak" scheme="searchisko:content:tags" /><author><name>Stian Thorgersen</name></author><id>searchisko:content:id:jbossorg_blog-what_s_coming_to_keycloak</id><updated>2019-09-03T00:00:00Z</updated><published>2019-09-03T00:00:00Z</published><content type="html">&lt;h3&gt;New Account Console and Account REST API&lt;/h3&gt; &lt;p&gt;The current account console is getting dated. It is also having issues around usability and being hard to extend. For this reason we had the UXD team at Red Hat develop &lt;a href="https://marvelapp.com/c90dfi0/screen/59941600"&gt;wireframes&lt;/a&gt; for a new account console. The new console is being implemented with React.js providing a better user experience as well as making it easier to extend and customise.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://issues.jboss.org/browse/KEYCLOAK-6197"&gt;JIRA - Account Console&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://issues.jboss.org/browse/KEYCLOAK-7428"&gt;JIRA - Account REST API&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;WebAuthn&lt;/h3&gt; &lt;p&gt;We are working towards adding WebAuthn support both for two factor authentication and passwordless experience. This task is not as simple as adding an authenticator for WebAuth, but will also require work on improving authentication flows and the account console.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://github.com/keycloak/keycloak-community/blob/master/design/multi-factor-admin-and-step-up.md"&gt;Design proposal - Authentication flow improvements&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/keycloak/keycloak-community/blob/master/design/web-authn-authenticator.md"&gt;Design proposal - WebAuthn Authenticator&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/keycloak/keycloak-community/blob/master/design/web-authn-two-factor.md"&gt;Design proposal - WebAuthn Two factor&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://issues.jboss.org/browse/KEYCLOAK-7159"&gt;JIRA - Two factor&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://issues.jboss.org/browse/KEYCLOAK-9365"&gt;JIRA - Passwordless&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Operator&lt;/h3&gt; &lt;p&gt;Operators are becoming an important way to manage software running on Kubernetes and we are working on an operator for Keycloak. The aim is to have an operator published on &lt;a href="https://operatorhub.io/"&gt;OperatorHub.io&lt;/a&gt; soon which provides basic install and seamless upgrade capabilities. This will be based on the awesome work done by the Red Hat Integreatly team.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://issues.jboss.org/browse/KEYCLOAK-7300"&gt;JIRA&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="https://github.com/integr8ly/keycloak-operator"&gt;Integreatly Keycloak Operator&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Vault&lt;/h3&gt; &lt;p&gt;At the moment to keep credentials such as LDAP bind credentials more secure it is required to encrypt the whole database. This can be complex and can also have a performance overhead.&lt;/p&gt; &lt;p&gt;We are working towards enabling loading credentials, such as LDAP bind credential and SMTP password, from an external vault. We're providing a built-in integration with Kubernetes secrets as well as an SPI allowing integrating with any vault provider.&lt;/p&gt; &lt;p&gt;In the future we will also provide the option to encrypt other more dynamic credentials at rest in the database.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://issues.jboss.org/browse/KEYCLOAK-3205"&gt;JIRA - Vault&lt;/li&gt; &lt;li&gt;&lt;a href="https://issues.jboss.org/browse/KEYCLOAK-10774"&gt;JIRA - Encryption at rest&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;User Profile&lt;/h3&gt; &lt;p&gt;Currently there's no single place to define user profiles for a realm. To resolve this we are planning to introduce the Profile SPI, which will make it possible to define a user profile for a realm. It will be possible to define mandatory as well as optional attributes and also add validation to the attributes.&lt;/p&gt; &lt;p&gt;The built-in Profile SPI provider will make it possible to declaratively define the user profile for a realm and we also aim to have an editor in the admin console.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://issues.jboss.org/browse/KEYCLOAK-2966"&gt;JIRA&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Observerability&lt;/h3&gt; &lt;p&gt;Keycloak already comes with basic support for metrics and health endpoints provided by the underlying WildFly container. We plan to document how to enable this as well as extend with Keycloak specific metrics and health checks. If you would like to try this out today check the WildFly documentation.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="https://issues.jboss.org/browse/KEYCLOAK-8288"&gt;JIRA&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Continuous Delivery&lt;/h3&gt; &lt;p&gt;Over the last few months the team has invested a significant amount of time into automated testing and builds. This will pay of in the long run as we will need to spend less time on releases and will also make sure Keycloak is always release ready. In fact we're taking this as far as not allowing maintainers to manually merge PRs anymore, but rather have created a bot called the Merge Monster that will merge PRs automatically after they have been both manually reviewed and all tests have passed.&lt;/p&gt; &lt;h3&gt;Keycloak.X&lt;/h3&gt; &lt;p&gt;It's 5 years since the first Keycloak release so high time for some rearchitecting. More details coming soon!&lt;/p&gt; &lt;h3&gt;Kanban Planning Board&lt;/h3&gt; &lt;p&gt;For more insight and details into what we are working on and our backlog, check out our &lt;a href="https://issues.jboss.org/secure/RapidBoard.jspa?rapidView=4740&amp;quickFilter=17938&amp;quickFilter=17950"&gt; Kanban Planning Board&lt;/a&gt;.&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/XDWUfmSnn4Y" height="1" width="1" alt=""/&gt;</content><summary>New Account Console and Account REST API The current account console is getting dated. It is also having issues around usability and being hard to extend. For this reason we had the UXD team at Red Hat develop wireframes for a new account console. The new console is being implemented with React.js providing a better user experience as well as making it easier to extend and customise. JIRA - Accoun...</summary><dc:creator>Stian Thorgersen</dc:creator><dc:date>2019-09-03T00:00:00Z</dc:date><feedburner:origLink>https://www.keycloak.org/2019/09/2019-roadmap.html</feedburner:origLink></entry></feed>
